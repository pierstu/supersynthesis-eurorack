
PHRSR_V4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000281c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080029a8  080029a8  000129a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f0  080029f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029f0  080029f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f0  080029f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f0  080029f0  000129f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08002a68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08002a68  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093f3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015fe  00000000  00000000  00029493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000494a  00000000  00000000  0002aa91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000908  00000000  00000000  0002fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014123  00000000  00000000  00030640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008519  00000000  00000000  00044763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007f955  00000000  00000000  0004cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000cc5d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018d0  00000000  00000000  000cc624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800298c 	.word	0x0800298c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	0800298c 	.word	0x0800298c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <NVIC_Config>:

	/* Start ADC1 Software Conversion */
	ADC_StartConversion(ADC1);
}

void NVIC_Config() {
 8000ae0:	b507      	push	{r0, r1, r2, lr}

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 8000ae2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8000ae6:	f000 fe91 	bl	800180c <NVIC_PriorityGroupConfig>

	NVIC_InitTypeDef nvicStructure;
	nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <NVIC_Config+0x30>)
 8000aec:	9301      	str	r3, [sp, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
 8000aee:	a801      	add	r0, sp, #4
 8000af0:	f000 fe96 	bl	8001820 <NVIC_Init>

	nvicStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <NVIC_Config+0x34>)
 8000af6:	9301      	str	r3, [sp, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
 8000af8:	a801      	add	r0, sp, #4
 8000afa:	f000 fe91 	bl	8001820 <NVIC_Init>

	// Enable DMA1 channel1 IRQ Channel
	nvicStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <NVIC_Config+0x38>)
 8000b00:	9301      	str	r3, [sp, #4]
	nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
	nvicStructure.NVIC_IRQChannelSubPriority = 0;
	nvicStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&nvicStructure);
 8000b02:	a801      	add	r0, sp, #4
 8000b04:	f000 fe8c 	bl	8001820 <NVIC_Init>
}
 8000b08:	b003      	add	sp, #12
 8000b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b0e:	bf00      	nop
 8000b10:	0100001c 	.word	0x0100001c
 8000b14:	0100001d 	.word	0x0100001d
 8000b18:	0100000b 	.word	0x0100000b

08000b1c <GPIO_Config>:

void GPIO_Config() {
 8000b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	//for example
	GPIO_InitTypeDef GPIO_InitStructure;
	//Enable GPIOB Clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b24:	f000 feb8 	bl	8001898 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000b28:	2101      	movs	r1, #1
 8000b2a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b2e:	f000 feb3 	bl	8001898 <RCC_AHBPeriphClockCmd>

	GPIO_StructInit(&GPIO_InitStructure);
 8000b32:	4668      	mov	r0, sp
 8000b34:	f000 fe5c 	bl	80017f0 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = LEFT_BUTTON | CLOCK_IN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b38:	2500      	movs	r5, #0
	GPIO_InitStructure.GPIO_Pin = LEFT_BUTTON | CLOCK_IN;
 8000b3a:	2390      	movs	r3, #144	; 0x90
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b3c:	2401      	movs	r4, #1
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b3e:	4669      	mov	r1, sp
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <GPIO_Config+0x70>)
	GPIO_InitStructure.GPIO_Pin = LEFT_BUTTON | CLOCK_IN;
 8000b42:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b44:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b48:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000b4c:	f000 fe0e 	bl	800176c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8000b50:	4668      	mov	r0, sp
 8000b52:	f000 fe4d 	bl	80017f0 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = RIGHT_BUTTON;
 8000b56:	2302      	movs	r3, #2
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b58:	4669      	mov	r1, sp
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStructure.GPIO_Pin = RIGHT_BUTTON;
 8000b5e:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b60:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b64:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b68:	f000 fe00 	bl	800176c <GPIO_Init>

	GPIO_StructInit(&GPIO_InitStructure);
 8000b6c:	4668      	mov	r0, sp
 8000b6e:	f000 fe3f 	bl	80017f0 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = STEPS_BUTTON;
 8000b72:	2304      	movs	r3, #4
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b74:	4669      	mov	r1, sp
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStructure.GPIO_Pin = STEPS_BUTTON;
 8000b7a:	9300      	str	r3, [sp, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000b7c:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b80:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000b84:	f000 fdf2 	bl	800176c <GPIO_Init>

}
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd30      	pop	{r4, r5, pc}
 8000b8c:	48000400 	.word	0x48000400

08000b90 <delay>:

void delay(int a) {
 8000b90:	b082      	sub	sp, #8
	volatile int i, j;

	for (i = 0; i < a; i++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	9b00      	ldr	r3, [sp, #0]
 8000b98:	4283      	cmp	r3, r0
 8000b9a:	db01      	blt.n	8000ba0 <delay+0x10>
		j++;
	}

	return;
}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	4770      	bx	lr
		j++;
 8000ba0:	9b01      	ldr	r3, [sp, #4]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	9301      	str	r3, [sp, #4]
	for (i = 0; i < a; i++) {
 8000ba6:	9b00      	ldr	r3, [sp, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	e7f3      	b.n	8000b94 <delay+0x4>

08000bac <DAC_Config>:

void DAC_Config(void) {
 8000bac:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;
	DAC_InitTypeDef DAC_InitStructure;

	/* DAC Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC1, ENABLE);
 8000bae:	2101      	movs	r1, #1
void DAC_Config(void) {
 8000bb0:	b086      	sub	sp, #24
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC1, ENABLE);
 8000bb2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8000bb6:	f000 fe7b 	bl	80018b0 <RCC_APB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC2, ENABLE);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bc0:	f000 fe76 	bl	80018b0 <RCC_APB1PeriphClockCmd>

	/* GPIOA clock enable */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bca:	f000 fe65 	bl	8001898 <RCC_AHBPeriphClockCmd>

	/* Configure PA4 & PA6 as analog out */

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 8000bce:	2370      	movs	r3, #112	; 0x70
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000bd0:	2400      	movs	r4, #0
	GPIO_Init(GPIOA, &GPIO_InitStructure);
	/* DAC channel1 Configuration */
	DAC_StructInit(&DAC_InitStructure);
	DAC_InitStructure.DAC_Buffer_Switch =
	DAC_BufferSwitch_Enable;
	DAC_Init(DAC1, DAC_Channel_1, &DAC_InitStructure);
 8000bd2:	4d20      	ldr	r5, [pc, #128]	; (8000c54 <DAC_Config+0xa8>)
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
 8000bd4:	9300      	str	r3, [sp, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000bd6:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000bd8:	2303      	movs	r3, #3
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000bde:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000be2:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000be6:	f000 fdc1 	bl	800176c <GPIO_Init>
	DAC_StructInit(&DAC_InitStructure);
 8000bea:	a802      	add	r0, sp, #8
 8000bec:	f000 fd3a 	bl	8001664 <DAC_StructInit>
	DAC_Init(DAC1, DAC_Channel_2, &DAC_InitStructure);
	DAC_Init(DAC2, DAC_Channel_1, &DAC_InitStructure);
 8000bf0:	4e19      	ldr	r6, [pc, #100]	; (8000c58 <DAC_Config+0xac>)
	DAC_InitStructure.DAC_Buffer_Switch =
 8000bf2:	2302      	movs	r3, #2
	DAC_Init(DAC1, DAC_Channel_1, &DAC_InitStructure);
 8000bf4:	aa02      	add	r2, sp, #8
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	4628      	mov	r0, r5
	DAC_InitStructure.DAC_Buffer_Switch =
 8000bfa:	9305      	str	r3, [sp, #20]
	DAC_Init(DAC1, DAC_Channel_1, &DAC_InitStructure);
 8000bfc:	f000 fd1f 	bl	800163e <DAC_Init>
	DAC_Init(DAC1, DAC_Channel_2, &DAC_InitStructure);
 8000c00:	aa02      	add	r2, sp, #8
 8000c02:	4628      	mov	r0, r5
 8000c04:	2110      	movs	r1, #16
 8000c06:	f000 fd1a 	bl	800163e <DAC_Init>
	DAC_Init(DAC2, DAC_Channel_1, &DAC_InitStructure);
 8000c0a:	aa02      	add	r2, sp, #8
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f000 fd15 	bl	800163e <DAC_Init>
	DAC_Cmd(DAC1, DAC_Channel_1, ENABLE);
 8000c14:	4621      	mov	r1, r4
 8000c16:	4628      	mov	r0, r5
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f000 fd2a 	bl	8001672 <DAC_Cmd>
	DAC_Cmd(DAC1, DAC_Channel_2, ENABLE);
 8000c1e:	4628      	mov	r0, r5
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	f000 fd25 	bl	8001672 <DAC_Cmd>
	DAC_Cmd(DAC2, DAC_Channel_1, ENABLE);
 8000c28:	4621      	mov	r1, r4
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f000 fd20 	bl	8001672 <DAC_Cmd>
	DAC_SetChannel1Data(DAC1, DAC_Align_12b_R, 0);
 8000c32:	4622      	mov	r2, r4
 8000c34:	4621      	mov	r1, r4
 8000c36:	4628      	mov	r0, r5
 8000c38:	f000 fd26 	bl	8001688 <DAC_SetChannel1Data>
	DAC_SetChannel2Data(DAC1, DAC_Align_12b_R, 0);
 8000c3c:	4622      	mov	r2, r4
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 fd2d 	bl	80016a0 <DAC_SetChannel2Data>
	DAC_SetChannel1Data(DAC2, DAC_Align_12b_R, 0);
 8000c46:	4622      	mov	r2, r4
 8000c48:	4621      	mov	r1, r4
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f000 fd1c 	bl	8001688 <DAC_SetChannel1Data>
}
 8000c50:	b006      	add	sp, #24
 8000c52:	bd70      	pop	{r4, r5, r6, pc}
 8000c54:	40007400 	.word	0x40007400
 8000c58:	40009800 	.word	0x40009800

08000c5c <TIM_Config>:

void TIM_Config(void) {
 8000c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	//TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	//TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
	//TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
	//TIM_Cmd(TIM2, ENABLE);
	/* TIM2 Periph clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 fe25 	bl	80018b0 <RCC_APB1PeriphClockCmd>

	/* Time base configuration */
	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 8000c66:	a801      	add	r0, sp, #4
 8000c68:	f000 fe7c 	bl	8001964 <TIM_TimeBaseStructInit>
	TIM_TimeBaseStructure.TIM_Period = 45000;
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8000c72:	e9cd 2301 	strd	r2, r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV4;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000c76:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV4;
 8000c78:	f44f 7300 	mov.w	r3, #512	; 0x200
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000c7c:	480a      	ldr	r0, [pc, #40]	; (8000ca8 <TIM_Config+0x4c>)
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV4;
 8000c7e:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000c82:	f000 fe21 	bl	80018c8 <TIM_TimeBaseInit>
	TIM_ARRPreloadConfig(TIM3, ENABLE);
 8000c86:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <TIM_Config+0x4c>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	f000 fe72 	bl	8001972 <TIM_ARRPreloadConfig>

	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4611      	mov	r1, r2
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <TIM_Config+0x4c>)
 8000c94:	f000 fe85 	bl	80019a2 <TIM_ITConfig>
	TIM_Cmd(TIM3, ENABLE);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <TIM_Config+0x4c>)
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	f000 fe75 	bl	800198a <TIM_Cmd>

}
 8000ca0:	b005      	add	sp, #20
 8000ca2:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ca6:	bf00      	nop
 8000ca8:	40000400 	.word	0x40000400

08000cac <SysTick_Handler>:
volatile uint8_t clk_out, last_clk_out;
volatile int8_t delayed_clk;

void SysTick_Handler() {
	//system tick
}
 8000cac:	4770      	bx	lr
	...

08000cb0 <setup>:
void loop() {
}

const int16_t tanh_table[256];

void setup() {
 8000cb0:	b530      	push	{r4, r5, lr}
 8000cb2:	b09b      	sub	sp, #108	; 0x6c
	GPIO_Config();
 8000cb4:	f7ff ff32 	bl	8000b1c <GPIO_Config>
	DAC_Config();
 8000cb8:	f7ff ff78 	bl	8000bac <DAC_Config>
	TIM_Config();
 8000cbc:	f7ff ffce 	bl	8000c5c <TIM_Config>
	ADC_CommonStructInit(&ADC_CommonInitStructure);
 8000cc0:	a802      	add	r0, sp, #8
 8000cc2:	f000 fc11 	bl	80014e8 <ADC_CommonStructInit>
	ADC_StructInit(&ADC_InitStructure);
 8000cc6:	a807      	add	r0, sp, #28
 8000cc8:	f000 fbd4 	bl	8001474 <ADC_StructInit>
	DMA_StructInit(&DMA_InitStructure);
 8000ccc:	a80f      	add	r0, sp, #60	; 0x3c
 8000cce:	f000 fd11 	bl	80016f4 <DMA_StructInit>
	RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
 8000cd2:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000cd6:	f000 fdcf 	bl	8001878 <RCC_ADCCLKConfig>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000ce0:	f000 fdda 	bl	8001898 <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	f000 fdd6 	bl	8001898 <RCC_AHBPeriphClockCmd>
	DMA_InitStructure.DMA_BufferSize = 2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) &ADC[0];
 8000cf2:	4b57      	ldr	r3, [pc, #348]	; (8000e50 <setup+0x1a0>)
 8000cf4:	9310      	str	r3, [sp, #64]	; 0x40
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	9316      	str	r3, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	9314      	str	r3, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8000d00:	2320      	movs	r3, #32
 8000d02:	9317      	str	r3, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) &ADC1->DR;
 8000d04:	4b53      	ldr	r3, [pc, #332]	; (8000e54 <setup+0x1a4>)
 8000d06:	930f      	str	r3, [sp, #60]	; 0x3c
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000d08:	f44f 7380 	mov.w	r3, #256	; 0x100
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000d0c:	2400      	movs	r4, #0
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000d0e:	4852      	ldr	r0, [pc, #328]	; (8000e58 <setup+0x1a8>)
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8000d10:	9315      	str	r3, [sp, #84]	; 0x54
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000d12:	a90f      	add	r1, sp, #60	; 0x3c
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d18:	9318      	str	r3, [sp, #96]	; 0x60
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 8000d1a:	9411      	str	r4, [sp, #68]	; 0x44
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000d1c:	9413      	str	r4, [sp, #76]	; 0x4c
	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 8000d1e:	f000 fccb 	bl	80016b8 <DMA_Init>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000d22:	2101      	movs	r1, #1
 8000d24:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d28:	f000 fdb6 	bl	8001898 <RCC_AHBPeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = RATE_POT | DC_POT;
 8000d2c:	2303      	movs	r3, #3
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d2e:	484b      	ldr	r0, [pc, #300]	; (8000e5c <setup+0x1ac>)
	GPIO_InitStructure.GPIO_Pin = RATE_POT | DC_POT;
 8000d30:	9300      	str	r3, [sp, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d32:	4669      	mov	r1, sp
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000d34:	f88d 3004 	strb.w	r3, [sp, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000d38:	f88d 4007 	strb.w	r4, [sp, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d3c:	f000 fd16 	bl	800176c <GPIO_Init>
	ADC_VoltageRegulatorCmd(ADC1, ENABLE);
 8000d40:	2101      	movs	r1, #1
 8000d42:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d46:	f000 fbf2 	bl	800152e <ADC_VoltageRegulatorCmd>
	delay(500);
 8000d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4e:	f7ff ff1f 	bl	8000b90 <delay>
	ADC_SelectCalibrationMode(ADC1, ADC_CalibrationMode_Single);
 8000d52:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d56:	4621      	mov	r1, r4
 8000d58:	f000 fbde 	bl	8001518 <ADC_SelectCalibrationMode>
	ADC_StartCalibration(ADC1);
 8000d5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d60:	f000 fbd2 	bl	8001508 <ADC_StartCalibration>
	while (ADC_GetCalibrationStatus(ADC1) != RESET)
 8000d64:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d68:	f000 fbde 	bl	8001528 <ADC_GetCalibrationStatus>
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	d1f8      	bne.n	8000d64 <setup+0xb4>
	calibration_value = ADC_GetCalibrationValue(ADC1);
 8000d72:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000d76:	f000 fbcc 	bl	8001512 <ADC_GetCalibrationValue>
 8000d7a:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <setup+0x1b0>)
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000d7c:	9404      	str	r4, [sp, #16]
	calibration_value = ADC_GetCalibrationValue(ADC1);
 8000d7e:	b280      	uxth	r0, r0
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8000d80:	2502      	movs	r5, #2
	calibration_value = ADC_GetCalibrationValue(ADC1);
 8000d82:	8018      	strh	r0, [r3, #0]
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8000d84:	a902      	add	r1, sp, #8
 8000d86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	ADC_CommonInitStructure.ADC_Clock = ADC_Clock_AsynClkMode;
 8000d8a:	e9cd 4402 	strd	r4, r4, [sp, #8]
	ADC_CommonInitStructure.ADC_DMAMode = ADC_DMAMode_Circular;
 8000d8e:	9505      	str	r5, [sp, #20]
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = 2;
 8000d90:	f88d 5018 	strb.w	r5, [sp, #24]
	ADC_CommonInit(ADC1, &ADC_CommonInitStructure);
 8000d94:	f000 fb7a 	bl	800148c <ADC_CommonInit>
	ADC_InitStructure.ADC_ContinuousConvMode = ADC_ContinuousConvMode_Enable;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	ADC_Init(ADC1, &ADC_InitStructure);
 8000d9c:	a907      	add	r1, sp, #28
 8000d9e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000da2:	e9cd 3407 	strd	r3, r4, [sp, #28]
	ADC_InitStructure.ADC_ExternalTrigEventEdge =
 8000da6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
	ADC_InitStructure.ADC_OverrunMode = ADC_OverrunMode_Disable;
 8000daa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
	ADC_InitStructure.ADC_AutoInjMode = ADC_AutoInjec_Disable;
 8000dae:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_InitStructure.ADC_NbrOfRegChannel = 2;
 8000db0:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
	ADC_Init(ADC1, &ADC_InitStructure);
 8000db4:	f000 fb40 	bl	8001438 <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 1,
 8000db8:	2307      	movs	r3, #7
 8000dba:	2201      	movs	r2, #1
 8000dbc:	210b      	movs	r1, #11
 8000dbe:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dc2:	f000 fbc1 	bl	8001548 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_12, 2,
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	462a      	mov	r2, r5
 8000dca:	210c      	movs	r1, #12
 8000dcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dd0:	f000 fbba 	bl	8001548 <ADC_RegularChannelConfig>
	ADC_DMAConfig(ADC1, ADC_DMAMode_Circular);
 8000dd4:	4629      	mov	r1, r5
 8000dd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dda:	f000 fc22 	bl	8001622 <ADC_DMAConfig>
	DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 8000dde:	2201      	movs	r2, #1
 8000de0:	481d      	ldr	r0, [pc, #116]	; (8000e58 <setup+0x1a8>)
 8000de2:	4629      	mov	r1, r5
 8000de4:	f000 fc9e 	bl	8001724 <DMA_ITConfig>
	DMA_Cmd(DMA1_Channel1, ENABLE);
 8000de8:	481b      	ldr	r0, [pc, #108]	; (8000e58 <setup+0x1a8>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	f000 fc8f 	bl	800170e <DMA_Cmd>
	ADC_DMACmd(ADC1, ENABLE);
 8000df0:	2101      	movs	r1, #1
 8000df2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000df6:	f000 fc0b 	bl	8001610 <ADC_DMACmd>
	ADC_Cmd(ADC1, ENABLE);
 8000dfa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000dfe:	2101      	movs	r1, #1
 8000e00:	f000 fb79 	bl	80014f6 <ADC_Cmd>
	ADC_GetConversionValue(ADC1);
 8000e04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e08:	f000 fbff 	bl	800160a <ADC_GetConversionValue>
	while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_RDY))
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e12:	f000 fc0e 	bl	8001632 <ADC_GetFlagStatus>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d0f8      	beq.n	8000e0c <setup+0x15c>
	ADC_StartConversion(ADC1);
 8000e1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8000e1e:	f000 fbef 	bl	8001600 <ADC_StartConversion>
	ADC_Config();
	NVIC_Config();
 8000e22:	f7ff fe5d 	bl	8000ae0 <NVIC_Config>
	SysTick_Config(SystemCoreClock / 100000);
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <setup+0x1b4>)
 8000e28:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <setup+0x1b8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	fbb3 f3f2 	udiv	r3, r3, r2
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000e30:	3b01      	subs	r3, #1
 8000e32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e36:	d209      	bcs.n	8000e4c <setup+0x19c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000e38:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <setup+0x1bc>)
 8000e3a:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <setup+0x1c0>)
 8000e3e:	21f0      	movs	r1, #240	; 0xf0
 8000e40:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000e44:	2300      	movs	r3, #0
 8000e46:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e48:	2307      	movs	r3, #7
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	b01b      	add	sp, #108	; 0x6c
 8000e4e:	bd30      	pop	{r4, r5, pc}
 8000e50:	20000096 	.word	0x20000096
 8000e54:	50000040 	.word	0x50000040
 8000e58:	40020008 	.word	0x40020008
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	200000ae 	.word	0x200000ae
 8000e64:	20000004 	.word	0x20000004
 8000e68:	000186a0 	.word	0x000186a0
 8000e6c:	e000e010 	.word	0xe000e010
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <main>:

int main(void) {
 8000e74:	b508      	push	{r3, lr}
	setup();
 8000e76:	f7ff ff1b 	bl	8000cb0 <setup>
}
 8000e7a:	e7fe      	b.n	8000e7a <main+0x6>

08000e7c <DMA1_Channel1_IRQHandler>:
		}
	}

}

void DMA1_Channel1_IRQHandler(void) {
 8000e7c:	b508      	push	{r3, lr}
	/* Test on DMA1 Channel1 Transfer Complete interrupt */
	if (DMA_GetITStatus(DMA1_IT_TC1)) {
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f000 fc70 	bl	8001764 <DMA_GetITStatus>
 8000e84:	b120      	cbz	r0, 8000e90 <DMA1_Channel1_IRQHandler+0x14>
		/* Clear DMA1 Channel1 Transfer Complete pending bit */
		DMA_ClearITPendingBit(DMA1_IT_TC1);
	}
}
 8000e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		DMA_ClearITPendingBit(DMA1_IT_TC1);
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f000 bc6c 	b.w	8001768 <DMA_ClearITPendingBit>
}
 8000e90:	bd08      	pop	{r3, pc}
	...

08000e94 <step_increment>:

void step_increment() {
	//DAC_SetChannel1Data(DAC2, DAC_Align_12b_R, 4095);

	//increment all the steps
	seq_index++;
 8000e94:	4a4f      	ldr	r2, [pc, #316]	; (8000fd4 <step_increment+0x140>)
	seq_a_index++;
	seq_b_index++;
	seq_a_count++;
 8000e96:	4850      	ldr	r0, [pc, #320]	; (8000fd8 <step_increment+0x144>)
	seq_b_count++;
 8000e98:	4950      	ldr	r1, [pc, #320]	; (8000fdc <step_increment+0x148>)
void step_increment() {
 8000e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	seq_index++;
 8000e9c:	8813      	ldrh	r3, [r2, #0]
	seq_a_index++;
 8000e9e:	4c50      	ldr	r4, [pc, #320]	; (8000fe0 <step_increment+0x14c>)
	seq_index++;
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	8013      	strh	r3, [r2, #0]
	seq_a_index++;
 8000ea6:	8823      	ldrh	r3, [r4, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	8023      	strh	r3, [r4, #0]
	seq_b_index++;
 8000eae:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <step_increment+0x150>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	3201      	adds	r2, #1
 8000eb4:	b292      	uxth	r2, r2
 8000eb6:	801a      	strh	r2, [r3, #0]
	seq_a_count++;
 8000eb8:	8802      	ldrh	r2, [r0, #0]
 8000eba:	3201      	adds	r2, #1
 8000ebc:	b292      	uxth	r2, r2
 8000ebe:	8002      	strh	r2, [r0, #0]
	seq_b_count++;
 8000ec0:	880a      	ldrh	r2, [r1, #0]
 8000ec2:	3201      	adds	r2, #1
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	800a      	strh	r2, [r1, #0]

	seq_a_index &= NUM_STEPS - 1;
 8000ec8:	8822      	ldrh	r2, [r4, #0]
 8000eca:	f002 020f 	and.w	r2, r2, #15
 8000ece:	8022      	strh	r2, [r4, #0]
	seq_b_index &= NUM_STEPS - 1;
 8000ed0:	881a      	ldrh	r2, [r3, #0]
 8000ed2:	f002 020f 	and.w	r2, r2, #15
 8000ed6:	801a      	strh	r2, [r3, #0]

	if (seq_a_length >= NUM_STEPS) {
 8000ed8:	4a43      	ldr	r2, [pc, #268]	; (8000fe8 <step_increment+0x154>)
 8000eda:	8815      	ldrh	r5, [r2, #0]
 8000edc:	b2ad      	uxth	r5, r5
 8000ede:	2d0f      	cmp	r5, #15
 8000ee0:	461d      	mov	r5, r3
		seq_a_length = NUM_STEPS;
 8000ee2:	bf84      	itt	hi
 8000ee4:	2310      	movhi	r3, #16
 8000ee6:	8013      	strhhi	r3, [r2, #0]
	}
	if (seq_b_length >= NUM_STEPS) {
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <step_increment+0x158>)
 8000eea:	881e      	ldrh	r6, [r3, #0]
 8000eec:	b2b6      	uxth	r6, r6
 8000eee:	2e0f      	cmp	r6, #15
		seq_b_length = NUM_STEPS;
 8000ef0:	bf84      	itt	hi
 8000ef2:	2610      	movhi	r6, #16
 8000ef4:	801e      	strhhi	r6, [r3, #0]
	}

	//	if steps pressed flag is raised
	if (steps_a_flag == 1) {
 8000ef6:	4e3e      	ldr	r6, [pc, #248]	; (8000ff0 <step_increment+0x15c>)
 8000ef8:	7837      	ldrb	r7, [r6, #0]
 8000efa:	2f01      	cmp	r7, #1
 8000efc:	d145      	bne.n	8000f8a <step_increment+0xf6>
		//increment sequence length
		seq_a_length++;
 8000efe:	8810      	ldrh	r0, [r2, #0]
 8000f00:	3001      	adds	r0, #1
 8000f02:	b280      	uxth	r0, r0
 8000f04:	8010      	strh	r0, [r2, #0]
		if (seq_a_length >= NUM_STEPS) {
 8000f06:	8810      	ldrh	r0, [r2, #0]
 8000f08:	b280      	uxth	r0, r0
 8000f0a:	280f      	cmp	r0, #15
 8000f0c:	d901      	bls.n	8000f12 <step_increment+0x7e>
			seq_a_length = NUM_STEPS;
 8000f0e:	2010      	movs	r0, #16
 8000f10:	8010      	strh	r0, [r2, #0]
			seq_a_count = 0;
		}
	}

	//	if steps pressed flag is raised
	if (steps_b_flag == 1) {
 8000f12:	4838      	ldr	r0, [pc, #224]	; (8000ff4 <step_increment+0x160>)
 8000f14:	7802      	ldrb	r2, [r0, #0]
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d14a      	bne.n	8000fb0 <step_increment+0x11c>
		//increment sequence length
		seq_b_length++;
 8000f1a:	881a      	ldrh	r2, [r3, #0]
 8000f1c:	3201      	adds	r2, #1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	801a      	strh	r2, [r3, #0]
		if (seq_b_length >= NUM_STEPS) {
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	b292      	uxth	r2, r2
 8000f26:	2a0f      	cmp	r2, #15
 8000f28:	d901      	bls.n	8000f2e <step_increment+0x9a>
			seq_b_length = NUM_STEPS;
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	801a      	strh	r2, [r3, #0]
			seq_b_index = seq_b_start;
			seq_b_count = 0;
		}
	}

	if (steps_a_flag == 0) {
 8000f2e:	7833      	ldrb	r3, [r6, #0]
 8000f30:	4e31      	ldr	r6, [pc, #196]	; (8000ff8 <step_increment+0x164>)
 8000f32:	b94b      	cbnz	r3, 8000f48 <step_increment+0xb4>
		if (left_button_state == 0) {
 8000f34:	4b31      	ldr	r3, [pc, #196]	; (8000ffc <step_increment+0x168>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b933      	cbnz	r3, 8000f48 <step_increment+0xb4>
			seq_a[seq_a_index] = DC_pot_val;
 8000f3a:	4a31      	ldr	r2, [pc, #196]	; (8001000 <step_increment+0x16c>)
 8000f3c:	8823      	ldrh	r3, [r4, #0]
 8000f3e:	8812      	ldrh	r2, [r2, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	b292      	uxth	r2, r2
 8000f44:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
		}
	}

	if (steps_b_flag == 0) {
 8000f48:	7803      	ldrb	r3, [r0, #0]
 8000f4a:	492e      	ldr	r1, [pc, #184]	; (8001004 <step_increment+0x170>)
 8000f4c:	b94b      	cbnz	r3, 8000f62 <step_increment+0xce>
		if (right_button_state == 0) {
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <step_increment+0x174>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b933      	cbnz	r3, 8000f62 <step_increment+0xce>
			seq_b[seq_b_index] = DC_pot_val;
 8000f54:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <step_increment+0x16c>)
 8000f56:	882b      	ldrh	r3, [r5, #0]
 8000f58:	8812      	ldrh	r2, [r2, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			//seq_c[seq_index] = DC_pot_val;
		}
	}

	DAC_SetChannel1Data(DAC1, DAC_Align_12b_R, seq_b[seq_b_index]);
 8000f62:	882b      	ldrh	r3, [r5, #0]
 8000f64:	4829      	ldr	r0, [pc, #164]	; (800100c <step_increment+0x178>)
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	f000 fb8a 	bl	8001688 <DAC_SetChannel1Data>
	DAC_SetChannel2Data(DAC1, DAC_Align_12b_R, seq_a[seq_a_index]);
 8000f74:	8823      	ldrh	r3, [r4, #0]
 8000f76:	4825      	ldr	r0, [pc, #148]	; (800100c <step_increment+0x178>)
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
}
 8000f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	DAC_SetChannel2Data(DAC1, DAC_Align_12b_R, seq_a[seq_a_index]);
 8000f84:	b292      	uxth	r2, r2
 8000f86:	f000 bb8b 	b.w	80016a0 <DAC_SetChannel2Data>
	} else if (seq_a_count >= seq_a_length) {
 8000f8a:	f8b0 c000 	ldrh.w	ip, [r0]
 8000f8e:	8817      	ldrh	r7, [r2, #0]
 8000f90:	fa1f fc8c 	uxth.w	ip, ip
 8000f94:	b2bf      	uxth	r7, r7
 8000f96:	45bc      	cmp	ip, r7
 8000f98:	d3bb      	bcc.n	8000f12 <step_increment+0x7e>
		if (seq_a_length != NUM_STEPS) {
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	2a10      	cmp	r2, #16
 8000fa0:	d0b7      	beq.n	8000f12 <step_increment+0x7e>
			seq_a_index = seq_a_start;
 8000fa2:	4a1b      	ldr	r2, [pc, #108]	; (8001010 <step_increment+0x17c>)
 8000fa4:	8812      	ldrh	r2, [r2, #0]
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	8022      	strh	r2, [r4, #0]
			seq_a_count = 0;
 8000faa:	2200      	movs	r2, #0
 8000fac:	8002      	strh	r2, [r0, #0]
 8000fae:	e7b0      	b.n	8000f12 <step_increment+0x7e>
	} else if (seq_b_count >= seq_b_length) {
 8000fb0:	880f      	ldrh	r7, [r1, #0]
 8000fb2:	881a      	ldrh	r2, [r3, #0]
 8000fb4:	b2bf      	uxth	r7, r7
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	4297      	cmp	r7, r2
 8000fba:	d3b8      	bcc.n	8000f2e <step_increment+0x9a>
		if (seq_b_length != NUM_STEPS) {
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	2b10      	cmp	r3, #16
 8000fc2:	d0b4      	beq.n	8000f2e <step_increment+0x9a>
			seq_b_index = seq_b_start;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <step_increment+0x180>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	802b      	strh	r3, [r5, #0]
			seq_b_count = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	800b      	strh	r3, [r1, #0]
 8000fd0:	e7ad      	b.n	8000f2e <step_increment+0x9a>
 8000fd2:	bf00      	nop
 8000fd4:	200000ac 	.word	0x200000ac
 8000fd8:	2000030a 	.word	0x2000030a
 8000fdc:	20000312 	.word	0x20000312
 8000fe0:	2000009e 	.word	0x2000009e
 8000fe4:	20000300 	.word	0x20000300
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000002 	.word	0x20000002
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	2000008d 	.word	0x2000008d
 8000ff8:	200000b6 	.word	0x200000b6
 8000ffc:	200000d6 	.word	0x200000d6
 8001000:	2000030c 	.word	0x2000030c
 8001004:	200002da 	.word	0x200002da
 8001008:	200000a0 	.word	0x200000a0
 800100c:	40007400 	.word	0x40007400
 8001010:	200000aa 	.word	0x200000aa
 8001014:	20000314 	.word	0x20000314

08001018 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void) {
 8001018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 800101c:	48a4      	ldr	r0, [pc, #656]	; (80012b0 <TIM3_IRQHandler+0x298>)
 800101e:	2101      	movs	r1, #1
 8001020:	f000 fcc8 	bl	80019b4 <TIM_GetITStatus>
 8001024:	2800      	cmp	r0, #0
 8001026:	f000 8102 	beq.w	800122e <TIM3_IRQHandler+0x216>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 800102a:	48a1      	ldr	r0, [pc, #644]	; (80012b0 <TIM3_IRQHandler+0x298>)
		left_button_state = GPIO_ReadInputDataBit(GPIOB, LEFT_BUTTON);
 800102c:	4da1      	ldr	r5, [pc, #644]	; (80012b4 <TIM3_IRQHandler+0x29c>)
		right_button_state = GPIO_ReadInputDataBit(GPIOA, RIGHT_BUTTON);
 800102e:	4ca2      	ldr	r4, [pc, #648]	; (80012b8 <TIM3_IRQHandler+0x2a0>)
		steps_button_state = GPIO_ReadInputDataBit(GPIOA, STEPS_BUTTON);
 8001030:	4ea2      	ldr	r6, [pc, #648]	; (80012bc <TIM3_IRQHandler+0x2a4>)
		clk_in_state = GPIO_ReadInputDataBit(GPIOB, CLOCK_IN);
 8001032:	4fa3      	ldr	r7, [pc, #652]	; (80012c0 <TIM3_IRQHandler+0x2a8>)
 8001034:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 8001324 <TIM3_IRQHandler+0x30c>
		TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8001038:	2101      	movs	r1, #1
 800103a:	f000 fcc5 	bl	80019c8 <TIM_ClearITPendingBit>
		left_button_state = GPIO_ReadInputDataBit(GPIOB, LEFT_BUTTON);
 800103e:	2110      	movs	r1, #16
 8001040:	48a0      	ldr	r0, [pc, #640]	; (80012c4 <TIM3_IRQHandler+0x2ac>)
 8001042:	f000 fbdc 	bl	80017fe <GPIO_ReadInputDataBit>
		right_button_state = GPIO_ReadInputDataBit(GPIOA, RIGHT_BUTTON);
 8001046:	2102      	movs	r1, #2
		left_button_state = GPIO_ReadInputDataBit(GPIOB, LEFT_BUTTON);
 8001048:	7028      	strb	r0, [r5, #0]
		right_button_state = GPIO_ReadInputDataBit(GPIOA, RIGHT_BUTTON);
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f000 fbd6 	bl	80017fe <GPIO_ReadInputDataBit>
		steps_button_state = GPIO_ReadInputDataBit(GPIOA, STEPS_BUTTON);
 8001052:	2104      	movs	r1, #4
		right_button_state = GPIO_ReadInputDataBit(GPIOA, RIGHT_BUTTON);
 8001054:	7020      	strb	r0, [r4, #0]
		steps_button_state = GPIO_ReadInputDataBit(GPIOA, STEPS_BUTTON);
 8001056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105a:	f000 fbd0 	bl	80017fe <GPIO_ReadInputDataBit>
		clk_in_state = GPIO_ReadInputDataBit(GPIOB, CLOCK_IN);
 800105e:	2180      	movs	r1, #128	; 0x80
		steps_button_state = GPIO_ReadInputDataBit(GPIOA, STEPS_BUTTON);
 8001060:	7030      	strb	r0, [r6, #0]
		clk_in_state = GPIO_ReadInputDataBit(GPIOB, CLOCK_IN);
 8001062:	4898      	ldr	r0, [pc, #608]	; (80012c4 <TIM3_IRQHandler+0x2ac>)
 8001064:	f000 fbcb 	bl	80017fe <GPIO_ReadInputDataBit>
		rate_pot_val += (ADC[1] - rate_pot_val) * 0.02f;
 8001068:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 8001328 <TIM3_IRQHandler+0x310>
 800106c:	4996      	ldr	r1, [pc, #600]	; (80012c8 <TIM3_IRQHandler+0x2b0>)
		clk_in_state = GPIO_ReadInputDataBit(GPIOB, CLOCK_IN);
 800106e:	7038      	strb	r0, [r7, #0]
		rate_pot_val += (ADC[1] - rate_pot_val) * 0.02f;
 8001070:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8001074:	8808      	ldrh	r0, [r1, #0]
 8001076:	880b      	ldrh	r3, [r1, #0]
 8001078:	eddf 6a94 	vldr	s13, [pc, #592]	; 80012cc <TIM3_IRQHandler+0x2b4>
 800107c:	b280      	uxth	r0, r0
 800107e:	b292      	uxth	r2, r2
 8001080:	1a12      	subs	r2, r2, r0
 8001082:	b29b      	uxth	r3, r3
 8001084:	ee07 3a90 	vmov	s15, r3
 8001088:	ee07 2a10 	vmov	s14, r2
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		DC_pot_val += (ADC[0] - DC_pot_val) * 0.02f;
 8001094:	488e      	ldr	r0, [pc, #568]	; (80012d0 <TIM3_IRQHandler+0x2b8>)
		rate_pot_val += (ADC[1] - rate_pot_val) * 0.02f;
 8001096:	eee7 7a26 	vfma.f32	s15, s14, s13
 800109a:	46a0      	mov	r8, r4
 800109c:	46b2      	mov	sl, r6
 800109e:	4c8d      	ldr	r4, [pc, #564]	; (80012d4 <TIM3_IRQHandler+0x2bc>)
 80010a0:	4e8d      	ldr	r6, [pc, #564]	; (80012d8 <TIM3_IRQHandler+0x2c0>)
 80010a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a6:	46a9      	mov	r9, r5
 80010a8:	ee17 3a90 	vmov	r3, s15
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	800b      	strh	r3, [r1, #0]
		DC_pot_val += (ADC[0] - DC_pot_val) * 0.02f;
 80010b0:	f8bc 2000 	ldrh.w	r2, [ip]
 80010b4:	f8b0 c000 	ldrh.w	ip, [r0]
 80010b8:	8803      	ldrh	r3, [r0, #0]
 80010ba:	b292      	uxth	r2, r2
 80010bc:	fa1f fc8c 	uxth.w	ip, ip
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	eba2 020c 	sub.w	r2, r2, ip
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	ee07 2a10 	vmov	s14, r2
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010d6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80010da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	8003      	strh	r3, [r0, #0]
		if (clk_in_state == 0) {
 80010e6:	783b      	ldrb	r3, [r7, #0]
 80010e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 80a0 	bne.w	8001232 <TIM3_IRQHandler+0x21a>
			if (last_clk_in_state == 1) {
 80010f2:	f89b 3000 	ldrb.w	r3, [fp]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d105      	bne.n	8001106 <TIM3_IRQHandler+0xee>
				seq_phase_accumulator = 0;
 80010fa:	6032      	str	r2, [r6, #0]
				step_increment();
 80010fc:	f7ff feca 	bl	8000e94 <step_increment>
				delayed_clk = 2;
 8001100:	2302      	movs	r3, #2
 8001102:	4971      	ldr	r1, [pc, #452]	; (80012c8 <TIM3_IRQHandler+0x2b0>)
 8001104:	7023      	strb	r3, [r4, #0]
		if (steps_button_state == 0) {
 8001106:	f89a 2000 	ldrb.w	r2, [sl]
 800110a:	4b74      	ldr	r3, [pc, #464]	; (80012dc <TIM3_IRQHandler+0x2c4>)
 800110c:	2a00      	cmp	r2, #0
 800110e:	f040 80b7 	bne.w	8001280 <TIM3_IRQHandler+0x268>
			if (left_button_state == 0) {
 8001112:	f899 5000 	ldrb.w	r5, [r9]
 8001116:	4a72      	ldr	r2, [pc, #456]	; (80012e0 <TIM3_IRQHandler+0x2c8>)
 8001118:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800111c:	2d00      	cmp	r5, #0
 800111e:	f040 8092 	bne.w	8001246 <TIM3_IRQHandler+0x22e>
				if (last_left_button_state == 1) {
 8001122:	7815      	ldrb	r5, [r2, #0]
 8001124:	2d01      	cmp	r5, #1
 8001126:	b2ea      	uxtb	r2, r5
 8001128:	f040 808b 	bne.w	8001242 <TIM3_IRQHandler+0x22a>
					steps_a_flag = 1;
 800112c:	4d6d      	ldr	r5, [pc, #436]	; (80012e4 <TIM3_IRQHandler+0x2cc>)
 800112e:	702a      	strb	r2, [r5, #0]
					seq_a_length = 1;
 8001130:	4d6d      	ldr	r5, [pc, #436]	; (80012e8 <TIM3_IRQHandler+0x2d0>)
 8001132:	802a      	strh	r2, [r5, #0]
					seq_a_start = seq_a_index;
 8001134:	4a6d      	ldr	r2, [pc, #436]	; (80012ec <TIM3_IRQHandler+0x2d4>)
 8001136:	4d6e      	ldr	r5, [pc, #440]	; (80012f0 <TIM3_IRQHandler+0x2d8>)
 8001138:	8812      	ldrh	r2, [r2, #0]
 800113a:	b292      	uxth	r2, r2
 800113c:	802a      	strh	r2, [r5, #0]
					seq_a_count = 0;
 800113e:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <TIM3_IRQHandler+0x2dc>)
 8001140:	8010      	strh	r0, [r2, #0]
			if (right_button_state == 0) {
 8001142:	f898 5000 	ldrb.w	r5, [r8]
 8001146:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <TIM3_IRQHandler+0x2e0>)
 8001148:	f005 00ff 	and.w	r0, r5, #255	; 0xff
 800114c:	2d00      	cmp	r5, #0
 800114e:	f040 808a 	bne.w	8001266 <TIM3_IRQHandler+0x24e>
				if (last_right_button_state == 1) {
 8001152:	7815      	ldrb	r5, [r2, #0]
 8001154:	2d01      	cmp	r5, #1
 8001156:	b2ea      	uxtb	r2, r5
 8001158:	f040 8083 	bne.w	8001262 <TIM3_IRQHandler+0x24a>
					steps_b_flag = 1;
 800115c:	4b67      	ldr	r3, [pc, #412]	; (80012fc <TIM3_IRQHandler+0x2e4>)
 800115e:	701a      	strb	r2, [r3, #0]
					seq_b_length = 1;
 8001160:	4b67      	ldr	r3, [pc, #412]	; (8001300 <TIM3_IRQHandler+0x2e8>)
 8001162:	801a      	strh	r2, [r3, #0]
					seq_b_start = seq_b_index;
 8001164:	4b67      	ldr	r3, [pc, #412]	; (8001304 <TIM3_IRQHandler+0x2ec>)
 8001166:	4a68      	ldr	r2, [pc, #416]	; (8001308 <TIM3_IRQHandler+0x2f0>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	8013      	strh	r3, [r2, #0]
					seq_b_count = 0;
 800116e:	4b67      	ldr	r3, [pc, #412]	; (800130c <TIM3_IRQHandler+0x2f4>)
 8001170:	8018      	strh	r0, [r3, #0]
		clk_out = (seq_phase_accumulator >> (32 - CLOCK_SHIFT)) & 1;
 8001172:	6833      	ldr	r3, [r6, #0]
 8001174:	4d66      	ldr	r5, [pc, #408]	; (8001310 <TIM3_IRQHandler+0x2f8>)
 8001176:	f3c3 63c0 	ubfx	r3, r3, #27, #1
 800117a:	702b      	strb	r3, [r5, #0]
		seq_phase_increment = pow(rate_pot_val, EXPONENT) + RATE_OFFSET;
 800117c:	8808      	ldrh	r0, [r1, #0]
 800117e:	b280      	uxth	r0, r0
 8001180:	f7ff f964 	bl	800044c <__aeabi_ui2d>
 8001184:	ed9f 1b48 	vldr	d1, [pc, #288]	; 80012a8 <TIM3_IRQHandler+0x290>
 8001188:	ec41 0b10 	vmov	d0, r0, r1
 800118c:	f000 fc4a 	bl	8001a24 <pow>
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <TIM3_IRQHandler+0x2fc>)
 8001192:	2200      	movs	r2, #0
 8001194:	ec51 0b10 	vmov	r0, r1, d0
 8001198:	f7ff f81c 	bl	80001d4 <__adddf3>
 800119c:	f7ff fc80 	bl	8000aa0 <__aeabi_d2uiz>
 80011a0:	4b5d      	ldr	r3, [pc, #372]	; (8001318 <TIM3_IRQHandler+0x300>)
 80011a2:	6018      	str	r0, [r3, #0]
		seq_phase_accumulator += seq_phase_increment * RATE_MULTIPLIER;
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	6833      	ldr	r3, [r6, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	6033      	str	r3, [r6, #0]
		if (clk_out == 0) {
 80011ac:	782b      	ldrb	r3, [r5, #0]
 80011ae:	4e5b      	ldr	r6, [pc, #364]	; (800131c <TIM3_IRQHandler+0x304>)
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d173      	bne.n	800129c <TIM3_IRQHandler+0x284>
			if (last_clk_out == 1) {
 80011b4:	7833      	ldrb	r3, [r6, #0]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d103      	bne.n	80011c2 <TIM3_IRQHandler+0x1aa>
				step_increment();
 80011ba:	f7ff fe6b 	bl	8000e94 <step_increment>
				delayed_clk = 2;
 80011be:	2302      	movs	r3, #2
				delayed_clk = -2;
 80011c0:	7023      	strb	r3, [r4, #0]
		last_clk_in_state = clk_in_state;
 80011c2:	783b      	ldrb	r3, [r7, #0]
		last_steps_button_state = steps_button_state;
 80011c4:	4a45      	ldr	r2, [pc, #276]	; (80012dc <TIM3_IRQHandler+0x2c4>)
		last_clk_in_state = clk_in_state;
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f88b 3000 	strb.w	r3, [fp]
		last_clk_out = clk_out;
 80011cc:	782b      	ldrb	r3, [r5, #0]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	7033      	strb	r3, [r6, #0]
		last_steps_button_state = steps_button_state;
 80011d2:	f89a 3000 	ldrb.w	r3, [sl]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	7013      	strb	r3, [r2, #0]
		last_left_button_state = left_button_state;
 80011da:	f899 3000 	ldrb.w	r3, [r9]
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <TIM3_IRQHandler+0x2c8>)
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	7013      	strb	r3, [r2, #0]
		last_right_button_state = right_button_state;
 80011e4:	f898 3000 	ldrb.w	r3, [r8]
 80011e8:	4a43      	ldr	r2, [pc, #268]	; (80012f8 <TIM3_IRQHandler+0x2e0>)
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	7013      	strb	r3, [r2, #0]
		if (delayed_clk > 0) {
 80011ee:	7823      	ldrb	r3, [r4, #0]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	dd0c      	ble.n	8001210 <TIM3_IRQHandler+0x1f8>
			if (delayed_clk == 1) {
 80011f6:	7823      	ldrb	r3, [r4, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d105      	bne.n	8001208 <TIM3_IRQHandler+0x1f0>
				DAC_SetChannel1Data(DAC2, DAC_Align_12b_R, 4095);
 80011fc:	4848      	ldr	r0, [pc, #288]	; (8001320 <TIM3_IRQHandler+0x308>)
 80011fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001202:	2100      	movs	r1, #0
 8001204:	f000 fa40 	bl	8001688 <DAC_SetChannel1Data>
			delayed_clk--;
 8001208:	7823      	ldrb	r3, [r4, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	b25b      	sxtb	r3, r3
 800120e:	7023      	strb	r3, [r4, #0]
		if (delayed_clk < 0) {
 8001210:	7823      	ldrb	r3, [r4, #0]
 8001212:	061b      	lsls	r3, r3, #24
 8001214:	d50b      	bpl.n	800122e <TIM3_IRQHandler+0x216>
			if (delayed_clk == -1) {
 8001216:	7823      	ldrb	r3, [r4, #0]
 8001218:	2bff      	cmp	r3, #255	; 0xff
 800121a:	d104      	bne.n	8001226 <TIM3_IRQHandler+0x20e>
				DAC_SetChannel1Data(DAC2, DAC_Align_12b_R, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	4840      	ldr	r0, [pc, #256]	; (8001320 <TIM3_IRQHandler+0x308>)
 8001220:	4611      	mov	r1, r2
 8001222:	f000 fa31 	bl	8001688 <DAC_SetChannel1Data>
			delayed_clk++;
 8001226:	7823      	ldrb	r3, [r4, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b25b      	sxtb	r3, r3
 800122c:	7023      	strb	r3, [r4, #0]
}
 800122e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (last_clk_in_state == 0) {
 8001232:	f89b 3000 	ldrb.w	r3, [fp]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f47f af65 	bne.w	8001106 <TIM3_IRQHandler+0xee>
				delayed_clk = -2;
 800123c:	23fe      	movs	r3, #254	; 0xfe
 800123e:	7023      	strb	r3, [r4, #0]
 8001240:	e761      	b.n	8001106 <TIM3_IRQHandler+0xee>
					if (last_steps_button_state == 0) {
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	e77d      	b.n	8001142 <TIM3_IRQHandler+0x12a>
				if (left_button_state == 1) {
 8001246:	f899 0000 	ldrb.w	r0, [r9]
 800124a:	2801      	cmp	r0, #1
 800124c:	f47f af79 	bne.w	8001142 <TIM3_IRQHandler+0x12a>
					if (last_left_button_state == 0) {
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8001256:	2a00      	cmp	r2, #0
 8001258:	f47f af73 	bne.w	8001142 <TIM3_IRQHandler+0x12a>
						steps_a_flag = 0;
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <TIM3_IRQHandler+0x2cc>)
 800125e:	7010      	strb	r0, [r2, #0]
 8001260:	e76f      	b.n	8001142 <TIM3_IRQHandler+0x12a>
					if (last_steps_button_state == 0) {
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	e785      	b.n	8001172 <TIM3_IRQHandler+0x15a>
				if (right_button_state == 1) {
 8001266:	f898 3000 	ldrb.w	r3, [r8]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d181      	bne.n	8001172 <TIM3_IRQHandler+0x15a>
					if (last_right_button_state == 0) {
 800126e:	7813      	ldrb	r3, [r2, #0]
				if (right_button_state == 0) {
 8001270:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001274:	2b00      	cmp	r3, #0
 8001276:	f47f af7c 	bne.w	8001172 <TIM3_IRQHandler+0x15a>
					steps_b_flag = 0;
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <TIM3_IRQHandler+0x2e4>)
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e778      	b.n	8001172 <TIM3_IRQHandler+0x15a>
			if (last_steps_button_state == 0) {
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	f47f af75 	bne.w	8001172 <TIM3_IRQHandler+0x15a>
				if (left_button_state == 0) {
 8001288:	f899 3000 	ldrb.w	r3, [r9]
 800128c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001290:	b90b      	cbnz	r3, 8001296 <TIM3_IRQHandler+0x27e>
					steps_a_flag = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <TIM3_IRQHandler+0x2cc>)
 8001294:	701a      	strb	r2, [r3, #0]
				if (right_button_state == 0) {
 8001296:	f898 3000 	ldrb.w	r3, [r8]
 800129a:	e7e9      	b.n	8001270 <TIM3_IRQHandler+0x258>
			if (last_clk_out == 0) {
 800129c:	7833      	ldrb	r3, [r6, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d18f      	bne.n	80011c2 <TIM3_IRQHandler+0x1aa>
				delayed_clk = -2;
 80012a2:	23fe      	movs	r3, #254	; 0xfe
 80012a4:	e78c      	b.n	80011c0 <TIM3_IRQHandler+0x1a8>
 80012a6:	bf00      	nop
 80012a8:	66666666 	.word	0x66666666
 80012ac:	3ffe6666 	.word	0x3ffe6666
 80012b0:	40000400 	.word	0x40000400
 80012b4:	200000d6 	.word	0x200000d6
 80012b8:	200000a0 	.word	0x200000a0
 80012bc:	2000009c 	.word	0x2000009c
 80012c0:	2000009a 	.word	0x2000009a
 80012c4:	48000400 	.word	0x48000400
 80012c8:	20000308 	.word	0x20000308
 80012cc:	3ca3d70a 	.word	0x3ca3d70a
 80012d0:	2000030c 	.word	0x2000030c
 80012d4:	20000316 	.word	0x20000316
 80012d8:	200002fc 	.word	0x200002fc
 80012dc:	20000094 	.word	0x20000094
 80012e0:	2000009b 	.word	0x2000009b
 80012e4:	2000008c 	.word	0x2000008c
 80012e8:	20000000 	.word	0x20000000
 80012ec:	2000009e 	.word	0x2000009e
 80012f0:	200000aa 	.word	0x200000aa
 80012f4:	2000030a 	.word	0x2000030a
 80012f8:	200000a8 	.word	0x200000a8
 80012fc:	2000008d 	.word	0x2000008d
 8001300:	20000002 	.word	0x20000002
 8001304:	20000300 	.word	0x20000300
 8001308:	20000314 	.word	0x20000314
 800130c:	20000312 	.word	0x20000312
 8001310:	200000b0 	.word	0x200000b0
 8001314:	40cf4000 	.word	0x40cf4000
 8001318:	20000304 	.word	0x20000304
 800131c:	20000310 	.word	0x20000310
 8001320:	40009800 	.word	0x40009800
 8001324:	20000090 	.word	0x20000090
 8001328:	20000096 	.word	0x20000096

0800132c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <SystemInit+0xac>)
 800132e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001332:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001336:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800133a:	4b28      	ldr	r3, [pc, #160]	; (80013dc <SystemInit+0xb0>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f042 0201 	orr.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <SystemInit+0xb4>)
 8001348:	400a      	ands	r2, r1
 800134a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001352:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001356:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800135e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001366:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136a:	f022 020f 	bic.w	r2, r2, #15
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001370:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <SystemInit+0xb8>)
{
 8001374:	b082      	sub	sp, #8
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001376:	400a      	ands	r2, r1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
	  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9201      	str	r2, [sp, #4]
	  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	#if defined (PLL_SOURCE_HSI)
	  /* At this stage the HSI is already enabled */

	  /* Enable Prefetch Buffer and set Flash Latency */
	  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1;
 8001382:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <SystemInit+0xbc>)
 8001384:	2112      	movs	r1, #18
 8001386:	6011      	str	r1, [r2, #0]

	  /* HCLK = SYSCLK */
	  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	605a      	str	r2, [r3, #4]

	  /* PCLK = HCLK */
	  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2 | (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001392:	605a      	str	r2, [r3, #4]

	  /* PLL configuration */
	  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800139a:	605a      	str	r2, [r3, #4]
	  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	f442 1260 	orr.w	r2, r2, #3670016	; 0x380000
 80013a2:	605a      	str	r2, [r3, #4]

	  /* Enable PLL */
	  RCC->CR |= RCC_CR_PLLON;
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013aa:	601a      	str	r2, [r3, #0]

	  /* Wait till PLL is ready */
	  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	0192      	lsls	r2, r2, #6
 80013b0:	d5fc      	bpl.n	80013ac <SystemInit+0x80>
	  {
	  }

	  /* Select PLL as system clock source */
	  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	f022 0203 	bic.w	r2, r2, #3
 80013b8:	605a      	str	r2, [r3, #4]
	  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	f042 0202 	orr.w	r2, r2, #2
 80013c0:	605a      	str	r2, [r3, #4]

	  /* Wait till PLL is used as system clock source */
	  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	f002 020c 	and.w	r2, r2, #12
 80013c8:	2a08      	cmp	r2, #8
 80013ca:	d1fa      	bne.n	80013c2 <SystemInit+0x96>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <SystemInit+0xac>)
 80013ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013d2:	609a      	str	r2, [r3, #8]
}
 80013d4:	b002      	add	sp, #8
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	40021000 	.word	0x40021000
 80013e0:	f87fc00c 	.word	0xf87fc00c
 80013e4:	ff00fccc 	.word	0xff00fccc
 80013e8:	40022000 	.word	0x40022000

080013ec <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 80013f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LoopForever+0x6>)
	ldr	r3, =_edata
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopForever+0xa>)
	adds	r2, r0, r1
 80013fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopForever+0xe>)
	b	LoopFillZerobss
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001406:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001408:	f842 3b04 	str.w	r3, [r2], #4

0800140c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LoopForever+0x12>)
	cmp	r2, r3
 800140e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001412:	f7ff ff8b 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001416:	f000 fae1 	bl	80019dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800141a:	f7ff fd2b 	bl	8000e74 <main>

0800141e <LoopForever>:

LoopForever:
    b LoopForever
 800141e:	e7fe      	b.n	800141e <LoopForever>
	ldr	r3, =_sidata
 8001420:	080029f8 	.word	0x080029f8
	ldr	r0, =_sdata
 8001424:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001428:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 800142c:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001430:	20000318 	.word	0x20000318

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <ADC_Init>:
  assert_param(IS_ADC_AUTOINJECMODE(ADC_InitStruct->ADC_AutoInjMode));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfRegChannel));

  /*---------------------------- ADCx CFGR Configuration -----------------*/
  /* Get the ADCx CFGR value */
  tmpreg1 = ADCx->CFGR;
 8001438:	68c3      	ldr	r3, [r0, #12]
  /* Clear SCAN bit */
  tmpreg1 &= CFGR_CLEAR_Mask; 
 800143a:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <ADC_Init+0x38>)
{
 800143c:	b510      	push	{r4, lr}
  tmpreg1 &= CFGR_CLEAR_Mask; 
 800143e:	401a      	ands	r2, r3
  /* Configure ADCx: scan conversion mode */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 8001440:	e9d1 3400 	ldrd	r3, r4, [r1]
 8001444:	4323      	orrs	r3, r4
  ADC_InitStruct->ADC_Resolution|                 
 8001446:	688c      	ldr	r4, [r1, #8]
 8001448:	4323      	orrs	r3, r4
  ADC_InitStruct->ADC_ExternalTrigConvEvent|         
 800144a:	68cc      	ldr	r4, [r1, #12]
 800144c:	4323      	orrs	r3, r4
  ADC_InitStruct->ADC_ExternalTrigEventEdge|     
 800144e:	690c      	ldr	r4, [r1, #16]
 8001450:	4323      	orrs	r3, r4
  ADC_InitStruct->ADC_DataAlign|                 
 8001452:	694c      	ldr	r4, [r1, #20]
 8001454:	4323      	orrs	r3, r4
  ADC_InitStruct->ADC_OverrunMode|        
 8001456:	698c      	ldr	r4, [r1, #24]
 8001458:	4323      	orrs	r3, r4
  tmpreg1 |= (uint32_t)ADC_InitStruct->ADC_ContinuousConvMode | 
 800145a:	4313      	orrs	r3, r2
  ADC_InitStruct->ADC_AutoInjMode;
  
  /* Write to ADCx CFGR */
  ADCx->CFGR = tmpreg1;
 800145c:	60c3      	str	r3, [r0, #12]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800145e:	6b02      	ldr	r2, [r0, #48]	; 0x30
  /* Clear L bits */
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfRegChannel value */
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8001460:	7f0b      	ldrb	r3, [r1, #28]
  tmpreg1 &= ~(uint32_t)(ADC_SQR1_L);
 8001462:	f022 020f 	bic.w	r2, r2, #15
  tmpreg1 |= (uint32_t) (ADC_InitStruct->ADC_NbrOfRegChannel - 1);
 8001466:	3b01      	subs	r3, #1
 8001468:	4313      	orrs	r3, r2
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1; 
 800146a:	6303      	str	r3, [r0, #48]	; 0x30
   
}  
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	fdffc007 	.word	0xfdffc007

08001474 <ADC_StructInit>:
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
  /* Reset ADC init structure parameters values */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8001474:	2300      	movs	r3, #0
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;                 
 8001476:	e9c0 3300 	strd	r3, r3, [r0]
  ADC_InitStruct->ADC_ExternalTrigConvEvent = ADC_ExternalTrigConvEvent_0;         
  ADC_InitStruct->ADC_ExternalTrigEventEdge = ADC_ExternalTrigEventEdge_None;
 800147a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;                 
  ADC_InitStruct->ADC_OverrunMode = DISABLE;   
 800147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  ADC_InitStruct->ADC_AutoInjMode = DISABLE;  
 8001482:	6183      	str	r3, [r0, #24]
  ADC_InitStruct->ADC_NbrOfRegChannel = 1; 
 8001484:	2301      	movs	r3, #1
 8001486:	7703      	strb	r3, [r0, #28]
}
 8001488:	4770      	bx	lr
	...

0800148c <ADC_CommonInit>:
  assert_param(IS_ADC_CLOCKMODE(ADC_CommonInitStruct->ADC_Clock));
  assert_param(IS_ADC_DMA_MODE(ADC_CommonInitStruct->ADC_DMAMode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_TWOSAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));

  if((ADCx == ADC1) || (ADCx == ADC2))
 800148c:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8001490:	b510      	push	{r4, lr}
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <ADC_CommonInit+0x4c>)
  if((ADCx == ADC1) || (ADCx == ADC2))
 8001494:	d002      	beq.n	800149c <ADC_CommonInit+0x10>
 8001496:	4a11      	ldr	r2, [pc, #68]	; (80014dc <ADC_CommonInit+0x50>)
 8001498:	4290      	cmp	r0, r2
 800149a:	d118      	bne.n	80014ce <ADC_CommonInit+0x42>
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC1_2->CCR;
 800149c:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <ADC_CommonInit+0x54>)
    tmpreg1 &= CCR_CLEAR_MASK;
  }
  else
  {
    /* Get the ADC CCR value */
    tmpreg1 = ADC3_4->CCR;
 800149e:	6894      	ldr	r4, [r2, #8]
  
    /* Clear MULTI, DELAY, DMA and ADCPRE bits */
    tmpreg1 &= CCR_CLEAR_MASK;
 80014a0:	401c      	ands	r4, r3
  /* Set MULTI bits according to ADC_Mode value */
  /* Set CKMODE bits according to ADC_Clock value */
  /* Set MDMA bits according to ADC_DMAAccessMode value */
  /* Set DMACFG bits according to ADC_DMAMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80014a2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80014a6:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_Clock | 
 80014a8:	688a      	ldr	r2, [r1, #8]
 80014aa:	4313      	orrs	r3, r2
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        (uint32_t)(ADC_CommonInitStruct->ADC_DMAMode << 12) |
 80014ac:	68ca      	ldr	r2, [r1, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80014ae:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                        (uint32_t)((uint32_t)ADC_CommonInitStruct->ADC_TwoSamplingDelay << 8));
 80014b2:	7c0a      	ldrb	r2, [r1, #16]

  if((ADCx == ADC1) || (ADCx == ADC2))
 80014b4:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80014b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80014bc:	ea43 0304 	orr.w	r3, r3, r4
  if((ADCx == ADC1) || (ADCx == ADC2))
 80014c0:	d002      	beq.n	80014c8 <ADC_CommonInit+0x3c>
 80014c2:	4a06      	ldr	r2, [pc, #24]	; (80014dc <ADC_CommonInit+0x50>)
 80014c4:	4290      	cmp	r0, r2
 80014c6:	d104      	bne.n	80014d2 <ADC_CommonInit+0x46>
  {                        
    /* Write to ADC CCR */
    ADC1_2->CCR = tmpreg1;
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <ADC_CommonInit+0x54>)
  }
  else
  {
    /* Write to ADC CCR */
    ADC3_4->CCR = tmpreg1;
 80014ca:	6093      	str	r3, [r2, #8]
  }
}
 80014cc:	bd10      	pop	{r4, pc}
    tmpreg1 = ADC3_4->CCR;
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <ADC_CommonInit+0x58>)
 80014d0:	e7e5      	b.n	800149e <ADC_CommonInit+0x12>
    ADC3_4->CCR = tmpreg1;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <ADC_CommonInit+0x58>)
 80014d4:	e7f9      	b.n	80014ca <ADC_CommonInit+0x3e>
 80014d6:	bf00      	nop
 80014d8:	fffc10e0 	.word	0xfffc10e0
 80014dc:	50000100 	.word	0x50000100
 80014e0:	50000300 	.word	0x50000300
 80014e4:	50000700 	.word	0x50000700

080014e8 <ADC_CommonStructInit>:
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80014e8:	2300      	movs	r3, #0

  /* initialize the ADC_Clock member */
  ADC_CommonInitStruct->ADC_Clock = ADC_Clock_AsynClkMode;
 80014ea:	e9c0 3300 	strd	r3, r3, [r0]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;

  /* Initialize the ADC_DMAMode member */
  ADC_CommonInitStruct->ADC_DMAMode = ADC_DMAMode_OneShot;
 80014ee:	e9c0 3302 	strd	r3, r3, [r0, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = 0;
 80014f2:	7403      	strb	r3, [r0, #16]

}
 80014f4:	4770      	bx	lr

080014f6 <ADC_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ADEN bit */
    ADCx->CR |= ADC_CR_ADEN;
 80014f6:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80014f8:	b119      	cbz	r1, 8001502 <ADC_Cmd+0xc>
    ADCx->CR |= ADC_CR_ADEN;
 80014fa:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected ADC peripheral: Set the ADDIS bit */
    ADCx->CR |= ADC_CR_ADDIS;
 80014fe:	6083      	str	r3, [r0, #8]
  }
}
 8001500:	4770      	bx	lr
    ADCx->CR |= ADC_CR_ADDIS;
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	e7fa      	b.n	80014fe <ADC_Cmd+0x8>

08001508 <ADC_StartCalibration>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADCAL bit */
  ADCx->CR |= ADC_CR_ADCAL;
 8001508:	6883      	ldr	r3, [r0, #8]
 800150a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800150e:	6083      	str	r3, [r0, #8]
}
 8001510:	4770      	bx	lr

08001512 <ADC_GetCalibrationValue>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC calibration value */
  return (uint32_t)ADCx->CALFACT;
 8001512:	f8d0 00b4 	ldr.w	r0, [r0, #180]	; 0xb4
}
 8001516:	4770      	bx	lr

08001518 <ADC_SelectCalibrationMode>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CALIBRATION_MODE(ADC_CalibrationMode));
  /* Set or Reset the ADCALDIF bit */
  ADCx->CR &= (~ADC_CR_ADCALDIF);
 8001518:	6882      	ldr	r2, [r0, #8]
 800151a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800151e:	6082      	str	r2, [r0, #8]
  ADCx->CR |= ADC_CalibrationMode;
 8001520:	6883      	ldr	r3, [r0, #8]
 8001522:	4319      	orrs	r1, r3
 8001524:	6081      	str	r1, [r0, #8]

}
 8001526:	4770      	bx	lr

08001528 <ADC_GetCalibrationStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR & ADC_CR_ADCAL) != (uint32_t)RESET)
 8001528:	6880      	ldr	r0, [r0, #8]
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
  }
  /* Return the CAL bit status */
  return  bitstatus;
}
 800152a:	0fc0      	lsrs	r0, r0, #31
 800152c:	4770      	bx	lr

0800152e <ADC_VoltageRegulatorCmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* set the intermediate state before moving the ADC voltage regulator 
  from enable state to disable state or from disable state to enable state */
  ADCx->CR &= ~(ADC_CR_ADVREGEN);
 800152e:	6883      	ldr	r3, [r0, #8]
 8001530:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001534:	6083      	str	r3, [r0, #8]
  
  if (NewState != DISABLE)
  {
    /* Set the ADVREGEN bit 0 */
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 8001536:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 8001538:	b119      	cbz	r1, 8001542 <ADC_VoltageRegulatorCmd+0x14>
    ADCx->CR |= ADC_CR_ADVREGEN_0;
 800153a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
  }
  else
  {
    /* Set the ADVREGEN bit 1 */
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 800153e:	6083      	str	r3, [r0, #8]
  }
}
 8001540:	4770      	bx	lr
    ADCx->CR |=ADC_CR_ADVREGEN_1;
 8001542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001546:	e7fa      	b.n	800153e <ADC_VoltageRegulatorCmd+0x10>

08001548 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* Regular sequence configuration */
  /* For Rank 1 to 4 */
  if (Rank < 5)
 8001548:	2a04      	cmp	r2, #4
{
 800154a:	b530      	push	{r4, r5, lr}
  if (Rank < 5)
 800154c:	d81c      	bhi.n	8001588 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    /* Calculate the mask to clear */
    tmpreg2 = 0x1F << (6 * (Rank ));
 800154e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    tmpreg1 = ADCx->SQR1;
 8001552:	6b04      	ldr	r4, [r0, #48]	; 0x30
    tmpreg2 = 0x1F << (6 * (Rank ));
 8001554:	0052      	lsls	r2, r2, #1
 8001556:	251f      	movs	r5, #31
 8001558:	4095      	lsls	r5, r2
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800155a:	ea24 0405 	bic.w	r4, r4, r5
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank));
 800155e:	fa01 f202 	lsl.w	r2, r1, r2
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8001562:	4322      	orrs	r2, r4
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8001564:	6302      	str	r2, [r0, #48]	; 0x30
    ADCx->SQR4 = tmpreg1;
  }

  /* Channel sampling configuration */
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8001566:	2909      	cmp	r1, #9
 8001568:	d939      	bls.n	80015de <ADC_RegularChannelConfig+0x96>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    /* Calculate the mask to clear */
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 800156a:	390a      	subs	r1, #10
    tmpreg1 = ADCx->SMPR2;
 800156c:	6982      	ldr	r2, [r0, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR2 &= ~tmpreg2;
 800156e:	6982      	ldr	r2, [r0, #24]
    tmpreg2 = ADC_SMPR2_SMP10 << (3 * (ADC_Channel - 10));
 8001570:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001574:	2407      	movs	r4, #7
 8001576:	408c      	lsls	r4, r1
	ADCx->SMPR2 &= ~tmpreg2;
 8001578:	ea22 0204 	bic.w	r2, r2, r4
 800157c:	6182      	str	r2, [r0, #24]
    /* Calculate the mask to set */
	ADCx->SMPR2 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800157e:	6982      	ldr	r2, [r0, #24]
 8001580:	408b      	lsls	r3, r1
 8001582:	4313      	orrs	r3, r2
 8001584:	6183      	str	r3, [r0, #24]
    /* Clear the old channel sample time */
	ADCx->SMPR1 &= ~tmpreg2;
    /* Calculate the mask to set */
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
  }
}
 8001586:	bd30      	pop	{r4, r5, pc}
  else if (Rank < 10)
 8001588:	2a09      	cmp	r2, #9
 800158a:	d80c      	bhi.n	80015a6 <ADC_RegularChannelConfig+0x5e>
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 800158c:	2406      	movs	r4, #6
 800158e:	3a05      	subs	r2, #5
 8001590:	4362      	muls	r2, r4
    tmpreg1 = ADCx->SQR2;
 8001592:	6b45      	ldr	r5, [r0, #52]	; 0x34
    tmpreg2 = ADC_SQR2_SQ5 << (6 * (Rank - 5));
 8001594:	241f      	movs	r4, #31
 8001596:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 8001598:	ea25 0404 	bic.w	r4, r5, r4
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 5));
 800159c:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 80015a0:	4322      	orrs	r2, r4
    ADCx->SQR2 = tmpreg1;
 80015a2:	6342      	str	r2, [r0, #52]	; 0x34
 80015a4:	e7df      	b.n	8001566 <ADC_RegularChannelConfig+0x1e>
  else if (Rank < 15)
 80015a6:	2a0e      	cmp	r2, #14
 80015a8:	f04f 0406 	mov.w	r4, #6
 80015ac:	d80b      	bhi.n	80015c6 <ADC_RegularChannelConfig+0x7e>
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 80015ae:	3a0a      	subs	r2, #10
 80015b0:	4362      	muls	r2, r4
    tmpreg1 = ADCx->SQR3;
 80015b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
    tmpreg2 = ADC_SQR3_SQ10 << (6 * (Rank - 10));
 80015b4:	241f      	movs	r4, #31
 80015b6:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 80015b8:	ea25 0404 	bic.w	r4, r5, r4
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 10));
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 80015c0:	4322      	orrs	r2, r4
    ADCx->SQR3 = tmpreg1;
 80015c2:	6382      	str	r2, [r0, #56]	; 0x38
 80015c4:	e7cf      	b.n	8001566 <ADC_RegularChannelConfig+0x1e>
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 80015c6:	3a0f      	subs	r2, #15
 80015c8:	4362      	muls	r2, r4
    tmpreg1 = ADCx->SQR4;
 80015ca:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
    tmpreg2 = ADC_SQR3_SQ15 << (6 * (Rank - 15));
 80015cc:	241f      	movs	r4, #31
 80015ce:	4094      	lsls	r4, r2
    tmpreg1 &= ~tmpreg2;
 80015d0:	ea25 0404 	bic.w	r4, r5, r4
    tmpreg2 = (uint32_t)(ADC_Channel) << (6 * (Rank - 15));
 80015d4:	fa01 f202 	lsl.w	r2, r1, r2
    tmpreg1 |= tmpreg2;
 80015d8:	4322      	orrs	r2, r4
    ADCx->SQR4 = tmpreg1;
 80015da:	63c2      	str	r2, [r0, #60]	; 0x3c
 80015dc:	e7c3      	b.n	8001566 <ADC_RegularChannelConfig+0x1e>
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 80015de:	3901      	subs	r1, #1
    tmpreg1 = ADCx->SMPR1;
 80015e0:	6942      	ldr	r2, [r0, #20]
	ADCx->SMPR1 &= ~tmpreg2;
 80015e2:	6942      	ldr	r2, [r0, #20]
    tmpreg2 = ADC_SMPR1_SMP1 << (3 * (ADC_Channel - 1));
 80015e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80015e8:	2438      	movs	r4, #56	; 0x38
 80015ea:	408c      	lsls	r4, r1
	ADCx->SMPR1 &= ~tmpreg2;
 80015ec:	ea22 0204 	bic.w	r2, r2, r4
 80015f0:	6142      	str	r2, [r0, #20]
	ADCx->SMPR1 |= (uint32_t)ADC_SampleTime << (3 * (ADC_Channel));
 80015f2:	6942      	ldr	r2, [r0, #20]
 80015f4:	3103      	adds	r1, #3
 80015f6:	fa03 f101 	lsl.w	r1, r3, r1
 80015fa:	4311      	orrs	r1, r2
 80015fc:	6141      	str	r1, [r0, #20]
}
 80015fe:	e7c2      	b.n	8001586 <ADC_RegularChannelConfig+0x3e>

08001600 <ADC_StartConversion>:
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Set the ADSTART bit */
  ADCx->CR |= ADC_CR_ADSTART;
 8001600:	6883      	ldr	r3, [r0, #8]
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6083      	str	r3, [r0, #8]
}
 8001608:	4770      	bx	lr

0800160a <ADC_GetConversionValue>:
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800160a:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800160c:	b280      	uxth	r0, r0
 800160e:	4770      	bx	lr

08001610 <ADC_DMACmd>:
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request */
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8001610:	68c3      	ldr	r3, [r0, #12]
  if (NewState != DISABLE)
 8001612:	b119      	cbz	r1, 800161c <ADC_DMACmd+0xc>
    ADCx->CFGR |= ADC_CFGR_DMAEN;
 8001614:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 8001618:	60c3      	str	r3, [r0, #12]
  }
}
 800161a:	4770      	bx	lr
    ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMAEN;
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	e7fa      	b.n	8001618 <ADC_DMACmd+0x8>

08001622 <ADC_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_ADC_DMA_MODE(ADC_DMAMode));

  /* Set or reset the DMACFG bit */
   ADCx->CFGR &= ~(uint32_t)ADC_CFGR_DMACFG;
 8001622:	68c2      	ldr	r2, [r0, #12]
 8001624:	f022 0202 	bic.w	r2, r2, #2
 8001628:	60c2      	str	r2, [r0, #12]
   ADCx->CFGR |= ADC_DMAMode;
 800162a:	68c3      	ldr	r3, [r0, #12]
 800162c:	4319      	orrs	r1, r3
 800162e:	60c1      	str	r1, [r0, #12]
}
 8001630:	4770      	bx	lr

08001632 <ADC_GetFlagStatus>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->ISR & ADC_FLAG) != (uint32_t)RESET)
 8001632:	6803      	ldr	r3, [r0, #0]
 8001634:	420b      	tst	r3, r1
    /* ADC_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
}
 8001636:	bf14      	ite	ne
 8001638:	2001      	movne	r0, #1
 800163a:	2000      	moveq	r0, #0
 800163c:	4770      	bx	lr

0800163e <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *         contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(DAC_TypeDef* DACx, uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800163e:	b530      	push	{r4, r5, lr}

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DACx->CR;
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001640:	f640 73fe 	movw	r3, #4094	; 0xffe
  tmpreg1 = DACx->CR;
 8001644:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8001646:	408b      	lsls	r3, r1
 8001648:	ea24 0403 	bic.w	r4, r4, r3
  
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx OUTENx bit according to DAC_Buffer_Switch value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800164c:	e9d2 3500 	ldrd	r3, r5, [r2]
 8001650:	432b      	orrs	r3, r5
 8001652:	6895      	ldr	r5, [r2, #8]
 8001654:	68d2      	ldr	r2, [r2, #12]
 8001656:	432b      	orrs	r3, r5
 8001658:	4313      	orrs	r3, r2
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_Buffer_Switch);   
                   
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800165a:	fa03 f101 	lsl.w	r1, r3, r1
 800165e:	4321      	orrs	r1, r4
  /* Write to DAC CR */
  DACx->CR = tmpreg1;
 8001660:	6001      	str	r1, [r0, #0]
}
 8001662:	bd30      	pop	{r4, r5, pc}

08001664 <DAC_StructInit>:
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8001664:	2300      	movs	r3, #0
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8001666:	e9c0 3300 	strd	r3, r3, [r0]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800166a:	6083      	str	r3, [r0, #8]
  /* Initialize the DAC_Buffer_Switch member */
  DAC_InitStruct->DAC_Buffer_Switch = DAC_BufferSwitch_Enable;
 800166c:	2302      	movs	r3, #2
 800166e:	60c3      	str	r3, [r0, #12]
}
 8001670:	4770      	bx	lr

08001672 <DAC_Cmd>:
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001672:	2301      	movs	r3, #1
 8001674:	fa03 f101 	lsl.w	r1, r3, r1
  {
    /* Enable the selected DAC channel */
    DACx->CR |= (DAC_CR_EN1 << DAC_Channel);
 8001678:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 800167a:	b112      	cbz	r2, 8001682 <DAC_Cmd+0x10>
    DACx->CR |= (DAC_CR_EN1 << DAC_Channel);
 800167c:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the selected DAC channel */
    DACx->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800167e:	6001      	str	r1, [r0, #0]
  }
}
 8001680:	4770      	bx	lr
    DACx->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8001682:	ea23 0101 	bic.w	r1, r3, r1
 8001686:	e7fa      	b.n	800167e <DAC_Cmd+0xc>

08001688 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data)
{  
 8001688:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_ALL_PERIPH(DACx));
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DACx; 
 800168e:	9001      	str	r0, [sp, #4]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8001690:	9b01      	ldr	r3, [sp, #4]
 8001692:	3308      	adds	r3, #8
 8001694:	4419      	add	r1, r3
 8001696:	9101      	str	r1, [sp, #4]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001698:	9b01      	ldr	r3, [sp, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	b002      	add	sp, #8
 800169e:	4770      	bx	lr

080016a0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(DAC_TypeDef* DACx, uint32_t DAC_Align, uint16_t Data)
{
 80016a0:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_LIST1_PERIPH(DACx));
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DACx;
 80016a6:	9001      	str	r0, [sp, #4]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80016a8:	9b01      	ldr	r3, [sp, #4]
 80016aa:	3314      	adds	r3, #20
 80016ac:	4419      	add	r1, r3
 80016ae:	9101      	str	r1, [sp, #4]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	b002      	add	sp, #8
 80016b6:	4770      	bx	lr

080016b8 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016b8:	688b      	ldr	r3, [r1, #8]
  tmpreg = DMAy_Channelx->CCR;
 80016ba:	6802      	ldr	r2, [r0, #0]
{
 80016bc:	b510      	push	{r4, lr}
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016be:	6a0c      	ldr	r4, [r1, #32]
 80016c0:	4323      	orrs	r3, r4
 80016c2:	690c      	ldr	r4, [r1, #16]
 80016c4:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80016c6:	694c      	ldr	r4, [r1, #20]
 80016c8:	4323      	orrs	r3, r4
 80016ca:	698c      	ldr	r4, [r1, #24]
 80016cc:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80016ce:	69cc      	ldr	r4, [r1, #28]
 80016d0:	4323      	orrs	r3, r4
 80016d2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80016d4:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80016d6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  tmpreg &= CCR_CLEAR_MASK;
 80016d8:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80016dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80016e0:	4323      	orrs	r3, r4
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80016e2:	4313      	orrs	r3, r2

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80016e4:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration --------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80016e6:	898b      	ldrh	r3, [r1, #12]
 80016e8:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ---------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80016ea:	680b      	ldr	r3, [r1, #0]
 80016ec:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ---------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80016ee:	684b      	ldr	r3, [r1, #4]
 80016f0:	60c3      	str	r3, [r0, #12]
}
 80016f2:	bd10      	pop	{r4, pc}

080016f4 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80016f4:	2300      	movs	r3, #0
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80016f6:	e9c0 3300 	strd	r3, r3, [r0]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80016fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80016fe:	e9c0 3306 	strd	r3, r3, [r0, #24]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8001702:	e9c0 3308 	strd	r3, r3, [r0, #32]
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 8001706:	6083      	str	r3, [r0, #8]
  DMA_InitStruct->DMA_BufferSize = 0;
 8001708:	8183      	strh	r3, [r0, #12]
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 800170a:	6283      	str	r3, [r0, #40]	; 0x28
}
 800170c:	4770      	bx	lr

0800170e <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 800170e:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8001710:	b119      	cbz	r1, 800171a <DMA_Cmd+0xc>
    DMAy_Channelx->CCR |= DMA_CCR_EN;
 8001712:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 8001716:	6003      	str	r3, [r0, #0]
  }
}
 8001718:	4770      	bx	lr
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR_EN);
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	e7f8      	b.n	8001716 <DMA_Cmd+0x8>

08001724 <DMA_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8001724:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8001726:	b112      	cbz	r2, 800172e <DMA_ITConfig+0xa>
    DMAy_Channelx->CCR |= DMA_IT;
 8001728:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800172a:	6001      	str	r1, [r0, #0]
  }
}
 800172c:	4770      	bx	lr
    DMAy_Channelx->CCR &= ~DMA_IT;
 800172e:	ea23 0101 	bic.w	r1, r3, r1
 8001732:	e7fa      	b.n	800172a <DMA_ITConfig+0x6>

08001734 <DMA_GetFlagStatus>:
  
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));

  /* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001734:	00c3      	lsls	r3, r0, #3
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8001736:	bf4c      	ite	mi
 8001738:	4b03      	ldrmi	r3, [pc, #12]	; (8001748 <DMA_GetFlagStatus+0x14>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800173a:	4b04      	ldrpl	r3, [pc, #16]	; (800174c <DMA_GetFlagStatus+0x18>)
 800173c:	681b      	ldr	r3, [r3, #0]
  }

  /* Check the status of the specified DMAy flag */
  if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 800173e:	4203      	tst	r3, r0
    bitstatus = RESET;
  }
  
  /* Return the DMAy_FLAG status */
  return  bitstatus;
}
 8001740:	bf14      	ite	ne
 8001742:	2001      	movne	r0, #1
 8001744:	2000      	moveq	r0, #0
 8001746:	4770      	bx	lr
 8001748:	40020400 	.word	0x40020400
 800174c:	40020000 	.word	0x40020000

08001750 <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));

/* Calculate the used DMAy */
  if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 8001750:	00c3      	lsls	r3, r0, #3
  {
    /* Clear the selected DMAy flags */
    DMA2->IFCR = DMAy_FLAG;
 8001752:	bf4c      	ite	mi
 8001754:	4b01      	ldrmi	r3, [pc, #4]	; (800175c <DMA_ClearFlag+0xc>)
  }
  else
  {
    /* Clear the selected DMAy flags */
    DMA1->IFCR = DMAy_FLAG;
 8001756:	4b02      	ldrpl	r3, [pc, #8]	; (8001760 <DMA_ClearFlag+0x10>)
 8001758:	6058      	str	r0, [r3, #4]
  }
}
 800175a:	4770      	bx	lr
 800175c:	40020400 	.word	0x40020400
 8001760:	40020000 	.word	0x40020000

08001764 <DMA_GetITStatus>:
 8001764:	f7ff bfe6 	b.w	8001734 <DMA_GetFlagStatus>

08001768 <DMA_ClearITPendingBit>:
 8001768:	f7ff bff2 	b.w	8001750 <DMA_ClearFlag>

0800176c <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 800176c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001770:	2200      	movs	r2, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001772:	2601      	movs	r6, #1
 8001774:	2503      	movs	r5, #3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001776:	680b      	ldr	r3, [r1, #0]
    pos = ((uint32_t)0x01) << pinpos;
 8001778:	fa06 fe02 	lsl.w	lr, r6, r2

    if (currentpin == pos)
 800177c:	ea3e 0303 	bics.w	r3, lr, r3
 8001780:	d131      	bne.n	80017e6 <GPIO_Init+0x7a>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001782:	790c      	ldrb	r4, [r1, #4]
 8001784:	0057      	lsls	r7, r2, #1
 8001786:	1e63      	subs	r3, r4, #1
 8001788:	fa05 fc07 	lsl.w	ip, r5, r7
 800178c:	2b01      	cmp	r3, #1
 800178e:	ea6f 0c0c 	mvn.w	ip, ip
 8001792:	d817      	bhi.n	80017c4 <GPIO_Init+0x58>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001794:	6883      	ldr	r3, [r0, #8]
 8001796:	ea03 030c 	and.w	r3, r3, ip
 800179a:	6083      	str	r3, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800179c:	794b      	ldrb	r3, [r1, #5]
 800179e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80017a2:	40bb      	lsls	r3, r7
 80017a4:	ea43 0308 	orr.w	r3, r3, r8
 80017a8:	6083      	str	r3, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 80017aa:	8883      	ldrh	r3, [r0, #4]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	ea23 030e 	bic.w	r3, r3, lr
 80017b2:	8083      	strh	r3, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80017b4:	798b      	ldrb	r3, [r1, #6]
 80017b6:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 80017ba:	4093      	lsls	r3, r2
 80017bc:	ea43 030e 	orr.w	r3, r3, lr
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	8083      	strh	r3, [r0, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80017c4:	6803      	ldr	r3, [r0, #0]
 80017c6:	ea03 030c 	and.w	r3, r3, ip
 80017ca:	6003      	str	r3, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80017cc:	6803      	ldr	r3, [r0, #0]
 80017ce:	40bc      	lsls	r4, r7
 80017d0:	431c      	orrs	r4, r3
 80017d2:	6004      	str	r4, [r0, #0]

      /* Use temporary variable to update PUPDR register configuration, to avoid 
         unexpected transition in the GPIO pin configuration. */
      tmpreg = GPIOx->PUPDR;
 80017d4:	68c3      	ldr	r3, [r0, #12]
      tmpreg &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80017d6:	fa05 f407 	lsl.w	r4, r5, r7
 80017da:	ea23 0404 	bic.w	r4, r3, r4
      tmpreg |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80017de:	79cb      	ldrb	r3, [r1, #7]
 80017e0:	40bb      	lsls	r3, r7
 80017e2:	4323      	orrs	r3, r4
      GPIOx->PUPDR = tmpreg;
 80017e4:	60c3      	str	r3, [r0, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80017e6:	3201      	adds	r2, #1
 80017e8:	2a10      	cmp	r2, #16
 80017ea:	d1c4      	bne.n	8001776 <GPIO_Init+0xa>
    }
  }
}
 80017ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080017f0 <GPIO_StructInit>:
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 80017f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017f8:	e9c0 2300 	strd	r2, r3, [r0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
}
 80017fc:	4770      	bx	lr

080017fe <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80017fe:	8a03      	ldrh	r3, [r0, #16]
 8001800:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 8001802:	bf14      	ite	ne
 8001804:	2001      	movne	r0, #1
 8001806:	2000      	moveq	r0, #0
 8001808:	4770      	bx	lr
	...

0800180c <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <NVIC_PriorityGroupConfig+0x10>)
 800180e:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001812:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001816:	60d8      	str	r0, [r3, #12]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	7801      	ldrb	r1, [r0, #0]
 8001824:	2501      	movs	r5, #1
 8001826:	f001 031f 	and.w	r3, r1, #31
 800182a:	409d      	lsls	r5, r3
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800182c:	78c3      	ldrb	r3, [r0, #3]
 800182e:	094c      	lsrs	r4, r1, #5
 8001830:	b1c3      	cbz	r3, 8001864 <NVIC_Init+0x44>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <NVIC_Init+0x50>)
 8001834:	68da      	ldr	r2, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001836:	7843      	ldrb	r3, [r0, #1]
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001838:	43d2      	mvns	r2, r2
 800183a:	f3c2 2202 	ubfx	r2, r2, #8, #3
    tmppre = (0x4 - tmppriority);
 800183e:	f1c2 0604 	rsb	r6, r2, #4
    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001842:	fa03 f606 	lsl.w	r6, r3, r6
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001846:	7883      	ldrb	r3, [r0, #2]
    tmpsub = tmpsub >> tmppriority;
 8001848:	200f      	movs	r0, #15
 800184a:	fa20 f202 	lsr.w	r2, r0, r2
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800184e:	4013      	ands	r3, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <NVIC_Init+0x54>)
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001852:	4333      	orrs	r3, r6
    tmppriority = tmppriority << 0x04;
 8001854:	011b      	lsls	r3, r3, #4
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001856:	4411      	add	r1, r2
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f881 3300 	strb.w	r3, [r1, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800185e:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <NVIC_Init+0x54>)
 8001866:	3420      	adds	r4, #32
 8001868:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
}
 800186c:	e7f9      	b.n	8001862 <NVIC_Init+0x42>
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	e000e100 	.word	0xe000e100

08001878 <RCC_ADCCLKConfig>:
  assert_param(IS_RCC_ADCCLK(RCC_PLLCLK));

  tmp = (RCC_PLLCLK >> 28);
  
  /* Clears ADCPRE34 bits */
  if (tmp != 0)
 8001878:	0f03      	lsrs	r3, r0, #28
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <RCC_ADCCLKConfig+0x1c>)
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE34;
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	bf14      	ite	ne
 8001880:	f422 5278 	bicne.w	r2, r2, #15872	; 0x3e00
  }
   /* Clears ADCPRE12 bits */
  else
  {
    RCC->CFGR2 &= ~RCC_CFGR2_ADCPRE12;
 8001884:	f422 72f8 	biceq.w	r2, r2, #496	; 0x1f0
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  /* Set ADCPRE bits according to RCC_PLLCLK value */
  RCC->CFGR2 |= RCC_PLLCLK;
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	4310      	orrs	r0, r2
 800188e:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <RCC_AHBPeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <RCC_AHBPeriphClockCmd+0x14>)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800189a:	695a      	ldr	r2, [r3, #20]
  if (NewState != DISABLE)
 800189c:	b111      	cbz	r1, 80018a4 <RCC_AHBPeriphClockCmd+0xc>
    RCC->AHBENR |= RCC_AHBPeriph;
 800189e:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80018a0:	6158      	str	r0, [r3, #20]
  }
}
 80018a2:	4770      	bx	lr
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80018a4:	ea22 0000 	bic.w	r0, r2, r0
 80018a8:	e7fa      	b.n	80018a0 <RCC_AHBPeriphClockCmd+0x8>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <RCC_APB1PeriphClockCmd+0x14>)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80018b2:	69da      	ldr	r2, [r3, #28]
  if (NewState != DISABLE)
 80018b4:	b111      	cbz	r1, 80018bc <RCC_APB1PeriphClockCmd+0xc>
    RCC->APB1ENR |= RCC_APB1Periph;
 80018b6:	4310      	orrs	r0, r2
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018b8:	61d8      	str	r0, [r3, #28]
  }
}
 80018ba:	4770      	bx	lr
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80018bc:	ea22 0000 	bic.w	r0, r2, r0
 80018c0:	e7fa      	b.n	80018b8 <RCC_APB1PeriphClockCmd+0x8>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80018c8:	4a24      	ldr	r2, [pc, #144]	; (800195c <TIM_TimeBaseInit+0x94>)
  tmpcr1 = TIMx->CR1;  
 80018ca:	8803      	ldrh	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80018cc:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;  
 80018ce:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || 
 80018d0:	d012      	beq.n	80018f8 <TIM_TimeBaseInit+0x30>
 80018d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d6:	4290      	cmp	r0, r2
 80018d8:	d00e      	beq.n	80018f8 <TIM_TimeBaseInit+0x30>
 80018da:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018de:	d00b      	beq.n	80018f8 <TIM_TimeBaseInit+0x30>
 80018e0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80018e4:	4290      	cmp	r0, r2
 80018e6:	d007      	beq.n	80018f8 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM3) || (TIMx == TIM4) || (TIMx == TIM20)) 
 80018e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ec:	4290      	cmp	r0, r2
 80018ee:	d003      	beq.n	80018f8 <TIM_TimeBaseInit+0x30>
 80018f0:	f502 32a4 	add.w	r2, r2, #83968	; 0x14800
 80018f4:	4290      	cmp	r0, r2
 80018f6:	d103      	bne.n	8001900 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80018f8:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80018fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80018fe:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001900:	4a17      	ldr	r2, [pc, #92]	; (8001960 <TIM_TimeBaseInit+0x98>)
 8001902:	4290      	cmp	r0, r2
 8001904:	d008      	beq.n	8001918 <TIM_TimeBaseInit+0x50>
 8001906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800190a:	4290      	cmp	r0, r2
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800190c:	bf1f      	itttt	ne
 800190e:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001912:	890a      	ldrhne	r2, [r1, #8]
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001914:	b29b      	uxthne	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001916:	4313      	orrne	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001918:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800191a:	684b      	ldr	r3, [r1, #4]
 800191c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800191e:	880b      	ldrh	r3, [r1, #0]
 8001920:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15) || 
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <TIM_TimeBaseInit+0x94>)
 8001924:	4298      	cmp	r0, r3
 8001926:	d013      	beq.n	8001950 <TIM_TimeBaseInit+0x88>
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	4298      	cmp	r0, r3
 800192e:	d00f      	beq.n	8001950 <TIM_TimeBaseInit+0x88>
 8001930:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001934:	4298      	cmp	r0, r3
 8001936:	d00b      	beq.n	8001950 <TIM_TimeBaseInit+0x88>
 8001938:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800193c:	4298      	cmp	r0, r3
 800193e:	d007      	beq.n	8001950 <TIM_TimeBaseInit+0x88>
      (TIMx == TIM16) || (TIMx == TIM17)|| (TIMx == TIM20))  
 8001940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001944:	4298      	cmp	r0, r3
 8001946:	d003      	beq.n	8001950 <TIM_TimeBaseInit+0x88>
 8001948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800194c:	4298      	cmp	r0, r3
 800194e:	d101      	bne.n	8001954 <TIM_TimeBaseInit+0x8c>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001950:	894b      	ldrh	r3, [r1, #10]
 8001952:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001954:	2301      	movs	r3, #1
 8001956:	6143      	str	r3, [r0, #20]
}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40012c00 	.word	0x40012c00
 8001960:	40001000 	.word	0x40001000

08001964 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8001964:	2300      	movs	r3, #0
 8001966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800196a:	e9c0 3200 	strd	r3, r2, [r0]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800196e:	6083      	str	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
}
 8001970:	4770      	bx	lr

08001972 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001972:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 8001974:	b121      	cbz	r1, 8001980 <TIM_ARRPreloadConfig+0xe>
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001976:	b29b      	uxth	r3, r3
 8001978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800197c:	8003      	strh	r3, [r0, #0]
  }
}
 800197e:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	e7f8      	b.n	800197c <TIM_ARRPreloadConfig+0xa>

0800198a <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800198a:	8803      	ldrh	r3, [r0, #0]
  if (NewState != DISABLE)
 800198c:	b121      	cbz	r1, 8001998 <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
 800198e:	b29b      	uxth	r3, r3
 8001990:	f043 0301 	orr.w	r3, r3, #1
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001994:	8003      	strh	r3, [r0, #0]
  }
}
 8001996:	4770      	bx	lr
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	e7f8      	b.n	8001994 <TIM_Cmd+0xa>

080019a2 <TIM_ITConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80019a2:	68c3      	ldr	r3, [r0, #12]
  if (NewState != DISABLE)
 80019a4:	b112      	cbz	r2, 80019ac <TIM_ITConfig+0xa>
    TIMx->DIER |= TIM_IT;
 80019a6:	4319      	orrs	r1, r3
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80019a8:	60c1      	str	r1, [r0, #12]
  }
}
 80019aa:	4770      	bx	lr
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80019ac:	43c9      	mvns	r1, r1
 80019ae:	b289      	uxth	r1, r1
 80019b0:	4019      	ands	r1, r3
 80019b2:	e7f9      	b.n	80019a8 <TIM_ITConfig+0x6>

080019b4 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80019b4:	6903      	ldr	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80019b6:	68c2      	ldr	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80019b8:	ea11 0003 	ands.w	r0, r1, r3
 80019bc:	d003      	beq.n	80019c6 <TIM_GetITStatus+0x12>
 80019be:	4211      	tst	r1, r2
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
 80019c0:	bf14      	ite	ne
 80019c2:	2001      	movne	r0, #1
 80019c4:	2000      	moveq	r0, #0
  }
  return bitstatus;
}
 80019c6:	4770      	bx	lr

080019c8 <TIM_ClearITPendingBit>:
 80019c8:	43c9      	mvns	r1, r1
 80019ca:	b289      	uxth	r1, r1
 80019cc:	6101      	str	r1, [r0, #16]
 80019ce:	4770      	bx	lr

080019d0 <__errno>:
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <__errno+0x8>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	20000008 	.word	0x20000008

080019dc <__libc_init_array>:
 80019dc:	b570      	push	{r4, r5, r6, lr}
 80019de:	4d0d      	ldr	r5, [pc, #52]	; (8001a14 <__libc_init_array+0x38>)
 80019e0:	4c0d      	ldr	r4, [pc, #52]	; (8001a18 <__libc_init_array+0x3c>)
 80019e2:	1b64      	subs	r4, r4, r5
 80019e4:	10a4      	asrs	r4, r4, #2
 80019e6:	2600      	movs	r6, #0
 80019e8:	42a6      	cmp	r6, r4
 80019ea:	d109      	bne.n	8001a00 <__libc_init_array+0x24>
 80019ec:	4d0b      	ldr	r5, [pc, #44]	; (8001a1c <__libc_init_array+0x40>)
 80019ee:	4c0c      	ldr	r4, [pc, #48]	; (8001a20 <__libc_init_array+0x44>)
 80019f0:	f000 ffcc 	bl	800298c <_init>
 80019f4:	1b64      	subs	r4, r4, r5
 80019f6:	10a4      	asrs	r4, r4, #2
 80019f8:	2600      	movs	r6, #0
 80019fa:	42a6      	cmp	r6, r4
 80019fc:	d105      	bne.n	8001a0a <__libc_init_array+0x2e>
 80019fe:	bd70      	pop	{r4, r5, r6, pc}
 8001a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a04:	4798      	blx	r3
 8001a06:	3601      	adds	r6, #1
 8001a08:	e7ee      	b.n	80019e8 <__libc_init_array+0xc>
 8001a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a0e:	4798      	blx	r3
 8001a10:	3601      	adds	r6, #1
 8001a12:	e7f2      	b.n	80019fa <__libc_init_array+0x1e>
 8001a14:	080029f0 	.word	0x080029f0
 8001a18:	080029f0 	.word	0x080029f0
 8001a1c:	080029f0 	.word	0x080029f0
 8001a20:	080029f4 	.word	0x080029f4

08001a24 <pow>:
 8001a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a28:	ec59 8b10 	vmov	r8, r9, d0
 8001a2c:	ec57 6b11 	vmov	r6, r7, d1
 8001a30:	f000 f8a6 	bl	8001b80 <__ieee754_pow>
 8001a34:	4b4e      	ldr	r3, [pc, #312]	; (8001b70 <pow+0x14c>)
 8001a36:	f993 3000 	ldrsb.w	r3, [r3]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	ec55 4b10 	vmov	r4, r5, d0
 8001a40:	d015      	beq.n	8001a6e <pow+0x4a>
 8001a42:	4632      	mov	r2, r6
 8001a44:	463b      	mov	r3, r7
 8001a46:	4630      	mov	r0, r6
 8001a48:	4639      	mov	r1, r7
 8001a4a:	f7ff f813 	bl	8000a74 <__aeabi_dcmpun>
 8001a4e:	b970      	cbnz	r0, 8001a6e <pow+0x4a>
 8001a50:	4642      	mov	r2, r8
 8001a52:	464b      	mov	r3, r9
 8001a54:	4640      	mov	r0, r8
 8001a56:	4649      	mov	r1, r9
 8001a58:	f7ff f80c 	bl	8000a74 <__aeabi_dcmpun>
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2300      	movs	r3, #0
 8001a60:	b148      	cbz	r0, 8001a76 <pow+0x52>
 8001a62:	4630      	mov	r0, r6
 8001a64:	4639      	mov	r1, r7
 8001a66:	f7fe ffd3 	bl	8000a10 <__aeabi_dcmpeq>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d17d      	bne.n	8001b6a <pow+0x146>
 8001a6e:	ec45 4b10 	vmov	d0, r4, r5
 8001a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a76:	4640      	mov	r0, r8
 8001a78:	4649      	mov	r1, r9
 8001a7a:	f7fe ffc9 	bl	8000a10 <__aeabi_dcmpeq>
 8001a7e:	b1e0      	cbz	r0, 8001aba <pow+0x96>
 8001a80:	2200      	movs	r2, #0
 8001a82:	2300      	movs	r3, #0
 8001a84:	4630      	mov	r0, r6
 8001a86:	4639      	mov	r1, r7
 8001a88:	f7fe ffc2 	bl	8000a10 <__aeabi_dcmpeq>
 8001a8c:	2800      	cmp	r0, #0
 8001a8e:	d16c      	bne.n	8001b6a <pow+0x146>
 8001a90:	ec47 6b10 	vmov	d0, r6, r7
 8001a94:	f000 fe53 	bl	800273e <finite>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d0e8      	beq.n	8001a6e <pow+0x4a>
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	4639      	mov	r1, r7
 8001aa4:	f7fe ffbe 	bl	8000a24 <__aeabi_dcmplt>
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d0e0      	beq.n	8001a6e <pow+0x4a>
 8001aac:	f7ff ff90 	bl	80019d0 <__errno>
 8001ab0:	2321      	movs	r3, #33	; 0x21
 8001ab2:	6003      	str	r3, [r0, #0]
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	4d2f      	ldr	r5, [pc, #188]	; (8001b74 <pow+0x150>)
 8001ab8:	e7d9      	b.n	8001a6e <pow+0x4a>
 8001aba:	ec45 4b10 	vmov	d0, r4, r5
 8001abe:	f000 fe3e 	bl	800273e <finite>
 8001ac2:	bbb8      	cbnz	r0, 8001b34 <pow+0x110>
 8001ac4:	ec49 8b10 	vmov	d0, r8, r9
 8001ac8:	f000 fe39 	bl	800273e <finite>
 8001acc:	b390      	cbz	r0, 8001b34 <pow+0x110>
 8001ace:	ec47 6b10 	vmov	d0, r6, r7
 8001ad2:	f000 fe34 	bl	800273e <finite>
 8001ad6:	b368      	cbz	r0, 8001b34 <pow+0x110>
 8001ad8:	4622      	mov	r2, r4
 8001ada:	462b      	mov	r3, r5
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe ffc8 	bl	8000a74 <__aeabi_dcmpun>
 8001ae4:	b160      	cbz	r0, 8001b00 <pow+0xdc>
 8001ae6:	f7ff ff73 	bl	80019d0 <__errno>
 8001aea:	2321      	movs	r3, #33	; 0x21
 8001aec:	6003      	str	r3, [r0, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2300      	movs	r3, #0
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7fe fe4d 	bl	8000794 <__aeabi_ddiv>
 8001afa:	4604      	mov	r4, r0
 8001afc:	460d      	mov	r5, r1
 8001afe:	e7b6      	b.n	8001a6e <pow+0x4a>
 8001b00:	f7ff ff66 	bl	80019d0 <__errno>
 8001b04:	2322      	movs	r3, #34	; 0x22
 8001b06:	6003      	str	r3, [r0, #0]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	4640      	mov	r0, r8
 8001b0e:	4649      	mov	r1, r9
 8001b10:	f7fe ff88 	bl	8000a24 <__aeabi_dcmplt>
 8001b14:	2400      	movs	r4, #0
 8001b16:	b158      	cbz	r0, 8001b30 <pow+0x10c>
 8001b18:	ec47 6b10 	vmov	d0, r6, r7
 8001b1c:	f000 fe24 	bl	8002768 <rint>
 8001b20:	4632      	mov	r2, r6
 8001b22:	ec51 0b10 	vmov	r0, r1, d0
 8001b26:	463b      	mov	r3, r7
 8001b28:	f7fe ff72 	bl	8000a10 <__aeabi_dcmpeq>
 8001b2c:	2800      	cmp	r0, #0
 8001b2e:	d0c2      	beq.n	8001ab6 <pow+0x92>
 8001b30:	4d11      	ldr	r5, [pc, #68]	; (8001b78 <pow+0x154>)
 8001b32:	e79c      	b.n	8001a6e <pow+0x4a>
 8001b34:	2200      	movs	r2, #0
 8001b36:	2300      	movs	r3, #0
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe ff68 	bl	8000a10 <__aeabi_dcmpeq>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d094      	beq.n	8001a6e <pow+0x4a>
 8001b44:	ec49 8b10 	vmov	d0, r8, r9
 8001b48:	f000 fdf9 	bl	800273e <finite>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d08e      	beq.n	8001a6e <pow+0x4a>
 8001b50:	ec47 6b10 	vmov	d0, r6, r7
 8001b54:	f000 fdf3 	bl	800273e <finite>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	d088      	beq.n	8001a6e <pow+0x4a>
 8001b5c:	f7ff ff38 	bl	80019d0 <__errno>
 8001b60:	2322      	movs	r3, #34	; 0x22
 8001b62:	6003      	str	r3, [r0, #0]
 8001b64:	2400      	movs	r4, #0
 8001b66:	2500      	movs	r5, #0
 8001b68:	e781      	b.n	8001a6e <pow+0x4a>
 8001b6a:	4d04      	ldr	r5, [pc, #16]	; (8001b7c <pow+0x158>)
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	e77e      	b.n	8001a6e <pow+0x4a>
 8001b70:	2000006c 	.word	0x2000006c
 8001b74:	fff00000 	.word	0xfff00000
 8001b78:	7ff00000 	.word	0x7ff00000
 8001b7c:	3ff00000 	.word	0x3ff00000

08001b80 <__ieee754_pow>:
 8001b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b84:	ed2d 8b06 	vpush	{d8-d10}
 8001b88:	b08d      	sub	sp, #52	; 0x34
 8001b8a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8001b8e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8001b92:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8001b96:	ea56 0100 	orrs.w	r1, r6, r0
 8001b9a:	ec53 2b10 	vmov	r2, r3, d0
 8001b9e:	f000 84d1 	beq.w	8002544 <__ieee754_pow+0x9c4>
 8001ba2:	497f      	ldr	r1, [pc, #508]	; (8001da0 <__ieee754_pow+0x220>)
 8001ba4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001ba8:	428c      	cmp	r4, r1
 8001baa:	ee10 8a10 	vmov	r8, s0
 8001bae:	4699      	mov	r9, r3
 8001bb0:	dc09      	bgt.n	8001bc6 <__ieee754_pow+0x46>
 8001bb2:	d103      	bne.n	8001bbc <__ieee754_pow+0x3c>
 8001bb4:	b97a      	cbnz	r2, 8001bd6 <__ieee754_pow+0x56>
 8001bb6:	42a6      	cmp	r6, r4
 8001bb8:	dd02      	ble.n	8001bc0 <__ieee754_pow+0x40>
 8001bba:	e00c      	b.n	8001bd6 <__ieee754_pow+0x56>
 8001bbc:	428e      	cmp	r6, r1
 8001bbe:	dc02      	bgt.n	8001bc6 <__ieee754_pow+0x46>
 8001bc0:	428e      	cmp	r6, r1
 8001bc2:	d110      	bne.n	8001be6 <__ieee754_pow+0x66>
 8001bc4:	b178      	cbz	r0, 8001be6 <__ieee754_pow+0x66>
 8001bc6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8001bca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8001bce:	ea54 0308 	orrs.w	r3, r4, r8
 8001bd2:	f000 84b7 	beq.w	8002544 <__ieee754_pow+0x9c4>
 8001bd6:	4873      	ldr	r0, [pc, #460]	; (8001da4 <__ieee754_pow+0x224>)
 8001bd8:	b00d      	add	sp, #52	; 0x34
 8001bda:	ecbd 8b06 	vpop	{d8-d10}
 8001bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be2:	f000 bdb9 	b.w	8002758 <nan>
 8001be6:	f1b9 0f00 	cmp.w	r9, #0
 8001bea:	da36      	bge.n	8001c5a <__ieee754_pow+0xda>
 8001bec:	496e      	ldr	r1, [pc, #440]	; (8001da8 <__ieee754_pow+0x228>)
 8001bee:	428e      	cmp	r6, r1
 8001bf0:	dc51      	bgt.n	8001c96 <__ieee754_pow+0x116>
 8001bf2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8001bf6:	428e      	cmp	r6, r1
 8001bf8:	f340 84af 	ble.w	800255a <__ieee754_pow+0x9da>
 8001bfc:	1531      	asrs	r1, r6, #20
 8001bfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8001c02:	2914      	cmp	r1, #20
 8001c04:	dd0f      	ble.n	8001c26 <__ieee754_pow+0xa6>
 8001c06:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8001c0a:	fa20 fc01 	lsr.w	ip, r0, r1
 8001c0e:	fa0c f101 	lsl.w	r1, ip, r1
 8001c12:	4281      	cmp	r1, r0
 8001c14:	f040 84a1 	bne.w	800255a <__ieee754_pow+0x9da>
 8001c18:	f00c 0c01 	and.w	ip, ip, #1
 8001c1c:	f1cc 0102 	rsb	r1, ip, #2
 8001c20:	9100      	str	r1, [sp, #0]
 8001c22:	b180      	cbz	r0, 8001c46 <__ieee754_pow+0xc6>
 8001c24:	e059      	b.n	8001cda <__ieee754_pow+0x15a>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d155      	bne.n	8001cd6 <__ieee754_pow+0x156>
 8001c2a:	f1c1 0114 	rsb	r1, r1, #20
 8001c2e:	fa46 fc01 	asr.w	ip, r6, r1
 8001c32:	fa0c f101 	lsl.w	r1, ip, r1
 8001c36:	42b1      	cmp	r1, r6
 8001c38:	f040 848c 	bne.w	8002554 <__ieee754_pow+0x9d4>
 8001c3c:	f00c 0c01 	and.w	ip, ip, #1
 8001c40:	f1cc 0102 	rsb	r1, ip, #2
 8001c44:	9100      	str	r1, [sp, #0]
 8001c46:	4959      	ldr	r1, [pc, #356]	; (8001dac <__ieee754_pow+0x22c>)
 8001c48:	428e      	cmp	r6, r1
 8001c4a:	d12d      	bne.n	8001ca8 <__ieee754_pow+0x128>
 8001c4c:	2f00      	cmp	r7, #0
 8001c4e:	da79      	bge.n	8001d44 <__ieee754_pow+0x1c4>
 8001c50:	4956      	ldr	r1, [pc, #344]	; (8001dac <__ieee754_pow+0x22c>)
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7fe fd9e 	bl	8000794 <__aeabi_ddiv>
 8001c58:	e016      	b.n	8001c88 <__ieee754_pow+0x108>
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	9100      	str	r1, [sp, #0]
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	d13b      	bne.n	8001cda <__ieee754_pow+0x15a>
 8001c62:	494f      	ldr	r1, [pc, #316]	; (8001da0 <__ieee754_pow+0x220>)
 8001c64:	428e      	cmp	r6, r1
 8001c66:	d1ee      	bne.n	8001c46 <__ieee754_pow+0xc6>
 8001c68:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8001c6c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001c70:	ea53 0308 	orrs.w	r3, r3, r8
 8001c74:	f000 8466 	beq.w	8002544 <__ieee754_pow+0x9c4>
 8001c78:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <__ieee754_pow+0x230>)
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	dd0d      	ble.n	8001c9a <__ieee754_pow+0x11a>
 8001c7e:	2f00      	cmp	r7, #0
 8001c80:	f280 8464 	bge.w	800254c <__ieee754_pow+0x9cc>
 8001c84:	2000      	movs	r0, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	ec41 0b10 	vmov	d0, r0, r1
 8001c8c:	b00d      	add	sp, #52	; 0x34
 8001c8e:	ecbd 8b06 	vpop	{d8-d10}
 8001c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c96:	2102      	movs	r1, #2
 8001c98:	e7e0      	b.n	8001c5c <__ieee754_pow+0xdc>
 8001c9a:	2f00      	cmp	r7, #0
 8001c9c:	daf2      	bge.n	8001c84 <__ieee754_pow+0x104>
 8001c9e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8001ca2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8001ca6:	e7ef      	b.n	8001c88 <__ieee754_pow+0x108>
 8001ca8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8001cac:	d104      	bne.n	8001cb8 <__ieee754_pow+0x138>
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe fc45 	bl	8000540 <__aeabi_dmul>
 8001cb6:	e7e7      	b.n	8001c88 <__ieee754_pow+0x108>
 8001cb8:	493e      	ldr	r1, [pc, #248]	; (8001db4 <__ieee754_pow+0x234>)
 8001cba:	428f      	cmp	r7, r1
 8001cbc:	d10d      	bne.n	8001cda <__ieee754_pow+0x15a>
 8001cbe:	f1b9 0f00 	cmp.w	r9, #0
 8001cc2:	db0a      	blt.n	8001cda <__ieee754_pow+0x15a>
 8001cc4:	ec43 2b10 	vmov	d0, r2, r3
 8001cc8:	b00d      	add	sp, #52	; 0x34
 8001cca:	ecbd 8b06 	vpop	{d8-d10}
 8001cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cd2:	f000 bc77 	b.w	80025c4 <__ieee754_sqrt>
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	9100      	str	r1, [sp, #0]
 8001cda:	ec43 2b10 	vmov	d0, r2, r3
 8001cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ce2:	f000 fd23 	bl	800272c <fabs>
 8001ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001cea:	ec51 0b10 	vmov	r0, r1, d0
 8001cee:	f1b8 0f00 	cmp.w	r8, #0
 8001cf2:	d12a      	bne.n	8001d4a <__ieee754_pow+0x1ca>
 8001cf4:	b12c      	cbz	r4, 8001d02 <__ieee754_pow+0x182>
 8001cf6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8001dac <__ieee754_pow+0x22c>
 8001cfa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8001cfe:	45e6      	cmp	lr, ip
 8001d00:	d123      	bne.n	8001d4a <__ieee754_pow+0x1ca>
 8001d02:	2f00      	cmp	r7, #0
 8001d04:	da05      	bge.n	8001d12 <__ieee754_pow+0x192>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	4927      	ldr	r1, [pc, #156]	; (8001dac <__ieee754_pow+0x22c>)
 8001d0e:	f7fe fd41 	bl	8000794 <__aeabi_ddiv>
 8001d12:	f1b9 0f00 	cmp.w	r9, #0
 8001d16:	dab7      	bge.n	8001c88 <__ieee754_pow+0x108>
 8001d18:	9b00      	ldr	r3, [sp, #0]
 8001d1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8001d1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8001d22:	4323      	orrs	r3, r4
 8001d24:	d108      	bne.n	8001d38 <__ieee754_pow+0x1b8>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4610      	mov	r0, r2
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7fe fa4f 	bl	80001d0 <__aeabi_dsub>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	e78d      	b.n	8001c54 <__ieee754_pow+0xd4>
 8001d38:	9b00      	ldr	r3, [sp, #0]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d1a4      	bne.n	8001c88 <__ieee754_pow+0x108>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	e79e      	b.n	8001c88 <__ieee754_pow+0x108>
 8001d4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8001d4e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8001d52:	950a      	str	r5, [sp, #40]	; 0x28
 8001d54:	9d00      	ldr	r5, [sp, #0]
 8001d56:	46ac      	mov	ip, r5
 8001d58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001d5a:	ea5c 0505 	orrs.w	r5, ip, r5
 8001d5e:	d0e4      	beq.n	8001d2a <__ieee754_pow+0x1aa>
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <__ieee754_pow+0x238>)
 8001d62:	429e      	cmp	r6, r3
 8001d64:	f340 80fc 	ble.w	8001f60 <__ieee754_pow+0x3e0>
 8001d68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8001d6c:	429e      	cmp	r6, r3
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <__ieee754_pow+0x230>)
 8001d70:	dd07      	ble.n	8001d82 <__ieee754_pow+0x202>
 8001d72:	429c      	cmp	r4, r3
 8001d74:	dc0a      	bgt.n	8001d8c <__ieee754_pow+0x20c>
 8001d76:	2f00      	cmp	r7, #0
 8001d78:	da84      	bge.n	8001c84 <__ieee754_pow+0x104>
 8001d7a:	a307      	add	r3, pc, #28	; (adr r3, 8001d98 <__ieee754_pow+0x218>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	e795      	b.n	8001cae <__ieee754_pow+0x12e>
 8001d82:	429c      	cmp	r4, r3
 8001d84:	dbf7      	blt.n	8001d76 <__ieee754_pow+0x1f6>
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <__ieee754_pow+0x22c>)
 8001d88:	429c      	cmp	r4, r3
 8001d8a:	dd17      	ble.n	8001dbc <__ieee754_pow+0x23c>
 8001d8c:	2f00      	cmp	r7, #0
 8001d8e:	dcf4      	bgt.n	8001d7a <__ieee754_pow+0x1fa>
 8001d90:	e778      	b.n	8001c84 <__ieee754_pow+0x104>
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	8800759c 	.word	0x8800759c
 8001d9c:	7e37e43c 	.word	0x7e37e43c
 8001da0:	7ff00000 	.word	0x7ff00000
 8001da4:	080029a8 	.word	0x080029a8
 8001da8:	433fffff 	.word	0x433fffff
 8001dac:	3ff00000 	.word	0x3ff00000
 8001db0:	3fefffff 	.word	0x3fefffff
 8001db4:	3fe00000 	.word	0x3fe00000
 8001db8:	41e00000 	.word	0x41e00000
 8001dbc:	4b64      	ldr	r3, [pc, #400]	; (8001f50 <__ieee754_pow+0x3d0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f7fe fa06 	bl	80001d0 <__aeabi_dsub>
 8001dc4:	a356      	add	r3, pc, #344	; (adr r3, 8001f20 <__ieee754_pow+0x3a0>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	4604      	mov	r4, r0
 8001dcc:	460d      	mov	r5, r1
 8001dce:	f7fe fbb7 	bl	8000540 <__aeabi_dmul>
 8001dd2:	a355      	add	r3, pc, #340	; (adr r3, 8001f28 <__ieee754_pow+0x3a8>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	4606      	mov	r6, r0
 8001dda:	460f      	mov	r7, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fbae 	bl	8000540 <__aeabi_dmul>
 8001de4:	4b5b      	ldr	r3, [pc, #364]	; (8001f54 <__ieee754_pow+0x3d4>)
 8001de6:	4682      	mov	sl, r0
 8001de8:	468b      	mov	fp, r1
 8001dea:	2200      	movs	r2, #0
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fba6 	bl	8000540 <__aeabi_dmul>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	a14d      	add	r1, pc, #308	; (adr r1, 8001f30 <__ieee754_pow+0x3b0>)
 8001dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dfe:	f7fe f9e7 	bl	80001d0 <__aeabi_dsub>
 8001e02:	4622      	mov	r2, r4
 8001e04:	462b      	mov	r3, r5
 8001e06:	f7fe fb9b 	bl	8000540 <__aeabi_dmul>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	2000      	movs	r0, #0
 8001e10:	4951      	ldr	r1, [pc, #324]	; (8001f58 <__ieee754_pow+0x3d8>)
 8001e12:	f7fe f9dd 	bl	80001d0 <__aeabi_dsub>
 8001e16:	4622      	mov	r2, r4
 8001e18:	4680      	mov	r8, r0
 8001e1a:	4689      	mov	r9, r1
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fb8d 	bl	8000540 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	f7fe fb87 	bl	8000540 <__aeabi_dmul>
 8001e32:	a341      	add	r3, pc, #260	; (adr r3, 8001f38 <__ieee754_pow+0x3b8>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fb82 	bl	8000540 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4650      	mov	r0, sl
 8001e42:	4659      	mov	r1, fp
 8001e44:	f7fe f9c4 	bl	80001d0 <__aeabi_dsub>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	4689      	mov	r9, r1
 8001e50:	4630      	mov	r0, r6
 8001e52:	4639      	mov	r1, r7
 8001e54:	f7fe f9be 	bl	80001d4 <__adddf3>
 8001e58:	2400      	movs	r4, #0
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4620      	mov	r0, r4
 8001e60:	460d      	mov	r5, r1
 8001e62:	f7fe f9b5 	bl	80001d0 <__aeabi_dsub>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4640      	mov	r0, r8
 8001e6c:	4649      	mov	r1, r9
 8001e6e:	f7fe f9af 	bl	80001d0 <__aeabi_dsub>
 8001e72:	9b00      	ldr	r3, [sp, #0]
 8001e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001e76:	3b01      	subs	r3, #1
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	4682      	mov	sl, r0
 8001e7c:	468b      	mov	fp, r1
 8001e7e:	f040 81f1 	bne.w	8002264 <__ieee754_pow+0x6e4>
 8001e82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8001f40 <__ieee754_pow+0x3c0>
 8001e86:	eeb0 8a47 	vmov.f32	s16, s14
 8001e8a:	eef0 8a67 	vmov.f32	s17, s15
 8001e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8001e92:	2600      	movs	r6, #0
 8001e94:	4632      	mov	r2, r6
 8001e96:	463b      	mov	r3, r7
 8001e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001e9c:	f7fe f998 	bl	80001d0 <__aeabi_dsub>
 8001ea0:	4622      	mov	r2, r4
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	f7fe fb4c 	bl	8000540 <__aeabi_dmul>
 8001ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001eac:	4680      	mov	r8, r0
 8001eae:	4689      	mov	r9, r1
 8001eb0:	4650      	mov	r0, sl
 8001eb2:	4659      	mov	r1, fp
 8001eb4:	f7fe fb44 	bl	8000540 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	f7fe f988 	bl	80001d4 <__adddf3>
 8001ec4:	4632      	mov	r2, r6
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	4680      	mov	r8, r0
 8001eca:	4689      	mov	r9, r1
 8001ecc:	4620      	mov	r0, r4
 8001ece:	4629      	mov	r1, r5
 8001ed0:	f7fe fb36 	bl	8000540 <__aeabi_dmul>
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	460d      	mov	r5, r1
 8001eda:	4602      	mov	r2, r0
 8001edc:	4649      	mov	r1, r9
 8001ede:	4640      	mov	r0, r8
 8001ee0:	f7fe f978 	bl	80001d4 <__adddf3>
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <__ieee754_pow+0x3dc>)
 8001ee6:	4299      	cmp	r1, r3
 8001ee8:	ec45 4b19 	vmov	d9, r4, r5
 8001eec:	4606      	mov	r6, r0
 8001eee:	460f      	mov	r7, r1
 8001ef0:	468b      	mov	fp, r1
 8001ef2:	f340 82fe 	ble.w	80024f2 <__ieee754_pow+0x972>
 8001ef6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8001efa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8001efe:	4303      	orrs	r3, r0
 8001f00:	f000 81f0 	beq.w	80022e4 <__ieee754_pow+0x764>
 8001f04:	a310      	add	r3, pc, #64	; (adr r3, 8001f48 <__ieee754_pow+0x3c8>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	ec51 0b18 	vmov	r0, r1, d8
 8001f0e:	f7fe fb17 	bl	8000540 <__aeabi_dmul>
 8001f12:	a30d      	add	r3, pc, #52	; (adr r3, 8001f48 <__ieee754_pow+0x3c8>)
 8001f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f18:	e6cb      	b.n	8001cb2 <__ieee754_pow+0x132>
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	60000000 	.word	0x60000000
 8001f24:	3ff71547 	.word	0x3ff71547
 8001f28:	f85ddf44 	.word	0xf85ddf44
 8001f2c:	3e54ae0b 	.word	0x3e54ae0b
 8001f30:	55555555 	.word	0x55555555
 8001f34:	3fd55555 	.word	0x3fd55555
 8001f38:	652b82fe 	.word	0x652b82fe
 8001f3c:	3ff71547 	.word	0x3ff71547
 8001f40:	00000000 	.word	0x00000000
 8001f44:	bff00000 	.word	0xbff00000
 8001f48:	8800759c 	.word	0x8800759c
 8001f4c:	7e37e43c 	.word	0x7e37e43c
 8001f50:	3ff00000 	.word	0x3ff00000
 8001f54:	3fd00000 	.word	0x3fd00000
 8001f58:	3fe00000 	.word	0x3fe00000
 8001f5c:	408fffff 	.word	0x408fffff
 8001f60:	4bd7      	ldr	r3, [pc, #860]	; (80022c0 <__ieee754_pow+0x740>)
 8001f62:	ea03 0309 	and.w	r3, r3, r9
 8001f66:	2200      	movs	r2, #0
 8001f68:	b92b      	cbnz	r3, 8001f76 <__ieee754_pow+0x3f6>
 8001f6a:	4bd6      	ldr	r3, [pc, #856]	; (80022c4 <__ieee754_pow+0x744>)
 8001f6c:	f7fe fae8 	bl	8000540 <__aeabi_dmul>
 8001f70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8001f74:	460c      	mov	r4, r1
 8001f76:	1523      	asrs	r3, r4, #20
 8001f78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8001f7c:	4413      	add	r3, r2
 8001f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8001f80:	4bd1      	ldr	r3, [pc, #836]	; (80022c8 <__ieee754_pow+0x748>)
 8001f82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8001f86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8001f8a:	429c      	cmp	r4, r3
 8001f8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8001f90:	dd08      	ble.n	8001fa4 <__ieee754_pow+0x424>
 8001f92:	4bce      	ldr	r3, [pc, #824]	; (80022cc <__ieee754_pow+0x74c>)
 8001f94:	429c      	cmp	r4, r3
 8001f96:	f340 8163 	ble.w	8002260 <__ieee754_pow+0x6e0>
 8001f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001fa0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	00e3      	lsls	r3, r4, #3
 8001fa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8001faa:	4bc9      	ldr	r3, [pc, #804]	; (80022d0 <__ieee754_pow+0x750>)
 8001fac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8001fb0:	ed93 7b00 	vldr	d7, [r3]
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	ec53 2b17 	vmov	r2, r3, d7
 8001fba:	eeb0 8a47 	vmov.f32	s16, s14
 8001fbe:	eef0 8a67 	vmov.f32	s17, s15
 8001fc2:	4682      	mov	sl, r0
 8001fc4:	f7fe f904 	bl	80001d0 <__aeabi_dsub>
 8001fc8:	4652      	mov	r2, sl
 8001fca:	4606      	mov	r6, r0
 8001fcc:	460f      	mov	r7, r1
 8001fce:	462b      	mov	r3, r5
 8001fd0:	ec51 0b18 	vmov	r0, r1, d8
 8001fd4:	f7fe f8fe 	bl	80001d4 <__adddf3>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	2000      	movs	r0, #0
 8001fde:	49bd      	ldr	r1, [pc, #756]	; (80022d4 <__ieee754_pow+0x754>)
 8001fe0:	f7fe fbd8 	bl	8000794 <__aeabi_ddiv>
 8001fe4:	ec41 0b19 	vmov	d9, r0, r1
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4630      	mov	r0, r6
 8001fee:	4639      	mov	r1, r7
 8001ff0:	f7fe faa6 	bl	8000540 <__aeabi_dmul>
 8001ff4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001ff8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002000:	2300      	movs	r3, #0
 8002002:	9304      	str	r3, [sp, #16]
 8002004:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002008:	46ab      	mov	fp, r5
 800200a:	106d      	asrs	r5, r5, #1
 800200c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002010:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002014:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002018:	2200      	movs	r2, #0
 800201a:	4640      	mov	r0, r8
 800201c:	4649      	mov	r1, r9
 800201e:	4614      	mov	r4, r2
 8002020:	461d      	mov	r5, r3
 8002022:	f7fe fa8d 	bl	8000540 <__aeabi_dmul>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4630      	mov	r0, r6
 800202c:	4639      	mov	r1, r7
 800202e:	f7fe f8cf 	bl	80001d0 <__aeabi_dsub>
 8002032:	ec53 2b18 	vmov	r2, r3, d8
 8002036:	4606      	mov	r6, r0
 8002038:	460f      	mov	r7, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f8c7 	bl	80001d0 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4650      	mov	r0, sl
 8002048:	4659      	mov	r1, fp
 800204a:	f7fe f8c1 	bl	80001d0 <__aeabi_dsub>
 800204e:	4642      	mov	r2, r8
 8002050:	464b      	mov	r3, r9
 8002052:	f7fe fa75 	bl	8000540 <__aeabi_dmul>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4630      	mov	r0, r6
 800205c:	4639      	mov	r1, r7
 800205e:	f7fe f8b7 	bl	80001d0 <__aeabi_dsub>
 8002062:	ec53 2b19 	vmov	r2, r3, d9
 8002066:	f7fe fa6b 	bl	8000540 <__aeabi_dmul>
 800206a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800206e:	ec41 0b18 	vmov	d8, r0, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fa63 	bl	8000540 <__aeabi_dmul>
 800207a:	a37d      	add	r3, pc, #500	; (adr r3, 8002270 <__ieee754_pow+0x6f0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	4604      	mov	r4, r0
 8002082:	460d      	mov	r5, r1
 8002084:	f7fe fa5c 	bl	8000540 <__aeabi_dmul>
 8002088:	a37b      	add	r3, pc, #492	; (adr r3, 8002278 <__ieee754_pow+0x6f8>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe f8a1 	bl	80001d4 <__adddf3>
 8002092:	4622      	mov	r2, r4
 8002094:	462b      	mov	r3, r5
 8002096:	f7fe fa53 	bl	8000540 <__aeabi_dmul>
 800209a:	a379      	add	r3, pc, #484	; (adr r3, 8002280 <__ieee754_pow+0x700>)
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f7fe f898 	bl	80001d4 <__adddf3>
 80020a4:	4622      	mov	r2, r4
 80020a6:	462b      	mov	r3, r5
 80020a8:	f7fe fa4a 	bl	8000540 <__aeabi_dmul>
 80020ac:	a376      	add	r3, pc, #472	; (adr r3, 8002288 <__ieee754_pow+0x708>)
 80020ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b2:	f7fe f88f 	bl	80001d4 <__adddf3>
 80020b6:	4622      	mov	r2, r4
 80020b8:	462b      	mov	r3, r5
 80020ba:	f7fe fa41 	bl	8000540 <__aeabi_dmul>
 80020be:	a374      	add	r3, pc, #464	; (adr r3, 8002290 <__ieee754_pow+0x710>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe f886 	bl	80001d4 <__adddf3>
 80020c8:	4622      	mov	r2, r4
 80020ca:	462b      	mov	r3, r5
 80020cc:	f7fe fa38 	bl	8000540 <__aeabi_dmul>
 80020d0:	a371      	add	r3, pc, #452	; (adr r3, 8002298 <__ieee754_pow+0x718>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe f87d 	bl	80001d4 <__adddf3>
 80020da:	4622      	mov	r2, r4
 80020dc:	4606      	mov	r6, r0
 80020de:	460f      	mov	r7, r1
 80020e0:	462b      	mov	r3, r5
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe fa2b 	bl	8000540 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4630      	mov	r0, r6
 80020f0:	4639      	mov	r1, r7
 80020f2:	f7fe fa25 	bl	8000540 <__aeabi_dmul>
 80020f6:	4642      	mov	r2, r8
 80020f8:	4604      	mov	r4, r0
 80020fa:	460d      	mov	r5, r1
 80020fc:	464b      	mov	r3, r9
 80020fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002102:	f7fe f867 	bl	80001d4 <__adddf3>
 8002106:	ec53 2b18 	vmov	r2, r3, d8
 800210a:	f7fe fa19 	bl	8000540 <__aeabi_dmul>
 800210e:	4622      	mov	r2, r4
 8002110:	462b      	mov	r3, r5
 8002112:	f7fe f85f 	bl	80001d4 <__adddf3>
 8002116:	4642      	mov	r2, r8
 8002118:	4682      	mov	sl, r0
 800211a:	468b      	mov	fp, r1
 800211c:	464b      	mov	r3, r9
 800211e:	4640      	mov	r0, r8
 8002120:	4649      	mov	r1, r9
 8002122:	f7fe fa0d 	bl	8000540 <__aeabi_dmul>
 8002126:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <__ieee754_pow+0x758>)
 8002128:	2200      	movs	r2, #0
 800212a:	4606      	mov	r6, r0
 800212c:	460f      	mov	r7, r1
 800212e:	f7fe f851 	bl	80001d4 <__adddf3>
 8002132:	4652      	mov	r2, sl
 8002134:	465b      	mov	r3, fp
 8002136:	f7fe f84d 	bl	80001d4 <__adddf3>
 800213a:	9c04      	ldr	r4, [sp, #16]
 800213c:	460d      	mov	r5, r1
 800213e:	4622      	mov	r2, r4
 8002140:	460b      	mov	r3, r1
 8002142:	4640      	mov	r0, r8
 8002144:	4649      	mov	r1, r9
 8002146:	f7fe f9fb 	bl	8000540 <__aeabi_dmul>
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <__ieee754_pow+0x758>)
 800214c:	4680      	mov	r8, r0
 800214e:	4689      	mov	r9, r1
 8002150:	2200      	movs	r2, #0
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe f83b 	bl	80001d0 <__aeabi_dsub>
 800215a:	4632      	mov	r2, r6
 800215c:	463b      	mov	r3, r7
 800215e:	f7fe f837 	bl	80001d0 <__aeabi_dsub>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	4650      	mov	r0, sl
 8002168:	4659      	mov	r1, fp
 800216a:	f7fe f831 	bl	80001d0 <__aeabi_dsub>
 800216e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002172:	f7fe f9e5 	bl	8000540 <__aeabi_dmul>
 8002176:	4622      	mov	r2, r4
 8002178:	4606      	mov	r6, r0
 800217a:	460f      	mov	r7, r1
 800217c:	462b      	mov	r3, r5
 800217e:	ec51 0b18 	vmov	r0, r1, d8
 8002182:	f7fe f9dd 	bl	8000540 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4630      	mov	r0, r6
 800218c:	4639      	mov	r1, r7
 800218e:	f7fe f821 	bl	80001d4 <__adddf3>
 8002192:	4606      	mov	r6, r0
 8002194:	460f      	mov	r7, r1
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4640      	mov	r0, r8
 800219c:	4649      	mov	r1, r9
 800219e:	f7fe f819 	bl	80001d4 <__adddf3>
 80021a2:	9c04      	ldr	r4, [sp, #16]
 80021a4:	a33e      	add	r3, pc, #248	; (adr r3, 80022a0 <__ieee754_pow+0x720>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	4620      	mov	r0, r4
 80021ac:	460d      	mov	r5, r1
 80021ae:	f7fe f9c7 	bl	8000540 <__aeabi_dmul>
 80021b2:	4642      	mov	r2, r8
 80021b4:	ec41 0b18 	vmov	d8, r0, r1
 80021b8:	464b      	mov	r3, r9
 80021ba:	4620      	mov	r0, r4
 80021bc:	4629      	mov	r1, r5
 80021be:	f7fe f807 	bl	80001d0 <__aeabi_dsub>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4630      	mov	r0, r6
 80021c8:	4639      	mov	r1, r7
 80021ca:	f7fe f801 	bl	80001d0 <__aeabi_dsub>
 80021ce:	a336      	add	r3, pc, #216	; (adr r3, 80022a8 <__ieee754_pow+0x728>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f9b4 	bl	8000540 <__aeabi_dmul>
 80021d8:	a335      	add	r3, pc, #212	; (adr r3, 80022b0 <__ieee754_pow+0x730>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	4606      	mov	r6, r0
 80021e0:	460f      	mov	r7, r1
 80021e2:	4620      	mov	r0, r4
 80021e4:	4629      	mov	r1, r5
 80021e6:	f7fe f9ab 	bl	8000540 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4630      	mov	r0, r6
 80021f0:	4639      	mov	r1, r7
 80021f2:	f7fd ffef 	bl	80001d4 <__adddf3>
 80021f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021f8:	4b38      	ldr	r3, [pc, #224]	; (80022dc <__ieee754_pow+0x75c>)
 80021fa:	4413      	add	r3, r2
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	f7fd ffe8 	bl	80001d4 <__adddf3>
 8002204:	4682      	mov	sl, r0
 8002206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002208:	468b      	mov	fp, r1
 800220a:	f7fe f92f 	bl	800046c <__aeabi_i2d>
 800220e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002210:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <__ieee754_pow+0x760>)
 8002212:	4413      	add	r3, r2
 8002214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002218:	4606      	mov	r6, r0
 800221a:	460f      	mov	r7, r1
 800221c:	4652      	mov	r2, sl
 800221e:	465b      	mov	r3, fp
 8002220:	ec51 0b18 	vmov	r0, r1, d8
 8002224:	f7fd ffd6 	bl	80001d4 <__adddf3>
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	f7fd ffd2 	bl	80001d4 <__adddf3>
 8002230:	4632      	mov	r2, r6
 8002232:	463b      	mov	r3, r7
 8002234:	f7fd ffce 	bl	80001d4 <__adddf3>
 8002238:	9c04      	ldr	r4, [sp, #16]
 800223a:	4632      	mov	r2, r6
 800223c:	463b      	mov	r3, r7
 800223e:	4620      	mov	r0, r4
 8002240:	460d      	mov	r5, r1
 8002242:	f7fd ffc5 	bl	80001d0 <__aeabi_dsub>
 8002246:	4642      	mov	r2, r8
 8002248:	464b      	mov	r3, r9
 800224a:	f7fd ffc1 	bl	80001d0 <__aeabi_dsub>
 800224e:	ec53 2b18 	vmov	r2, r3, d8
 8002252:	f7fd ffbd 	bl	80001d0 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4650      	mov	r0, sl
 800225c:	4659      	mov	r1, fp
 800225e:	e606      	b.n	8001e6e <__ieee754_pow+0x2ee>
 8002260:	2401      	movs	r4, #1
 8002262:	e6a0      	b.n	8001fa6 <__ieee754_pow+0x426>
 8002264:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80022b8 <__ieee754_pow+0x738>
 8002268:	e60d      	b.n	8001e86 <__ieee754_pow+0x306>
 800226a:	bf00      	nop
 800226c:	f3af 8000 	nop.w
 8002270:	4a454eef 	.word	0x4a454eef
 8002274:	3fca7e28 	.word	0x3fca7e28
 8002278:	93c9db65 	.word	0x93c9db65
 800227c:	3fcd864a 	.word	0x3fcd864a
 8002280:	a91d4101 	.word	0xa91d4101
 8002284:	3fd17460 	.word	0x3fd17460
 8002288:	518f264d 	.word	0x518f264d
 800228c:	3fd55555 	.word	0x3fd55555
 8002290:	db6fabff 	.word	0xdb6fabff
 8002294:	3fdb6db6 	.word	0x3fdb6db6
 8002298:	33333303 	.word	0x33333303
 800229c:	3fe33333 	.word	0x3fe33333
 80022a0:	e0000000 	.word	0xe0000000
 80022a4:	3feec709 	.word	0x3feec709
 80022a8:	dc3a03fd 	.word	0xdc3a03fd
 80022ac:	3feec709 	.word	0x3feec709
 80022b0:	145b01f5 	.word	0x145b01f5
 80022b4:	be3e2fe0 	.word	0xbe3e2fe0
 80022b8:	00000000 	.word	0x00000000
 80022bc:	3ff00000 	.word	0x3ff00000
 80022c0:	7ff00000 	.word	0x7ff00000
 80022c4:	43400000 	.word	0x43400000
 80022c8:	0003988e 	.word	0x0003988e
 80022cc:	000bb679 	.word	0x000bb679
 80022d0:	080029b0 	.word	0x080029b0
 80022d4:	3ff00000 	.word	0x3ff00000
 80022d8:	40080000 	.word	0x40080000
 80022dc:	080029d0 	.word	0x080029d0
 80022e0:	080029c0 	.word	0x080029c0
 80022e4:	a3b5      	add	r3, pc, #724	; (adr r3, 80025bc <__ieee754_pow+0xa3c>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	4640      	mov	r0, r8
 80022ec:	4649      	mov	r1, r9
 80022ee:	f7fd ff71 	bl	80001d4 <__adddf3>
 80022f2:	4622      	mov	r2, r4
 80022f4:	ec41 0b1a 	vmov	d10, r0, r1
 80022f8:	462b      	mov	r3, r5
 80022fa:	4630      	mov	r0, r6
 80022fc:	4639      	mov	r1, r7
 80022fe:	f7fd ff67 	bl	80001d0 <__aeabi_dsub>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	ec51 0b1a 	vmov	r0, r1, d10
 800230a:	f7fe fba9 	bl	8000a60 <__aeabi_dcmpgt>
 800230e:	2800      	cmp	r0, #0
 8002310:	f47f adf8 	bne.w	8001f04 <__ieee754_pow+0x384>
 8002314:	4aa4      	ldr	r2, [pc, #656]	; (80025a8 <__ieee754_pow+0xa28>)
 8002316:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800231a:	4293      	cmp	r3, r2
 800231c:	f340 810b 	ble.w	8002536 <__ieee754_pow+0x9b6>
 8002320:	151b      	asrs	r3, r3, #20
 8002322:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002326:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800232a:	fa4a f303 	asr.w	r3, sl, r3
 800232e:	445b      	add	r3, fp
 8002330:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002334:	4e9d      	ldr	r6, [pc, #628]	; (80025ac <__ieee754_pow+0xa2c>)
 8002336:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800233a:	4116      	asrs	r6, r2
 800233c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002340:	2000      	movs	r0, #0
 8002342:	ea23 0106 	bic.w	r1, r3, r6
 8002346:	f1c2 0214 	rsb	r2, r2, #20
 800234a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800234e:	fa4a fa02 	asr.w	sl, sl, r2
 8002352:	f1bb 0f00 	cmp.w	fp, #0
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4620      	mov	r0, r4
 800235c:	4629      	mov	r1, r5
 800235e:	bfb8      	it	lt
 8002360:	f1ca 0a00 	rsblt	sl, sl, #0
 8002364:	f7fd ff34 	bl	80001d0 <__aeabi_dsub>
 8002368:	ec41 0b19 	vmov	d9, r0, r1
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	ec51 0b19 	vmov	r0, r1, d9
 8002374:	f7fd ff2e 	bl	80001d4 <__adddf3>
 8002378:	2400      	movs	r4, #0
 800237a:	a379      	add	r3, pc, #484	; (adr r3, 8002560 <__ieee754_pow+0x9e0>)
 800237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002380:	4620      	mov	r0, r4
 8002382:	460d      	mov	r5, r1
 8002384:	f7fe f8dc 	bl	8000540 <__aeabi_dmul>
 8002388:	ec53 2b19 	vmov	r2, r3, d9
 800238c:	4606      	mov	r6, r0
 800238e:	460f      	mov	r7, r1
 8002390:	4620      	mov	r0, r4
 8002392:	4629      	mov	r1, r5
 8002394:	f7fd ff1c 	bl	80001d0 <__aeabi_dsub>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4640      	mov	r0, r8
 800239e:	4649      	mov	r1, r9
 80023a0:	f7fd ff16 	bl	80001d0 <__aeabi_dsub>
 80023a4:	a370      	add	r3, pc, #448	; (adr r3, 8002568 <__ieee754_pow+0x9e8>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f8c9 	bl	8000540 <__aeabi_dmul>
 80023ae:	a370      	add	r3, pc, #448	; (adr r3, 8002570 <__ieee754_pow+0x9f0>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	4680      	mov	r8, r0
 80023b6:	4689      	mov	r9, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fe f8c0 	bl	8000540 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4640      	mov	r0, r8
 80023c6:	4649      	mov	r1, r9
 80023c8:	f7fd ff04 	bl	80001d4 <__adddf3>
 80023cc:	4604      	mov	r4, r0
 80023ce:	460d      	mov	r5, r1
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4630      	mov	r0, r6
 80023d6:	4639      	mov	r1, r7
 80023d8:	f7fd fefc 	bl	80001d4 <__adddf3>
 80023dc:	4632      	mov	r2, r6
 80023de:	463b      	mov	r3, r7
 80023e0:	4680      	mov	r8, r0
 80023e2:	4689      	mov	r9, r1
 80023e4:	f7fd fef4 	bl	80001d0 <__aeabi_dsub>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd feee 	bl	80001d0 <__aeabi_dsub>
 80023f4:	4642      	mov	r2, r8
 80023f6:	4606      	mov	r6, r0
 80023f8:	460f      	mov	r7, r1
 80023fa:	464b      	mov	r3, r9
 80023fc:	4640      	mov	r0, r8
 80023fe:	4649      	mov	r1, r9
 8002400:	f7fe f89e 	bl	8000540 <__aeabi_dmul>
 8002404:	a35c      	add	r3, pc, #368	; (adr r3, 8002578 <__ieee754_pow+0x9f8>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	f7fe f897 	bl	8000540 <__aeabi_dmul>
 8002412:	a35b      	add	r3, pc, #364	; (adr r3, 8002580 <__ieee754_pow+0xa00>)
 8002414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002418:	f7fd feda 	bl	80001d0 <__aeabi_dsub>
 800241c:	4622      	mov	r2, r4
 800241e:	462b      	mov	r3, r5
 8002420:	f7fe f88e 	bl	8000540 <__aeabi_dmul>
 8002424:	a358      	add	r3, pc, #352	; (adr r3, 8002588 <__ieee754_pow+0xa08>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fd fed3 	bl	80001d4 <__adddf3>
 800242e:	4622      	mov	r2, r4
 8002430:	462b      	mov	r3, r5
 8002432:	f7fe f885 	bl	8000540 <__aeabi_dmul>
 8002436:	a356      	add	r3, pc, #344	; (adr r3, 8002590 <__ieee754_pow+0xa10>)
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	f7fd fec8 	bl	80001d0 <__aeabi_dsub>
 8002440:	4622      	mov	r2, r4
 8002442:	462b      	mov	r3, r5
 8002444:	f7fe f87c 	bl	8000540 <__aeabi_dmul>
 8002448:	a353      	add	r3, pc, #332	; (adr r3, 8002598 <__ieee754_pow+0xa18>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fd fec1 	bl	80001d4 <__adddf3>
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	f7fe f873 	bl	8000540 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4640      	mov	r0, r8
 8002460:	4649      	mov	r1, r9
 8002462:	f7fd feb5 	bl	80001d0 <__aeabi_dsub>
 8002466:	4604      	mov	r4, r0
 8002468:	460d      	mov	r5, r1
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4640      	mov	r0, r8
 8002470:	4649      	mov	r1, r9
 8002472:	f7fe f865 	bl	8000540 <__aeabi_dmul>
 8002476:	2200      	movs	r2, #0
 8002478:	ec41 0b19 	vmov	d9, r0, r1
 800247c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7fd fea4 	bl	80001d0 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	ec51 0b19 	vmov	r0, r1, d9
 8002490:	f7fe f980 	bl	8000794 <__aeabi_ddiv>
 8002494:	4632      	mov	r2, r6
 8002496:	4604      	mov	r4, r0
 8002498:	460d      	mov	r5, r1
 800249a:	463b      	mov	r3, r7
 800249c:	4640      	mov	r0, r8
 800249e:	4649      	mov	r1, r9
 80024a0:	f7fe f84e 	bl	8000540 <__aeabi_dmul>
 80024a4:	4632      	mov	r2, r6
 80024a6:	463b      	mov	r3, r7
 80024a8:	f7fd fe94 	bl	80001d4 <__adddf3>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4620      	mov	r0, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	f7fd fe8c 	bl	80001d0 <__aeabi_dsub>
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f7fd fe88 	bl	80001d0 <__aeabi_dsub>
 80024c0:	460b      	mov	r3, r1
 80024c2:	4602      	mov	r2, r0
 80024c4:	493a      	ldr	r1, [pc, #232]	; (80025b0 <__ieee754_pow+0xa30>)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fd fe82 	bl	80001d0 <__aeabi_dsub>
 80024cc:	e9cd 0100 	strd	r0, r1, [sp]
 80024d0:	9b01      	ldr	r3, [sp, #4]
 80024d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80024d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024da:	da2f      	bge.n	800253c <__ieee754_pow+0x9bc>
 80024dc:	4650      	mov	r0, sl
 80024de:	ed9d 0b00 	vldr	d0, [sp]
 80024e2:	f000 f9cd 	bl	8002880 <scalbn>
 80024e6:	ec51 0b10 	vmov	r0, r1, d0
 80024ea:	ec53 2b18 	vmov	r2, r3, d8
 80024ee:	f7ff bbe0 	b.w	8001cb2 <__ieee754_pow+0x132>
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <__ieee754_pow+0xa34>)
 80024f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80024f8:	429e      	cmp	r6, r3
 80024fa:	f77f af0b 	ble.w	8002314 <__ieee754_pow+0x794>
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <__ieee754_pow+0xa38>)
 8002500:	440b      	add	r3, r1
 8002502:	4303      	orrs	r3, r0
 8002504:	d00b      	beq.n	800251e <__ieee754_pow+0x99e>
 8002506:	a326      	add	r3, pc, #152	; (adr r3, 80025a0 <__ieee754_pow+0xa20>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	ec51 0b18 	vmov	r0, r1, d8
 8002510:	f7fe f816 	bl	8000540 <__aeabi_dmul>
 8002514:	a322      	add	r3, pc, #136	; (adr r3, 80025a0 <__ieee754_pow+0xa20>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	f7ff bbca 	b.w	8001cb2 <__ieee754_pow+0x132>
 800251e:	4622      	mov	r2, r4
 8002520:	462b      	mov	r3, r5
 8002522:	f7fd fe55 	bl	80001d0 <__aeabi_dsub>
 8002526:	4642      	mov	r2, r8
 8002528:	464b      	mov	r3, r9
 800252a:	f7fe fa8f 	bl	8000a4c <__aeabi_dcmpge>
 800252e:	2800      	cmp	r0, #0
 8002530:	f43f aef0 	beq.w	8002314 <__ieee754_pow+0x794>
 8002534:	e7e7      	b.n	8002506 <__ieee754_pow+0x986>
 8002536:	f04f 0a00 	mov.w	sl, #0
 800253a:	e717      	b.n	800236c <__ieee754_pow+0x7ec>
 800253c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002540:	4619      	mov	r1, r3
 8002542:	e7d2      	b.n	80024ea <__ieee754_pow+0x96a>
 8002544:	491a      	ldr	r1, [pc, #104]	; (80025b0 <__ieee754_pow+0xa30>)
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff bb9e 	b.w	8001c88 <__ieee754_pow+0x108>
 800254c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002550:	f7ff bb9a 	b.w	8001c88 <__ieee754_pow+0x108>
 8002554:	9000      	str	r0, [sp, #0]
 8002556:	f7ff bb76 	b.w	8001c46 <__ieee754_pow+0xc6>
 800255a:	2100      	movs	r1, #0
 800255c:	f7ff bb60 	b.w	8001c20 <__ieee754_pow+0xa0>
 8002560:	00000000 	.word	0x00000000
 8002564:	3fe62e43 	.word	0x3fe62e43
 8002568:	fefa39ef 	.word	0xfefa39ef
 800256c:	3fe62e42 	.word	0x3fe62e42
 8002570:	0ca86c39 	.word	0x0ca86c39
 8002574:	be205c61 	.word	0xbe205c61
 8002578:	72bea4d0 	.word	0x72bea4d0
 800257c:	3e663769 	.word	0x3e663769
 8002580:	c5d26bf1 	.word	0xc5d26bf1
 8002584:	3ebbbd41 	.word	0x3ebbbd41
 8002588:	af25de2c 	.word	0xaf25de2c
 800258c:	3f11566a 	.word	0x3f11566a
 8002590:	16bebd93 	.word	0x16bebd93
 8002594:	3f66c16c 	.word	0x3f66c16c
 8002598:	5555553e 	.word	0x5555553e
 800259c:	3fc55555 	.word	0x3fc55555
 80025a0:	c2f8f359 	.word	0xc2f8f359
 80025a4:	01a56e1f 	.word	0x01a56e1f
 80025a8:	3fe00000 	.word	0x3fe00000
 80025ac:	000fffff 	.word	0x000fffff
 80025b0:	3ff00000 	.word	0x3ff00000
 80025b4:	4090cbff 	.word	0x4090cbff
 80025b8:	3f6f3400 	.word	0x3f6f3400
 80025bc:	652b82fe 	.word	0x652b82fe
 80025c0:	3c971547 	.word	0x3c971547

080025c4 <__ieee754_sqrt>:
 80025c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025c8:	ec55 4b10 	vmov	r4, r5, d0
 80025cc:	4e56      	ldr	r6, [pc, #344]	; (8002728 <__ieee754_sqrt+0x164>)
 80025ce:	43ae      	bics	r6, r5
 80025d0:	ee10 0a10 	vmov	r0, s0
 80025d4:	ee10 3a10 	vmov	r3, s0
 80025d8:	4629      	mov	r1, r5
 80025da:	462a      	mov	r2, r5
 80025dc:	d110      	bne.n	8002600 <__ieee754_sqrt+0x3c>
 80025de:	ee10 2a10 	vmov	r2, s0
 80025e2:	462b      	mov	r3, r5
 80025e4:	f7fd ffac 	bl	8000540 <__aeabi_dmul>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fdf0 	bl	80001d4 <__adddf3>
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	ec45 4b10 	vmov	d0, r4, r5
 80025fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002600:	2d00      	cmp	r5, #0
 8002602:	dc10      	bgt.n	8002626 <__ieee754_sqrt+0x62>
 8002604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002608:	4330      	orrs	r0, r6
 800260a:	d0f5      	beq.n	80025f8 <__ieee754_sqrt+0x34>
 800260c:	b15d      	cbz	r5, 8002626 <__ieee754_sqrt+0x62>
 800260e:	ee10 2a10 	vmov	r2, s0
 8002612:	462b      	mov	r3, r5
 8002614:	ee10 0a10 	vmov	r0, s0
 8002618:	f7fd fdda 	bl	80001d0 <__aeabi_dsub>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	f7fe f8b8 	bl	8000794 <__aeabi_ddiv>
 8002624:	e7e6      	b.n	80025f4 <__ieee754_sqrt+0x30>
 8002626:	1509      	asrs	r1, r1, #20
 8002628:	d076      	beq.n	8002718 <__ieee754_sqrt+0x154>
 800262a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800262e:	07ce      	lsls	r6, r1, #31
 8002630:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8002634:	bf5e      	ittt	pl
 8002636:	0fda      	lsrpl	r2, r3, #31
 8002638:	005b      	lslpl	r3, r3, #1
 800263a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800263e:	0fda      	lsrs	r2, r3, #31
 8002640:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8002644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002648:	2000      	movs	r0, #0
 800264a:	106d      	asrs	r5, r5, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	f04f 0e16 	mov.w	lr, #22
 8002652:	4684      	mov	ip, r0
 8002654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002658:	eb0c 0401 	add.w	r4, ip, r1
 800265c:	4294      	cmp	r4, r2
 800265e:	bfde      	ittt	le
 8002660:	1b12      	suble	r2, r2, r4
 8002662:	eb04 0c01 	addle.w	ip, r4, r1
 8002666:	1840      	addle	r0, r0, r1
 8002668:	0052      	lsls	r2, r2, #1
 800266a:	f1be 0e01 	subs.w	lr, lr, #1
 800266e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8002672:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8002676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800267a:	d1ed      	bne.n	8002658 <__ieee754_sqrt+0x94>
 800267c:	4671      	mov	r1, lr
 800267e:	2720      	movs	r7, #32
 8002680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8002684:	4562      	cmp	r2, ip
 8002686:	eb04 060e 	add.w	r6, r4, lr
 800268a:	dc02      	bgt.n	8002692 <__ieee754_sqrt+0xce>
 800268c:	d113      	bne.n	80026b6 <__ieee754_sqrt+0xf2>
 800268e:	429e      	cmp	r6, r3
 8002690:	d811      	bhi.n	80026b6 <__ieee754_sqrt+0xf2>
 8002692:	2e00      	cmp	r6, #0
 8002694:	eb06 0e04 	add.w	lr, r6, r4
 8002698:	da43      	bge.n	8002722 <__ieee754_sqrt+0x15e>
 800269a:	f1be 0f00 	cmp.w	lr, #0
 800269e:	db40      	blt.n	8002722 <__ieee754_sqrt+0x15e>
 80026a0:	f10c 0801 	add.w	r8, ip, #1
 80026a4:	eba2 020c 	sub.w	r2, r2, ip
 80026a8:	429e      	cmp	r6, r3
 80026aa:	bf88      	it	hi
 80026ac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80026b0:	1b9b      	subs	r3, r3, r6
 80026b2:	4421      	add	r1, r4
 80026b4:	46c4      	mov	ip, r8
 80026b6:	0052      	lsls	r2, r2, #1
 80026b8:	3f01      	subs	r7, #1
 80026ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80026be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80026c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80026c6:	d1dd      	bne.n	8002684 <__ieee754_sqrt+0xc0>
 80026c8:	4313      	orrs	r3, r2
 80026ca:	d006      	beq.n	80026da <__ieee754_sqrt+0x116>
 80026cc:	1c4c      	adds	r4, r1, #1
 80026ce:	bf13      	iteet	ne
 80026d0:	3101      	addne	r1, #1
 80026d2:	3001      	addeq	r0, #1
 80026d4:	4639      	moveq	r1, r7
 80026d6:	f021 0101 	bicne.w	r1, r1, #1
 80026da:	1043      	asrs	r3, r0, #1
 80026dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80026e0:	0849      	lsrs	r1, r1, #1
 80026e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80026e6:	07c2      	lsls	r2, r0, #31
 80026e8:	bf48      	it	mi
 80026ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80026ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80026f2:	460c      	mov	r4, r1
 80026f4:	463d      	mov	r5, r7
 80026f6:	e77f      	b.n	80025f8 <__ieee754_sqrt+0x34>
 80026f8:	0ada      	lsrs	r2, r3, #11
 80026fa:	3815      	subs	r0, #21
 80026fc:	055b      	lsls	r3, r3, #21
 80026fe:	2a00      	cmp	r2, #0
 8002700:	d0fa      	beq.n	80026f8 <__ieee754_sqrt+0x134>
 8002702:	02d7      	lsls	r7, r2, #11
 8002704:	d50a      	bpl.n	800271c <__ieee754_sqrt+0x158>
 8002706:	f1c1 0420 	rsb	r4, r1, #32
 800270a:	fa23 f404 	lsr.w	r4, r3, r4
 800270e:	1e4d      	subs	r5, r1, #1
 8002710:	408b      	lsls	r3, r1
 8002712:	4322      	orrs	r2, r4
 8002714:	1b41      	subs	r1, r0, r5
 8002716:	e788      	b.n	800262a <__ieee754_sqrt+0x66>
 8002718:	4608      	mov	r0, r1
 800271a:	e7f0      	b.n	80026fe <__ieee754_sqrt+0x13a>
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	3101      	adds	r1, #1
 8002720:	e7ef      	b.n	8002702 <__ieee754_sqrt+0x13e>
 8002722:	46e0      	mov	r8, ip
 8002724:	e7be      	b.n	80026a4 <__ieee754_sqrt+0xe0>
 8002726:	bf00      	nop
 8002728:	7ff00000 	.word	0x7ff00000

0800272c <fabs>:
 800272c:	ec51 0b10 	vmov	r0, r1, d0
 8002730:	ee10 2a10 	vmov	r2, s0
 8002734:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002738:	ec43 2b10 	vmov	d0, r2, r3
 800273c:	4770      	bx	lr

0800273e <finite>:
 800273e:	b082      	sub	sp, #8
 8002740:	ed8d 0b00 	vstr	d0, [sp]
 8002744:	9801      	ldr	r0, [sp, #4]
 8002746:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800274a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800274e:	0fc0      	lsrs	r0, r0, #31
 8002750:	b002      	add	sp, #8
 8002752:	4770      	bx	lr
 8002754:	0000      	movs	r0, r0
	...

08002758 <nan>:
 8002758:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002760 <nan+0x8>
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	00000000 	.word	0x00000000
 8002764:	7ff80000 	.word	0x7ff80000

08002768 <rint>:
 8002768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800276a:	ec51 0b10 	vmov	r0, r1, d0
 800276e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8002772:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8002776:	2e13      	cmp	r6, #19
 8002778:	ee10 4a10 	vmov	r4, s0
 800277c:	460b      	mov	r3, r1
 800277e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8002782:	dc58      	bgt.n	8002836 <rint+0xce>
 8002784:	2e00      	cmp	r6, #0
 8002786:	da2b      	bge.n	80027e0 <rint+0x78>
 8002788:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800278c:	4302      	orrs	r2, r0
 800278e:	d023      	beq.n	80027d8 <rint+0x70>
 8002790:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8002794:	4302      	orrs	r2, r0
 8002796:	4254      	negs	r4, r2
 8002798:	4314      	orrs	r4, r2
 800279a:	0c4b      	lsrs	r3, r1, #17
 800279c:	0b24      	lsrs	r4, r4, #12
 800279e:	045b      	lsls	r3, r3, #17
 80027a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80027a4:	ea44 0103 	orr.w	r1, r4, r3
 80027a8:	4b32      	ldr	r3, [pc, #200]	; (8002874 <rint+0x10c>)
 80027aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80027ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4630      	mov	r0, r6
 80027b8:	4639      	mov	r1, r7
 80027ba:	f7fd fd0b 	bl	80001d4 <__adddf3>
 80027be:	e9cd 0100 	strd	r0, r1, [sp]
 80027c2:	463b      	mov	r3, r7
 80027c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80027c8:	4632      	mov	r2, r6
 80027ca:	f7fd fd01 	bl	80001d0 <__aeabi_dsub>
 80027ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80027d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80027d6:	4639      	mov	r1, r7
 80027d8:	ec41 0b10 	vmov	d0, r0, r1
 80027dc:	b003      	add	sp, #12
 80027de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027e0:	4a25      	ldr	r2, [pc, #148]	; (8002878 <rint+0x110>)
 80027e2:	4132      	asrs	r2, r6
 80027e4:	ea01 0702 	and.w	r7, r1, r2
 80027e8:	4307      	orrs	r7, r0
 80027ea:	d0f5      	beq.n	80027d8 <rint+0x70>
 80027ec:	0851      	lsrs	r1, r2, #1
 80027ee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80027f2:	4314      	orrs	r4, r2
 80027f4:	d00c      	beq.n	8002810 <rint+0xa8>
 80027f6:	ea23 0201 	bic.w	r2, r3, r1
 80027fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027fe:	2e13      	cmp	r6, #19
 8002800:	fa43 f606 	asr.w	r6, r3, r6
 8002804:	bf0c      	ite	eq
 8002806:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800280a:	2400      	movne	r4, #0
 800280c:	ea42 0306 	orr.w	r3, r2, r6
 8002810:	4918      	ldr	r1, [pc, #96]	; (8002874 <rint+0x10c>)
 8002812:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8002816:	4622      	mov	r2, r4
 8002818:	e9d5 4500 	ldrd	r4, r5, [r5]
 800281c:	4620      	mov	r0, r4
 800281e:	4629      	mov	r1, r5
 8002820:	f7fd fcd8 	bl	80001d4 <__adddf3>
 8002824:	e9cd 0100 	strd	r0, r1, [sp]
 8002828:	e9dd 0100 	ldrd	r0, r1, [sp]
 800282c:	4622      	mov	r2, r4
 800282e:	462b      	mov	r3, r5
 8002830:	f7fd fcce 	bl	80001d0 <__aeabi_dsub>
 8002834:	e7d0      	b.n	80027d8 <rint+0x70>
 8002836:	2e33      	cmp	r6, #51	; 0x33
 8002838:	dd07      	ble.n	800284a <rint+0xe2>
 800283a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800283e:	d1cb      	bne.n	80027d8 <rint+0x70>
 8002840:	ee10 2a10 	vmov	r2, s0
 8002844:	f7fd fcc6 	bl	80001d4 <__adddf3>
 8002848:	e7c6      	b.n	80027d8 <rint+0x70>
 800284a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800284e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002852:	40d6      	lsrs	r6, r2
 8002854:	4230      	tst	r0, r6
 8002856:	d0bf      	beq.n	80027d8 <rint+0x70>
 8002858:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800285c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8002860:	bf1f      	itttt	ne
 8002862:	ea24 0101 	bicne.w	r1, r4, r1
 8002866:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800286a:	fa44 f202 	asrne.w	r2, r4, r2
 800286e:	ea41 0402 	orrne.w	r4, r1, r2
 8002872:	e7cd      	b.n	8002810 <rint+0xa8>
 8002874:	080029e0 	.word	0x080029e0
 8002878:	000fffff 	.word	0x000fffff
 800287c:	00000000 	.word	0x00000000

08002880 <scalbn>:
 8002880:	b570      	push	{r4, r5, r6, lr}
 8002882:	ec55 4b10 	vmov	r4, r5, d0
 8002886:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800288a:	4606      	mov	r6, r0
 800288c:	462b      	mov	r3, r5
 800288e:	b99a      	cbnz	r2, 80028b8 <scalbn+0x38>
 8002890:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8002894:	4323      	orrs	r3, r4
 8002896:	d036      	beq.n	8002906 <scalbn+0x86>
 8002898:	4b39      	ldr	r3, [pc, #228]	; (8002980 <scalbn+0x100>)
 800289a:	4629      	mov	r1, r5
 800289c:	ee10 0a10 	vmov	r0, s0
 80028a0:	2200      	movs	r2, #0
 80028a2:	f7fd fe4d 	bl	8000540 <__aeabi_dmul>
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <scalbn+0x104>)
 80028a8:	429e      	cmp	r6, r3
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	da10      	bge.n	80028d2 <scalbn+0x52>
 80028b0:	a32b      	add	r3, pc, #172	; (adr r3, 8002960 <scalbn+0xe0>)
 80028b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b6:	e03a      	b.n	800292e <scalbn+0xae>
 80028b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80028bc:	428a      	cmp	r2, r1
 80028be:	d10c      	bne.n	80028da <scalbn+0x5a>
 80028c0:	ee10 2a10 	vmov	r2, s0
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd fc84 	bl	80001d4 <__adddf3>
 80028cc:	4604      	mov	r4, r0
 80028ce:	460d      	mov	r5, r1
 80028d0:	e019      	b.n	8002906 <scalbn+0x86>
 80028d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80028d6:	460b      	mov	r3, r1
 80028d8:	3a36      	subs	r2, #54	; 0x36
 80028da:	4432      	add	r2, r6
 80028dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80028e0:	428a      	cmp	r2, r1
 80028e2:	dd08      	ble.n	80028f6 <scalbn+0x76>
 80028e4:	2d00      	cmp	r5, #0
 80028e6:	a120      	add	r1, pc, #128	; (adr r1, 8002968 <scalbn+0xe8>)
 80028e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028ec:	da1c      	bge.n	8002928 <scalbn+0xa8>
 80028ee:	a120      	add	r1, pc, #128	; (adr r1, 8002970 <scalbn+0xf0>)
 80028f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028f4:	e018      	b.n	8002928 <scalbn+0xa8>
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	dd08      	ble.n	800290c <scalbn+0x8c>
 80028fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80028fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002902:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002906:	ec45 4b10 	vmov	d0, r4, r5
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8002910:	da19      	bge.n	8002946 <scalbn+0xc6>
 8002912:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002916:	429e      	cmp	r6, r3
 8002918:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800291c:	dd0a      	ble.n	8002934 <scalbn+0xb4>
 800291e:	a112      	add	r1, pc, #72	; (adr r1, 8002968 <scalbn+0xe8>)
 8002920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e2      	bne.n	80028ee <scalbn+0x6e>
 8002928:	a30f      	add	r3, pc, #60	; (adr r3, 8002968 <scalbn+0xe8>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fe07 	bl	8000540 <__aeabi_dmul>
 8002932:	e7cb      	b.n	80028cc <scalbn+0x4c>
 8002934:	a10a      	add	r1, pc, #40	; (adr r1, 8002960 <scalbn+0xe0>)
 8002936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0b8      	beq.n	80028b0 <scalbn+0x30>
 800293e:	a10e      	add	r1, pc, #56	; (adr r1, 8002978 <scalbn+0xf8>)
 8002940:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002944:	e7b4      	b.n	80028b0 <scalbn+0x30>
 8002946:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800294a:	3236      	adds	r2, #54	; 0x36
 800294c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002950:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8002954:	4620      	mov	r0, r4
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <scalbn+0x108>)
 8002958:	2200      	movs	r2, #0
 800295a:	e7e8      	b.n	800292e <scalbn+0xae>
 800295c:	f3af 8000 	nop.w
 8002960:	c2f8f359 	.word	0xc2f8f359
 8002964:	01a56e1f 	.word	0x01a56e1f
 8002968:	8800759c 	.word	0x8800759c
 800296c:	7e37e43c 	.word	0x7e37e43c
 8002970:	8800759c 	.word	0x8800759c
 8002974:	fe37e43c 	.word	0xfe37e43c
 8002978:	c2f8f359 	.word	0xc2f8f359
 800297c:	81a56e1f 	.word	0x81a56e1f
 8002980:	43500000 	.word	0x43500000
 8002984:	ffff3cb0 	.word	0xffff3cb0
 8002988:	3c900000 	.word	0x3c900000

0800298c <_init>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr

08002998 <_fini>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr
