
chorus_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006358  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019e8  08006530  08006530  00016530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008014  08008014  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800801c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a18  2000005c  08008078  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20007a74  08008078  00027a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c467  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eca  00000000  00000000  0003c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c31c  00000000  00000000  000403bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  0004c6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001760  00000000  00000000  0004d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e70  00000000  00000000  0004edb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef62  00000000  00000000  00072c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dafb4  00000000  00000000  00091b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016cb36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000390c  00000000  00000000  0016cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00170488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006518 	.word	0x08006518

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08006518 	.word	0x08006518

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <selfrel_offset31>:
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	005a      	lsls	r2, r3, #1
 8000bb8:	bf4c      	ite	mi
 8000bba:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000bc2:	4418      	add	r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <search_EIT_table>:
 8000bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bcc:	b329      	cbz	r1, 8000c1a <search_EIT_table+0x52>
 8000bce:	1e4f      	subs	r7, r1, #1
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	4615      	mov	r5, r2
 8000bd4:	463e      	mov	r6, r7
 8000bd6:	f04f 0800 	mov.w	r8, #0
 8000bda:	eb08 0106 	add.w	r1, r8, r6
 8000bde:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000be2:	1049      	asrs	r1, r1, #1
 8000be4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000be8:	4648      	mov	r0, r9
 8000bea:	f7ff ffe3 	bl	8000bb4 <selfrel_offset31>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	00c8      	lsls	r0, r1, #3
 8000bf2:	3008      	adds	r0, #8
 8000bf4:	428f      	cmp	r7, r1
 8000bf6:	4420      	add	r0, r4
 8000bf8:	d009      	beq.n	8000c0e <search_EIT_table+0x46>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d809      	bhi.n	8000c12 <search_EIT_table+0x4a>
 8000bfe:	f7ff ffd9 	bl	8000bb4 <selfrel_offset31>
 8000c02:	3801      	subs	r0, #1
 8000c04:	42a8      	cmp	r0, r5
 8000c06:	d20a      	bcs.n	8000c1e <search_EIT_table+0x56>
 8000c08:	f101 0801 	add.w	r8, r1, #1
 8000c0c:	e7e5      	b.n	8000bda <search_EIT_table+0x12>
 8000c0e:	42ab      	cmp	r3, r5
 8000c10:	d905      	bls.n	8000c1e <search_EIT_table+0x56>
 8000c12:	4588      	cmp	r8, r1
 8000c14:	d001      	beq.n	8000c1a <search_EIT_table+0x52>
 8000c16:	1e4e      	subs	r6, r1, #1
 8000c18:	e7df      	b.n	8000bda <search_EIT_table+0x12>
 8000c1a:	f04f 0900 	mov.w	r9, #0
 8000c1e:	4648      	mov	r0, r9
 8000c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000c24 <__gnu_unwind_get_pr_addr>:
 8000c24:	2801      	cmp	r0, #1
 8000c26:	d007      	beq.n	8000c38 <__gnu_unwind_get_pr_addr+0x14>
 8000c28:	2802      	cmp	r0, #2
 8000c2a:	d007      	beq.n	8000c3c <__gnu_unwind_get_pr_addr+0x18>
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <__gnu_unwind_get_pr_addr+0x1c>)
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	4618      	moveq	r0, r3
 8000c34:	2000      	movne	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <__gnu_unwind_get_pr_addr+0x20>)
 8000c3a:	4770      	bx	lr
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <__gnu_unwind_get_pr_addr+0x24>)
 8000c3e:	4770      	bx	lr
 8000c40:	080012f9 	.word	0x080012f9
 8000c44:	080012fd 	.word	0x080012fd
 8000c48:	08001301 	.word	0x08001301

08000c4c <get_eit_entry>:
 8000c4c:	b530      	push	{r4, r5, lr}
 8000c4e:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <get_eit_entry+0x8c>)
 8000c50:	b083      	sub	sp, #12
 8000c52:	4604      	mov	r4, r0
 8000c54:	1e8d      	subs	r5, r1, #2
 8000c56:	b343      	cbz	r3, 8000caa <get_eit_entry+0x5e>
 8000c58:	a901      	add	r1, sp, #4
 8000c5a:	4628      	mov	r0, r5
 8000c5c:	f3af 8000 	nop.w
 8000c60:	b1f0      	cbz	r0, 8000ca0 <get_eit_entry+0x54>
 8000c62:	9901      	ldr	r1, [sp, #4]
 8000c64:	462a      	mov	r2, r5
 8000c66:	f7ff ffaf 	bl	8000bc8 <search_EIT_table>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	b1c0      	cbz	r0, 8000ca0 <get_eit_entry+0x54>
 8000c6e:	f7ff ffa1 	bl	8000bb4 <selfrel_offset31>
 8000c72:	684b      	ldr	r3, [r1, #4]
 8000c74:	64a0      	str	r0, [r4, #72]	; 0x48
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d02b      	beq.n	8000cd2 <get_eit_entry+0x86>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f101 0004 	add.w	r0, r1, #4
 8000c80:	db25      	blt.n	8000cce <get_eit_entry+0x82>
 8000c82:	f7ff ff97 	bl	8000bb4 <selfrel_offset31>
 8000c86:	2300      	movs	r3, #0
 8000c88:	6523      	str	r3, [r4, #80]	; 0x50
 8000c8a:	6803      	ldr	r3, [r0, #0]
 8000c8c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	db12      	blt.n	8000cb8 <get_eit_entry+0x6c>
 8000c92:	f7ff ff8f 	bl	8000bb4 <selfrel_offset31>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2000      	movs	r0, #0
 8000c9a:	6123      	str	r3, [r4, #16]
 8000c9c:	b003      	add	sp, #12
 8000c9e:	bd30      	pop	{r4, r5, pc}
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	2009      	movs	r0, #9
 8000ca4:	6123      	str	r3, [r4, #16]
 8000ca6:	b003      	add	sp, #12
 8000ca8:	bd30      	pop	{r4, r5, pc}
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <get_eit_entry+0x90>)
 8000cac:	490c      	ldr	r1, [pc, #48]	; (8000ce0 <get_eit_entry+0x94>)
 8000cae:	1ac9      	subs	r1, r1, r3
 8000cb0:	10c9      	asrs	r1, r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	9101      	str	r1, [sp, #4]
 8000cb6:	e7d5      	b.n	8000c64 <get_eit_entry+0x18>
 8000cb8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000cbc:	f7ff ffb2 	bl	8000c24 <__gnu_unwind_get_pr_addr>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	bf0c      	ite	eq
 8000cc4:	2009      	moveq	r0, #9
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	6123      	str	r3, [r4, #16]
 8000cca:	b003      	add	sp, #12
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e7da      	b.n	8000c88 <get_eit_entry+0x3c>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	e7e0      	b.n	8000c9a <get_eit_entry+0x4e>
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	08007f3c 	.word	0x08007f3c
 8000ce0:	08008014 	.word	0x08008014

08000ce4 <restore_non_core_regs>:
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	07da      	lsls	r2, r3, #31
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4604      	mov	r4, r0
 8000cec:	d406      	bmi.n	8000cfc <restore_non_core_regs+0x18>
 8000cee:	079b      	lsls	r3, r3, #30
 8000cf0:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000cf4:	d509      	bpl.n	8000d0a <restore_non_core_regs+0x26>
 8000cf6:	f000 fc71 	bl	80015dc <__gnu_Unwind_Restore_VFP_D>
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	0759      	lsls	r1, r3, #29
 8000cfe:	d509      	bpl.n	8000d14 <restore_non_core_regs+0x30>
 8000d00:	071a      	lsls	r2, r3, #28
 8000d02:	d50e      	bpl.n	8000d22 <restore_non_core_regs+0x3e>
 8000d04:	06db      	lsls	r3, r3, #27
 8000d06:	d513      	bpl.n	8000d30 <restore_non_core_regs+0x4c>
 8000d08:	bd10      	pop	{r4, pc}
 8000d0a:	f000 fc5f 	bl	80015cc <__gnu_Unwind_Restore_VFP>
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	0759      	lsls	r1, r3, #29
 8000d12:	d4f5      	bmi.n	8000d00 <restore_non_core_regs+0x1c>
 8000d14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000d18:	f000 fc68 	bl	80015ec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	071a      	lsls	r2, r3, #28
 8000d20:	d4f0      	bmi.n	8000d04 <restore_non_core_regs+0x20>
 8000d22:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000d26:	f000 fc69 	bl	80015fc <__gnu_Unwind_Restore_WMMXD>
 8000d2a:	6823      	ldr	r3, [r4, #0]
 8000d2c:	06db      	lsls	r3, r3, #27
 8000d2e:	d4eb      	bmi.n	8000d08 <restore_non_core_regs+0x24>
 8000d30:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d38:	f000 bca4 	b.w	8001684 <__gnu_Unwind_Restore_WMMXC>

08000d3c <__gnu_unwind_24bit.constprop.0>:
 8000d3c:	2009      	movs	r0, #9
 8000d3e:	4770      	bx	lr

08000d40 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000d40:	4603      	mov	r3, r0
 8000d42:	6800      	ldr	r0, [r0, #0]
 8000d44:	b100      	cbz	r0, 8000d48 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000d46:	4418      	add	r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <_Unwind_DebugHook>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <unwind_phase2>:
 8000d50:	b570      	push	{r4, r5, r6, lr}
 8000d52:	4604      	mov	r4, r0
 8000d54:	460e      	mov	r6, r1
 8000d56:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f7ff ff77 	bl	8000c4c <get_eit_entry>
 8000d5e:	4605      	mov	r5, r0
 8000d60:	b988      	cbnz	r0, 8000d86 <unwind_phase2+0x36>
 8000d62:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8000d64:	6162      	str	r2, [r4, #20]
 8000d66:	6923      	ldr	r3, [r4, #16]
 8000d68:	4632      	mov	r2, r6
 8000d6a:	4621      	mov	r1, r4
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	4798      	blx	r3
 8000d70:	2808      	cmp	r0, #8
 8000d72:	d0f0      	beq.n	8000d56 <unwind_phase2+0x6>
 8000d74:	2807      	cmp	r0, #7
 8000d76:	d106      	bne.n	8000d86 <unwind_phase2+0x36>
 8000d78:	4628      	mov	r0, r5
 8000d7a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000d7c:	f7ff ffe6 	bl	8000d4c <_Unwind_DebugHook>
 8000d80:	1d30      	adds	r0, r6, #4
 8000d82:	f000 fc17 	bl	80015b4 <__restore_core_regs>
 8000d86:	f005 fb6d 	bl	8006464 <abort>
 8000d8a:	bf00      	nop

08000d8c <unwind_phase2_forced>:
 8000d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	1d0d      	adds	r5, r1, #4
 8000d92:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8000d96:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8000d9a:	4607      	mov	r7, r0
 8000d9c:	4614      	mov	r4, r2
 8000d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000da4:	f10d 0c0c 	add.w	ip, sp, #12
 8000da8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000db8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dbc:	ae02      	add	r6, sp, #8
 8000dbe:	f04f 0e00 	mov.w	lr, #0
 8000dc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8000dc6:	f8c6 e000 	str.w	lr, [r6]
 8000dca:	e020      	b.n	8000e0e <unwind_phase2_forced+0x82>
 8000dcc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	a87a      	add	r0, sp, #488	; 0x1e8
 8000dd8:	f005 fb90 	bl	80064fc <memcpy>
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000de0:	4639      	mov	r1, r7
 8000de2:	4650      	mov	r0, sl
 8000de4:	4798      	blx	r3
 8000de6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000de8:	6473      	str	r3, [r6, #68]	; 0x44
 8000dea:	4621      	mov	r1, r4
 8000dec:	e9cd 6900 	strd	r6, r9, [sp]
 8000df0:	4605      	mov	r5, r0
 8000df2:	463b      	mov	r3, r7
 8000df4:	463a      	mov	r2, r7
 8000df6:	2001      	movs	r0, #1
 8000df8:	47c0      	blx	r8
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	b9e0      	cbnz	r0, 8000e38 <unwind_phase2_forced+0xac>
 8000dfe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000e02:	a97a      	add	r1, sp, #488	; 0x1e8
 8000e04:	4630      	mov	r0, r6
 8000e06:	f005 fb79 	bl	80064fc <memcpy>
 8000e0a:	2d08      	cmp	r5, #8
 8000e0c:	d11a      	bne.n	8000e44 <unwind_phase2_forced+0xb8>
 8000e0e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e10:	4638      	mov	r0, r7
 8000e12:	f7ff ff1b 	bl	8000c4c <get_eit_entry>
 8000e16:	3409      	adds	r4, #9
 8000e18:	fa5f fa84 	uxtb.w	sl, r4
 8000e1c:	4605      	mov	r5, r0
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d0d4      	beq.n	8000dcc <unwind_phase2_forced+0x40>
 8000e22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000e24:	6473      	str	r3, [r6, #68]	; 0x44
 8000e26:	463a      	mov	r2, r7
 8000e28:	e9cd 6900 	strd	r6, r9, [sp]
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	f04a 0110 	orr.w	r1, sl, #16
 8000e32:	2001      	movs	r0, #1
 8000e34:	47c0      	blx	r8
 8000e36:	b100      	cbz	r0, 8000e3a <unwind_phase2_forced+0xae>
 8000e38:	2509      	movs	r5, #9
 8000e3a:	4628      	mov	r0, r5
 8000e3c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	2d07      	cmp	r5, #7
 8000e46:	d1f7      	bne.n	8000e38 <unwind_phase2_forced+0xac>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000e4c:	f7ff ff7e 	bl	8000d4c <_Unwind_DebugHook>
 8000e50:	a803      	add	r0, sp, #12
 8000e52:	f000 fbaf 	bl	80015b4 <__restore_core_regs>
 8000e56:	bf00      	nop

08000e58 <_Unwind_GetCFA>:
 8000e58:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000e5a:	4770      	bx	lr

08000e5c <__gnu_Unwind_RaiseException>:
 8000e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000e60:	640b      	str	r3, [r1, #64]	; 0x40
 8000e62:	f101 0c04 	add.w	ip, r1, #4
 8000e66:	460e      	mov	r6, r1
 8000e68:	4605      	mov	r5, r0
 8000e6a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e6e:	b0f9      	sub	sp, #484	; 0x1e4
 8000e70:	ac01      	add	r4, sp, #4
 8000e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e80:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000e84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000e88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e8c:	9700      	str	r7, [sp, #0]
 8000e8e:	e006      	b.n	8000e9e <__gnu_Unwind_RaiseException+0x42>
 8000e90:	692b      	ldr	r3, [r5, #16]
 8000e92:	466a      	mov	r2, sp
 8000e94:	4629      	mov	r1, r5
 8000e96:	4798      	blx	r3
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	d108      	bne.n	8000eb0 <__gnu_Unwind_RaiseException+0x54>
 8000e9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000ea0:	4628      	mov	r0, r5
 8000ea2:	f7ff fed3 	bl	8000c4c <get_eit_entry>
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	d0f2      	beq.n	8000e90 <__gnu_Unwind_RaiseException+0x34>
 8000eaa:	2009      	movs	r0, #9
 8000eac:	b079      	add	sp, #484	; 0x1e4
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	4668      	mov	r0, sp
 8000eb2:	f7ff ff17 	bl	8000ce4 <restore_non_core_regs>
 8000eb6:	2c06      	cmp	r4, #6
 8000eb8:	d1f7      	bne.n	8000eaa <__gnu_Unwind_RaiseException+0x4e>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	f7ff ff47 	bl	8000d50 <unwind_phase2>
 8000ec2:	bf00      	nop

08000ec4 <__gnu_Unwind_ForcedUnwind>:
 8000ec4:	60c1      	str	r1, [r0, #12]
 8000ec6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000ec8:	6182      	str	r2, [r0, #24]
 8000eca:	6419      	str	r1, [r3, #64]	; 0x40
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	e75c      	b.n	8000d8c <unwind_phase2_forced>
 8000ed2:	bf00      	nop

08000ed4 <__gnu_Unwind_Resume>:
 8000ed4:	b570      	push	{r4, r5, r6, lr}
 8000ed6:	68c6      	ldr	r6, [r0, #12]
 8000ed8:	6943      	ldr	r3, [r0, #20]
 8000eda:	640b      	str	r3, [r1, #64]	; 0x40
 8000edc:	b9ae      	cbnz	r6, 8000f0a <__gnu_Unwind_Resume+0x36>
 8000ede:	6903      	ldr	r3, [r0, #16]
 8000ee0:	460a      	mov	r2, r1
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460d      	mov	r5, r1
 8000ee6:	4601      	mov	r1, r0
 8000ee8:	2002      	movs	r0, #2
 8000eea:	4798      	blx	r3
 8000eec:	2807      	cmp	r0, #7
 8000eee:	d005      	beq.n	8000efc <__gnu_Unwind_Resume+0x28>
 8000ef0:	2808      	cmp	r0, #8
 8000ef2:	d10f      	bne.n	8000f14 <__gnu_Unwind_Resume+0x40>
 8000ef4:	4629      	mov	r1, r5
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f7ff ff2a 	bl	8000d50 <unwind_phase2>
 8000efc:	4630      	mov	r0, r6
 8000efe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f00:	f7ff ff24 	bl	8000d4c <_Unwind_DebugHook>
 8000f04:	1d28      	adds	r0, r5, #4
 8000f06:	f000 fb55 	bl	80015b4 <__restore_core_regs>
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f7ff ff3e 	bl	8000d8c <unwind_phase2_forced>
 8000f10:	f005 faa8 	bl	8006464 <abort>
 8000f14:	f005 faa6 	bl	8006464 <abort>

08000f18 <__gnu_Unwind_Resume_or_Rethrow>:
 8000f18:	68c2      	ldr	r2, [r0, #12]
 8000f1a:	b11a      	cbz	r2, 8000f24 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000f1c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000f1e:	640a      	str	r2, [r1, #64]	; 0x40
 8000f20:	2200      	movs	r2, #0
 8000f22:	e733      	b.n	8000d8c <unwind_phase2_forced>
 8000f24:	e79a      	b.n	8000e5c <__gnu_Unwind_RaiseException>
 8000f26:	bf00      	nop

08000f28 <_Unwind_Complete>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <_Unwind_DeleteException>:
 8000f2c:	6883      	ldr	r3, [r0, #8]
 8000f2e:	4601      	mov	r1, r0
 8000f30:	b10b      	cbz	r3, 8000f36 <_Unwind_DeleteException+0xa>
 8000f32:	2001      	movs	r0, #1
 8000f34:	4718      	bx	r3
 8000f36:	4770      	bx	lr

08000f38 <_Unwind_VRS_Get>:
 8000f38:	2901      	cmp	r1, #1
 8000f3a:	d012      	beq.n	8000f62 <_Unwind_VRS_Get+0x2a>
 8000f3c:	d809      	bhi.n	8000f52 <_Unwind_VRS_Get+0x1a>
 8000f3e:	b973      	cbnz	r3, 8000f5e <_Unwind_VRS_Get+0x26>
 8000f40:	2a0f      	cmp	r2, #15
 8000f42:	d80c      	bhi.n	8000f5e <_Unwind_VRS_Get+0x26>
 8000f44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	6853      	ldr	r3, [r2, #4]
 8000f4c:	9a00      	ldr	r2, [sp, #0]
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4770      	bx	lr
 8000f52:	3903      	subs	r1, #3
 8000f54:	2901      	cmp	r1, #1
 8000f56:	bf94      	ite	ls
 8000f58:	2001      	movls	r0, #1
 8000f5a:	2002      	movhi	r0, #2
 8000f5c:	4770      	bx	lr
 8000f5e:	2002      	movs	r0, #2
 8000f60:	4770      	bx	lr
 8000f62:	4608      	mov	r0, r1
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <_Unwind_GetGR>:
 8000f68:	b500      	push	{lr}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	2300      	movs	r3, #0
 8000f70:	a903      	add	r1, sp, #12
 8000f72:	9100      	str	r1, [sp, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff ffdf 	bl	8000f38 <_Unwind_VRS_Get>
 8000f7a:	9803      	ldr	r0, [sp, #12]
 8000f7c:	b005      	add	sp, #20
 8000f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f82:	bf00      	nop

08000f84 <_Unwind_VRS_Set>:
 8000f84:	2901      	cmp	r1, #1
 8000f86:	d012      	beq.n	8000fae <_Unwind_VRS_Set+0x2a>
 8000f88:	d809      	bhi.n	8000f9e <_Unwind_VRS_Set+0x1a>
 8000f8a:	b973      	cbnz	r3, 8000faa <_Unwind_VRS_Set+0x26>
 8000f8c:	2a0f      	cmp	r2, #15
 8000f8e:	d80c      	bhi.n	8000faa <_Unwind_VRS_Set+0x26>
 8000f90:	9900      	ldr	r1, [sp, #0]
 8000f92:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000f96:	6809      	ldr	r1, [r1, #0]
 8000f98:	6051      	str	r1, [r2, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	4770      	bx	lr
 8000f9e:	3903      	subs	r1, #3
 8000fa0:	2901      	cmp	r1, #1
 8000fa2:	bf94      	ite	ls
 8000fa4:	2001      	movls	r0, #1
 8000fa6:	2002      	movhi	r0, #2
 8000fa8:	4770      	bx	lr
 8000faa:	2002      	movs	r0, #2
 8000fac:	4770      	bx	lr
 8000fae:	4608      	mov	r0, r1
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <_Unwind_SetGR>:
 8000fb4:	b510      	push	{r4, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	2300      	movs	r3, #0
 8000fba:	ac03      	add	r4, sp, #12
 8000fbc:	9203      	str	r2, [sp, #12]
 8000fbe:	9400      	str	r4, [sp, #0]
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff ffde 	bl	8000f84 <_Unwind_VRS_Set>
 8000fc8:	b004      	add	sp, #16
 8000fca:	bd10      	pop	{r4, pc}

08000fcc <__gnu_Unwind_Backtrace>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	f102 0c04 	add.w	ip, r2, #4
 8000fd6:	4605      	mov	r5, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fde:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000fe2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000fe6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000fea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000fee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ff2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ff6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ffa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000ffe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001002:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8001006:	9616      	str	r6, [sp, #88]	; 0x58
 8001008:	e010      	b.n	800102c <__gnu_Unwind_Backtrace+0x60>
 800100a:	f7ff ffd3 	bl	8000fb4 <_Unwind_SetGR>
 800100e:	4621      	mov	r1, r4
 8001010:	a816      	add	r0, sp, #88	; 0x58
 8001012:	47a8      	blx	r5
 8001014:	4603      	mov	r3, r0
 8001016:	aa16      	add	r2, sp, #88	; 0x58
 8001018:	4669      	mov	r1, sp
 800101a:	2008      	movs	r0, #8
 800101c:	b983      	cbnz	r3, 8001040 <__gnu_Unwind_Backtrace+0x74>
 800101e:	9b04      	ldr	r3, [sp, #16]
 8001020:	4798      	blx	r3
 8001022:	2805      	cmp	r0, #5
 8001024:	4606      	mov	r6, r0
 8001026:	d00c      	beq.n	8001042 <__gnu_Unwind_Backtrace+0x76>
 8001028:	2809      	cmp	r0, #9
 800102a:	d009      	beq.n	8001040 <__gnu_Unwind_Backtrace+0x74>
 800102c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800102e:	4668      	mov	r0, sp
 8001030:	f7ff fe0c 	bl	8000c4c <get_eit_entry>
 8001034:	4603      	mov	r3, r0
 8001036:	466a      	mov	r2, sp
 8001038:	210c      	movs	r1, #12
 800103a:	a816      	add	r0, sp, #88	; 0x58
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0e4      	beq.n	800100a <__gnu_Unwind_Backtrace+0x3e>
 8001040:	2609      	movs	r6, #9
 8001042:	a816      	add	r0, sp, #88	; 0x58
 8001044:	f7ff fe4e 	bl	8000ce4 <restore_non_core_regs>
 8001048:	4630      	mov	r0, r6
 800104a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800104e:	bd70      	pop	{r4, r5, r6, pc}

08001050 <__gnu_unwind_pr_common>:
 8001050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001054:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	461e      	mov	r6, r3
 800105a:	f854 3b04 	ldr.w	r3, [r4], #4
 800105e:	9406      	str	r4, [sp, #24]
 8001060:	460d      	mov	r5, r1
 8001062:	4617      	mov	r7, r2
 8001064:	f000 0803 	and.w	r8, r0, #3
 8001068:	2e00      	cmp	r6, #0
 800106a:	d079      	beq.n	8001160 <__gnu_unwind_pr_common+0x110>
 800106c:	0c1a      	lsrs	r2, r3, #16
 800106e:	f88d 201d 	strb.w	r2, [sp, #29]
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	9305      	str	r3, [sp, #20]
 8001078:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800107c:	2302      	movs	r3, #2
 800107e:	f88d 301c 	strb.w	r3, [sp, #28]
 8001082:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001084:	f1b8 0f02 	cmp.w	r8, #2
 8001088:	bf08      	it	eq
 800108a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800108c:	f013 0301 	ands.w	r3, r3, #1
 8001090:	d00c      	beq.n	80010ac <__gnu_unwind_pr_common+0x5c>
 8001092:	a905      	add	r1, sp, #20
 8001094:	4638      	mov	r0, r7
 8001096:	f000 fb8f 	bl	80017b8 <__gnu_unwind_execute>
 800109a:	b918      	cbnz	r0, 80010a4 <__gnu_unwind_pr_common+0x54>
 800109c:	2008      	movs	r0, #8
 800109e:	b009      	add	sp, #36	; 0x24
 80010a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010a4:	2009      	movs	r0, #9
 80010a6:	b009      	add	sp, #36	; 0x24
 80010a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010ac:	f8d4 a000 	ldr.w	sl, [r4]
 80010b0:	f1ba 0f00 	cmp.w	sl, #0
 80010b4:	d0ed      	beq.n	8001092 <__gnu_unwind_pr_common+0x42>
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f000 0308 	and.w	r3, r0, #8
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	2e02      	cmp	r6, #2
 80010c0:	d04a      	beq.n	8001158 <__gnu_unwind_pr_common+0x108>
 80010c2:	f8b4 a000 	ldrh.w	sl, [r4]
 80010c6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80010ca:	3404      	adds	r4, #4
 80010cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80010ce:	f029 0b01 	bic.w	fp, r9, #1
 80010d2:	210f      	movs	r1, #15
 80010d4:	4638      	mov	r0, r7
 80010d6:	449b      	add	fp, r3
 80010d8:	f7ff ff46 	bl	8000f68 <_Unwind_GetGR>
 80010dc:	4583      	cmp	fp, r0
 80010de:	d839      	bhi.n	8001154 <__gnu_unwind_pr_common+0x104>
 80010e0:	f02a 0201 	bic.w	r2, sl, #1
 80010e4:	445a      	add	r2, fp
 80010e6:	4282      	cmp	r2, r0
 80010e8:	bf94      	ite	ls
 80010ea:	2200      	movls	r2, #0
 80010ec:	2201      	movhi	r2, #1
 80010ee:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	f00a 0a01 	and.w	sl, sl, #1
 80010fa:	ea43 030a 	orr.w	r3, r3, sl
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d04b      	beq.n	800119a <__gnu_unwind_pr_common+0x14a>
 8001102:	2b02      	cmp	r3, #2
 8001104:	d032      	beq.n	800116c <__gnu_unwind_pr_common+0x11c>
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1cc      	bne.n	80010a4 <__gnu_unwind_pr_common+0x54>
 800110a:	f1b8 0f00 	cmp.w	r8, #0
 800110e:	d002      	beq.n	8001116 <__gnu_unwind_pr_common+0xc6>
 8001110:	2a00      	cmp	r2, #0
 8001112:	f040 80cd 	bne.w	80012b0 <__gnu_unwind_pr_common+0x260>
 8001116:	3404      	adds	r4, #4
 8001118:	f8d4 a000 	ldr.w	sl, [r4]
 800111c:	f1ba 0f00 	cmp.w	sl, #0
 8001120:	d1cd      	bne.n	80010be <__gnu_unwind_pr_common+0x6e>
 8001122:	a905      	add	r1, sp, #20
 8001124:	4638      	mov	r0, r7
 8001126:	f000 fb47 	bl	80017b8 <__gnu_unwind_execute>
 800112a:	2800      	cmp	r0, #0
 800112c:	d1ba      	bne.n	80010a4 <__gnu_unwind_pr_common+0x54>
 800112e:	9b01      	ldr	r3, [sp, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0b3      	beq.n	800109c <__gnu_unwind_pr_common+0x4c>
 8001134:	210f      	movs	r1, #15
 8001136:	4638      	mov	r0, r7
 8001138:	f7ff ff16 	bl	8000f68 <_Unwind_GetGR>
 800113c:	210e      	movs	r1, #14
 800113e:	4602      	mov	r2, r0
 8001140:	4638      	mov	r0, r7
 8001142:	f7ff ff37 	bl	8000fb4 <_Unwind_SetGR>
 8001146:	4638      	mov	r0, r7
 8001148:	4a6a      	ldr	r2, [pc, #424]	; (80012f4 <__gnu_unwind_pr_common+0x2a4>)
 800114a:	210f      	movs	r1, #15
 800114c:	f7ff ff32 	bl	8000fb4 <_Unwind_SetGR>
 8001150:	2007      	movs	r0, #7
 8001152:	e7a8      	b.n	80010a6 <__gnu_unwind_pr_common+0x56>
 8001154:	2200      	movs	r2, #0
 8001156:	e7ca      	b.n	80010ee <__gnu_unwind_pr_common+0x9e>
 8001158:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800115c:	3408      	adds	r4, #8
 800115e:	e7b5      	b.n	80010cc <__gnu_unwind_pr_common+0x7c>
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	9305      	str	r3, [sp, #20]
 8001164:	f88d 601d 	strb.w	r6, [sp, #29]
 8001168:	2303      	movs	r3, #3
 800116a:	e788      	b.n	800107e <__gnu_unwind_pr_common+0x2e>
 800116c:	f8d4 9000 	ldr.w	r9, [r4]
 8001170:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8001174:	f1b8 0f00 	cmp.w	r8, #0
 8001178:	d146      	bne.n	8001208 <__gnu_unwind_pr_common+0x1b8>
 800117a:	b12a      	cbz	r2, 8001188 <__gnu_unwind_pr_common+0x138>
 800117c:	9b02      	ldr	r3, [sp, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d05b      	beq.n	800123a <__gnu_unwind_pr_common+0x1ea>
 8001182:	f1bb 0f00 	cmp.w	fp, #0
 8001186:	d073      	beq.n	8001270 <__gnu_unwind_pr_common+0x220>
 8001188:	f1b9 0f00 	cmp.w	r9, #0
 800118c:	da00      	bge.n	8001190 <__gnu_unwind_pr_common+0x140>
 800118e:	3404      	adds	r4, #4
 8001190:	f10b 0b01 	add.w	fp, fp, #1
 8001194:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8001198:	e7be      	b.n	8001118 <__gnu_unwind_pr_common+0xc8>
 800119a:	f1b8 0f00 	cmp.w	r8, #0
 800119e:	d119      	bne.n	80011d4 <__gnu_unwind_pr_common+0x184>
 80011a0:	b1b2      	cbz	r2, 80011d0 <__gnu_unwind_pr_common+0x180>
 80011a2:	6861      	ldr	r1, [r4, #4]
 80011a4:	6822      	ldr	r2, [r4, #0]
 80011a6:	1c88      	adds	r0, r1, #2
 80011a8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 80011ac:	f43f af7a 	beq.w	80010a4 <__gnu_unwind_pr_common+0x54>
 80011b0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80011b4:	3101      	adds	r1, #1
 80011b6:	9304      	str	r3, [sp, #16]
 80011b8:	f000 808e 	beq.w	80012d8 <__gnu_unwind_pr_common+0x288>
 80011bc:	1d20      	adds	r0, r4, #4
 80011be:	f7ff fdbf 	bl	8000d40 <_Unwind_decode_typeinfo_ptr.constprop.0>
 80011c2:	ab04      	add	r3, sp, #16
 80011c4:	4601      	mov	r1, r0
 80011c6:	4628      	mov	r0, r5
 80011c8:	f3af 8000 	nop.w
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d159      	bne.n	8001284 <__gnu_unwind_pr_common+0x234>
 80011d0:	3408      	adds	r4, #8
 80011d2:	e7a1      	b.n	8001118 <__gnu_unwind_pr_common+0xc8>
 80011d4:	210d      	movs	r1, #13
 80011d6:	4638      	mov	r0, r7
 80011d8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80011dc:	f7ff fec4 	bl	8000f68 <_Unwind_GetGR>
 80011e0:	4581      	cmp	r9, r0
 80011e2:	d1f5      	bne.n	80011d0 <__gnu_unwind_pr_common+0x180>
 80011e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80011e6:	429c      	cmp	r4, r3
 80011e8:	d1f2      	bne.n	80011d0 <__gnu_unwind_pr_common+0x180>
 80011ea:	4620      	mov	r0, r4
 80011ec:	f7ff fce2 	bl	8000bb4 <selfrel_offset31>
 80011f0:	210f      	movs	r1, #15
 80011f2:	4602      	mov	r2, r0
 80011f4:	4638      	mov	r0, r7
 80011f6:	f7ff fedd 	bl	8000fb4 <_Unwind_SetGR>
 80011fa:	4638      	mov	r0, r7
 80011fc:	462a      	mov	r2, r5
 80011fe:	2100      	movs	r1, #0
 8001200:	f7ff fed8 	bl	8000fb4 <_Unwind_SetGR>
 8001204:	2007      	movs	r0, #7
 8001206:	e74e      	b.n	80010a6 <__gnu_unwind_pr_common+0x56>
 8001208:	210d      	movs	r1, #13
 800120a:	4638      	mov	r0, r7
 800120c:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8001210:	f7ff feaa 	bl	8000f68 <_Unwind_GetGR>
 8001214:	4582      	cmp	sl, r0
 8001216:	d1b7      	bne.n	8001188 <__gnu_unwind_pr_common+0x138>
 8001218:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800121a:	429c      	cmp	r4, r3
 800121c:	d1b4      	bne.n	8001188 <__gnu_unwind_pr_common+0x138>
 800121e:	2304      	movs	r3, #4
 8001220:	2200      	movs	r2, #0
 8001222:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8001226:	18e3      	adds	r3, r4, r3
 8001228:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 800122c:	636b      	str	r3, [r5, #52]	; 0x34
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db59      	blt.n	80012e8 <__gnu_unwind_pr_common+0x298>
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	e7aa      	b.n	8001190 <__gnu_unwind_pr_common+0x140>
 800123a:	4699      	mov	r9, r3
 800123c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001240:	f8cd 800c 	str.w	r8, [sp, #12]
 8001244:	f104 0a04 	add.w	sl, r4, #4
 8001248:	46b0      	mov	r8, r6
 800124a:	461e      	mov	r6, r3
 800124c:	e00e      	b.n	800126c <__gnu_unwind_pr_common+0x21c>
 800124e:	4650      	mov	r0, sl
 8001250:	9604      	str	r6, [sp, #16]
 8001252:	f7ff fd75 	bl	8000d40 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8001256:	2200      	movs	r2, #0
 8001258:	4601      	mov	r1, r0
 800125a:	ab04      	add	r3, sp, #16
 800125c:	4628      	mov	r0, r5
 800125e:	f109 0901 	add.w	r9, r9, #1
 8001262:	f10a 0a04 	add.w	sl, sl, #4
 8001266:	f3af 8000 	nop.w
 800126a:	b9d8      	cbnz	r0, 80012a4 <__gnu_unwind_pr_common+0x254>
 800126c:	45d9      	cmp	r9, fp
 800126e:	d1ee      	bne.n	800124e <__gnu_unwind_pr_common+0x1fe>
 8001270:	210d      	movs	r1, #13
 8001272:	4638      	mov	r0, r7
 8001274:	f7ff fe78 	bl	8000f68 <_Unwind_GetGR>
 8001278:	9b04      	ldr	r3, [sp, #16]
 800127a:	6228      	str	r0, [r5, #32]
 800127c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8001280:	2006      	movs	r0, #6
 8001282:	e710      	b.n	80010a6 <__gnu_unwind_pr_common+0x56>
 8001284:	4681      	mov	r9, r0
 8001286:	210d      	movs	r1, #13
 8001288:	4638      	mov	r0, r7
 800128a:	f7ff fe6d 	bl	8000f68 <_Unwind_GetGR>
 800128e:	f1b9 0f02 	cmp.w	r9, #2
 8001292:	bf04      	itt	eq
 8001294:	462b      	moveq	r3, r5
 8001296:	9a04      	ldreq	r2, [sp, #16]
 8001298:	6228      	str	r0, [r5, #32]
 800129a:	bf14      	ite	ne
 800129c:	9b04      	ldrne	r3, [sp, #16]
 800129e:	f843 2f2c 	streq.w	r2, [r3, #44]!
 80012a2:	e7eb      	b.n	800127c <__gnu_unwind_pr_common+0x22c>
 80012a4:	4646      	mov	r6, r8
 80012a6:	f8d4 9000 	ldr.w	r9, [r4]
 80012aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80012ae:	e76b      	b.n	8001188 <__gnu_unwind_pr_common+0x138>
 80012b0:	4620      	mov	r0, r4
 80012b2:	f7ff fc7f 	bl	8000bb4 <selfrel_offset31>
 80012b6:	3404      	adds	r4, #4
 80012b8:	4602      	mov	r2, r0
 80012ba:	63ac      	str	r4, [r5, #56]	; 0x38
 80012bc:	4628      	mov	r0, r5
 80012be:	4614      	mov	r4, r2
 80012c0:	f3af 8000 	nop.w
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f43f aeed 	beq.w	80010a4 <__gnu_unwind_pr_common+0x54>
 80012ca:	4638      	mov	r0, r7
 80012cc:	4622      	mov	r2, r4
 80012ce:	210f      	movs	r1, #15
 80012d0:	f7ff fe70 	bl	8000fb4 <_Unwind_SetGR>
 80012d4:	2007      	movs	r0, #7
 80012d6:	e6e6      	b.n	80010a6 <__gnu_unwind_pr_common+0x56>
 80012d8:	210d      	movs	r1, #13
 80012da:	4638      	mov	r0, r7
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f7ff fe43 	bl	8000f68 <_Unwind_GetGR>
 80012e2:	9b01      	ldr	r3, [sp, #4]
 80012e4:	6228      	str	r0, [r5, #32]
 80012e6:	e7c9      	b.n	800127c <__gnu_unwind_pr_common+0x22c>
 80012e8:	f10b 0001 	add.w	r0, fp, #1
 80012ec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80012f0:	e77c      	b.n	80011ec <__gnu_unwind_pr_common+0x19c>
 80012f2:	bf00      	nop
 80012f4:	00000000 	.word	0x00000000

080012f8 <__aeabi_unwind_cpp_pr0>:
 80012f8:	2300      	movs	r3, #0
 80012fa:	e6a9      	b.n	8001050 <__gnu_unwind_pr_common>

080012fc <__aeabi_unwind_cpp_pr1>:
 80012fc:	2301      	movs	r3, #1
 80012fe:	e6a7      	b.n	8001050 <__gnu_unwind_pr_common>

08001300 <__aeabi_unwind_cpp_pr2>:
 8001300:	2302      	movs	r3, #2
 8001302:	e6a5      	b.n	8001050 <__gnu_unwind_pr_common>

08001304 <_Unwind_VRS_Pop>:
 8001304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001308:	4606      	mov	r6, r0
 800130a:	b0c3      	sub	sp, #268	; 0x10c
 800130c:	4691      	mov	r9, r2
 800130e:	461c      	mov	r4, r3
 8001310:	2904      	cmp	r1, #4
 8001312:	f200 809b 	bhi.w	800144c <_Unwind_VRS_Pop+0x148>
 8001316:	e8df f001 	tbb	[pc, r1]
 800131a:	567b      	.short	0x567b
 800131c:	2e99      	.short	0x2e99
 800131e:	03          	.byte	0x03
 800131f:	00          	.byte	0x00
 8001320:	2c00      	cmp	r4, #0
 8001322:	f040 8093 	bne.w	800144c <_Unwind_VRS_Pop+0x148>
 8001326:	2a10      	cmp	r2, #16
 8001328:	f200 8090 	bhi.w	800144c <_Unwind_VRS_Pop+0x148>
 800132c:	6803      	ldr	r3, [r0, #0]
 800132e:	06dc      	lsls	r4, r3, #27
 8001330:	f100 80f3 	bmi.w	800151a <_Unwind_VRS_Pop+0x216>
 8001334:	af20      	add	r7, sp, #128	; 0x80
 8001336:	4638      	mov	r0, r7
 8001338:	f000 f9ae 	bl	8001698 <__gnu_Unwind_Save_WMMXC>
 800133c:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800133e:	4639      	mov	r1, r7
 8001340:	2300      	movs	r3, #0
 8001342:	f04f 0c01 	mov.w	ip, #1
 8001346:	fa0c f203 	lsl.w	r2, ip, r3
 800134a:	ea12 0f09 	tst.w	r2, r9
 800134e:	4620      	mov	r0, r4
 8001350:	f103 0301 	add.w	r3, r3, #1
 8001354:	d003      	beq.n	800135e <_Unwind_VRS_Pop+0x5a>
 8001356:	f850 2b04 	ldr.w	r2, [r0], #4
 800135a:	600a      	str	r2, [r1, #0]
 800135c:	4604      	mov	r4, r0
 800135e:	2b04      	cmp	r3, #4
 8001360:	f101 0104 	add.w	r1, r1, #4
 8001364:	d1ef      	bne.n	8001346 <_Unwind_VRS_Pop+0x42>
 8001366:	4638      	mov	r0, r7
 8001368:	63b4      	str	r4, [r6, #56]	; 0x38
 800136a:	f000 f98b 	bl	8001684 <__gnu_Unwind_Restore_WMMXC>
 800136e:	2000      	movs	r0, #0
 8001370:	b043      	add	sp, #268	; 0x10c
 8001372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001376:	2c03      	cmp	r4, #3
 8001378:	d168      	bne.n	800144c <_Unwind_VRS_Pop+0x148>
 800137a:	b294      	uxth	r4, r2
 800137c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8001380:	2b10      	cmp	r3, #16
 8001382:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8001386:	d861      	bhi.n	800144c <_Unwind_VRS_Pop+0x148>
 8001388:	6803      	ldr	r3, [r0, #0]
 800138a:	071d      	lsls	r5, r3, #28
 800138c:	f100 80cd 	bmi.w	800152a <_Unwind_VRS_Pop+0x226>
 8001390:	af20      	add	r7, sp, #128	; 0x80
 8001392:	4638      	mov	r0, r7
 8001394:	f000 f954 	bl	8001640 <__gnu_Unwind_Save_WMMXD>
 8001398:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800139a:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 800139e:	b154      	cbz	r4, 80013b6 <_Unwind_VRS_Pop+0xb2>
 80013a0:	460b      	mov	r3, r1
 80013a2:	1ad0      	subs	r0, r2, r3
 80013a4:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80013a8:	00e4      	lsls	r4, r4, #3
 80013aa:	581d      	ldr	r5, [r3, r0]
 80013ac:	f843 5b04 	str.w	r5, [r3], #4
 80013b0:	428b      	cmp	r3, r1
 80013b2:	d1fa      	bne.n	80013aa <_Unwind_VRS_Pop+0xa6>
 80013b4:	4422      	add	r2, r4
 80013b6:	4638      	mov	r0, r7
 80013b8:	63b2      	str	r2, [r6, #56]	; 0x38
 80013ba:	f000 f91f 	bl	80015fc <__gnu_Unwind_Restore_WMMXD>
 80013be:	2000      	movs	r0, #0
 80013c0:	b043      	add	sp, #268	; 0x10c
 80013c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013c6:	2c01      	cmp	r4, #1
 80013c8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80013cc:	fa1f f982 	uxth.w	r9, r2
 80013d0:	d038      	beq.n	8001444 <_Unwind_VRS_Pop+0x140>
 80013d2:	2c05      	cmp	r4, #5
 80013d4:	d13a      	bne.n	800144c <_Unwind_VRS_Pop+0x148>
 80013d6:	eb08 0309 	add.w	r3, r8, r9
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d836      	bhi.n	800144c <_Unwind_VRS_Pop+0x148>
 80013de:	f1b8 0f0f 	cmp.w	r8, #15
 80013e2:	d976      	bls.n	80014d2 <_Unwind_VRS_Pop+0x1ce>
 80013e4:	f1b9 0f00 	cmp.w	r9, #0
 80013e8:	f040 8083 	bne.w	80014f2 <_Unwind_VRS_Pop+0x1ee>
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80b      	bhi.n	8001408 <_Unwind_VRS_Pop+0x104>
 80013f0:	6833      	ldr	r3, [r6, #0]
 80013f2:	07d8      	lsls	r0, r3, #31
 80013f4:	d508      	bpl.n	8001408 <_Unwind_VRS_Pop+0x104>
 80013f6:	4630      	mov	r0, r6
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	f840 3b48 	str.w	r3, [r0], #72
 8001404:	f000 f8ee 	bl	80015e4 <__gnu_Unwind_Save_VFP_D>
 8001408:	2000      	movs	r0, #0
 800140a:	b043      	add	sp, #268	; 0x10c
 800140c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001410:	b9e4      	cbnz	r4, 800144c <_Unwind_VRS_Pop+0x148>
 8001412:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8001414:	4623      	mov	r3, r4
 8001416:	fa1f fc82 	uxth.w	ip, r2
 800141a:	2001      	movs	r0, #1
 800141c:	1d34      	adds	r4, r6, #4
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	ea12 0f0c 	tst.w	r2, ip
 8001426:	4639      	mov	r1, r7
 8001428:	d004      	beq.n	8001434 <_Unwind_VRS_Pop+0x130>
 800142a:	f851 2b04 	ldr.w	r2, [r1], #4
 800142e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8001432:	460f      	mov	r7, r1
 8001434:	3301      	adds	r3, #1
 8001436:	2b10      	cmp	r3, #16
 8001438:	d1f1      	bne.n	800141e <_Unwind_VRS_Pop+0x11a>
 800143a:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 800143e:	d1e3      	bne.n	8001408 <_Unwind_VRS_Pop+0x104>
 8001440:	63b7      	str	r7, [r6, #56]	; 0x38
 8001442:	e004      	b.n	800144e <_Unwind_VRS_Pop+0x14a>
 8001444:	eb08 0309 	add.w	r3, r8, r9
 8001448:	2b10      	cmp	r3, #16
 800144a:	d903      	bls.n	8001454 <_Unwind_VRS_Pop+0x150>
 800144c:	2002      	movs	r0, #2
 800144e:	b043      	add	sp, #268	; 0x10c
 8001450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001454:	f1b8 0f0f 	cmp.w	r8, #15
 8001458:	d8f8      	bhi.n	800144c <_Unwind_VRS_Pop+0x148>
 800145a:	6833      	ldr	r3, [r6, #0]
 800145c:	07da      	lsls	r2, r3, #31
 800145e:	d506      	bpl.n	800146e <_Unwind_VRS_Pop+0x16a>
 8001460:	4630      	mov	r0, r6
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	f840 3b48 	str.w	r3, [r0], #72
 800146a:	f000 f8b3 	bl	80015d4 <__gnu_Unwind_Save_VFP>
 800146e:	af20      	add	r7, sp, #128	; 0x80
 8001470:	4638      	mov	r0, r7
 8001472:	464d      	mov	r5, r9
 8001474:	f000 f8ae 	bl	80015d4 <__gnu_Unwind_Save_VFP>
 8001478:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800147a:	2d00      	cmp	r5, #0
 800147c:	d05e      	beq.n	800153c <_Unwind_VRS_Pop+0x238>
 800147e:	f04f 0900 	mov.w	r9, #0
 8001482:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8001486:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 800148a:	3904      	subs	r1, #4
 800148c:	f852 0b04 	ldr.w	r0, [r2], #4
 8001490:	f841 0f04 	str.w	r0, [r1, #4]!
 8001494:	429a      	cmp	r2, r3
 8001496:	d1f9      	bne.n	800148c <_Unwind_VRS_Pop+0x188>
 8001498:	f1b9 0f00 	cmp.w	r9, #0
 800149c:	d054      	beq.n	8001548 <_Unwind_VRS_Pop+0x244>
 800149e:	466f      	mov	r7, sp
 80014a0:	4641      	mov	r1, r8
 80014a2:	2910      	cmp	r1, #16
 80014a4:	bf38      	it	cc
 80014a6:	2110      	movcc	r1, #16
 80014a8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80014ac:	3984      	subs	r1, #132	; 0x84
 80014ae:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 80014b2:	f853 5b04 	ldr.w	r5, [r3], #4
 80014b6:	f841 5f04 	str.w	r5, [r1, #4]!
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d1f9      	bne.n	80014b2 <_Unwind_VRS_Pop+0x1ae>
 80014be:	2c01      	cmp	r4, #1
 80014c0:	d03b      	beq.n	800153a <_Unwind_VRS_Pop+0x236>
 80014c2:	f1b8 0f0f 	cmp.w	r8, #15
 80014c6:	63b2      	str	r2, [r6, #56]	; 0x38
 80014c8:	d958      	bls.n	800157c <_Unwind_VRS_Pop+0x278>
 80014ca:	4638      	mov	r0, r7
 80014cc:	f000 f88e 	bl	80015ec <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80014d0:	e79a      	b.n	8001408 <_Unwind_VRS_Pop+0x104>
 80014d2:	2b10      	cmp	r3, #16
 80014d4:	d954      	bls.n	8001580 <_Unwind_VRS_Pop+0x27c>
 80014d6:	6832      	ldr	r2, [r6, #0]
 80014d8:	07d7      	lsls	r7, r2, #31
 80014da:	f1a3 0910 	sub.w	r9, r3, #16
 80014de:	d509      	bpl.n	80014f4 <_Unwind_VRS_Pop+0x1f0>
 80014e0:	f022 0301 	bic.w	r3, r2, #1
 80014e4:	4630      	mov	r0, r6
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	f840 3b48 	str.w	r3, [r0], #72
 80014ee:	f000 f879 	bl	80015e4 <__gnu_Unwind_Save_VFP_D>
 80014f2:	6832      	ldr	r2, [r6, #0]
 80014f4:	0753      	lsls	r3, r2, #29
 80014f6:	d439      	bmi.n	800156c <_Unwind_VRS_Pop+0x268>
 80014f8:	f1b8 0f0f 	cmp.w	r8, #15
 80014fc:	d802      	bhi.n	8001504 <_Unwind_VRS_Pop+0x200>
 80014fe:	a820      	add	r0, sp, #128	; 0x80
 8001500:	f000 f870 	bl	80015e4 <__gnu_Unwind_Save_VFP_D>
 8001504:	466f      	mov	r7, sp
 8001506:	4638      	mov	r0, r7
 8001508:	f1c8 0510 	rsb	r5, r8, #16
 800150c:	f000 f872 	bl	80015f4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001510:	2d00      	cmp	r5, #0
 8001512:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8001514:	dd28      	ble.n	8001568 <_Unwind_VRS_Pop+0x264>
 8001516:	af20      	add	r7, sp, #128	; 0x80
 8001518:	e7b3      	b.n	8001482 <_Unwind_VRS_Pop+0x17e>
 800151a:	f023 0310 	bic.w	r3, r3, #16
 800151e:	6003      	str	r3, [r0, #0]
 8001520:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8001524:	f000 f8b8 	bl	8001698 <__gnu_Unwind_Save_WMMXC>
 8001528:	e704      	b.n	8001334 <_Unwind_VRS_Pop+0x30>
 800152a:	f023 0308 	bic.w	r3, r3, #8
 800152e:	6003      	str	r3, [r0, #0]
 8001530:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001534:	f000 f884 	bl	8001640 <__gnu_Unwind_Save_WMMXD>
 8001538:	e72a      	b.n	8001390 <_Unwind_VRS_Pop+0x8c>
 800153a:	af20      	add	r7, sp, #128	; 0x80
 800153c:	3204      	adds	r2, #4
 800153e:	63b2      	str	r2, [r6, #56]	; 0x38
 8001540:	4638      	mov	r0, r7
 8001542:	f000 f843 	bl	80015cc <__gnu_Unwind_Restore_VFP>
 8001546:	e75f      	b.n	8001408 <_Unwind_VRS_Pop+0x104>
 8001548:	2c01      	cmp	r4, #1
 800154a:	d0f7      	beq.n	800153c <_Unwind_VRS_Pop+0x238>
 800154c:	f1b8 0f0f 	cmp.w	r8, #15
 8001550:	63b2      	str	r2, [r6, #56]	; 0x38
 8001552:	f63f af59 	bhi.w	8001408 <_Unwind_VRS_Pop+0x104>
 8001556:	4638      	mov	r0, r7
 8001558:	f000 f840 	bl	80015dc <__gnu_Unwind_Restore_VFP_D>
 800155c:	f1b9 0f00 	cmp.w	r9, #0
 8001560:	f43f af52 	beq.w	8001408 <_Unwind_VRS_Pop+0x104>
 8001564:	466f      	mov	r7, sp
 8001566:	e7b0      	b.n	80014ca <_Unwind_VRS_Pop+0x1c6>
 8001568:	4613      	mov	r3, r2
 800156a:	e799      	b.n	80014a0 <_Unwind_VRS_Pop+0x19c>
 800156c:	4630      	mov	r0, r6
 800156e:	f022 0204 	bic.w	r2, r2, #4
 8001572:	f840 2bd0 	str.w	r2, [r0], #208
 8001576:	f000 f83d 	bl	80015f4 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800157a:	e7bd      	b.n	80014f8 <_Unwind_VRS_Pop+0x1f4>
 800157c:	af20      	add	r7, sp, #128	; 0x80
 800157e:	e7ea      	b.n	8001556 <_Unwind_VRS_Pop+0x252>
 8001580:	6833      	ldr	r3, [r6, #0]
 8001582:	07d9      	lsls	r1, r3, #31
 8001584:	d508      	bpl.n	8001598 <_Unwind_VRS_Pop+0x294>
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	4630      	mov	r0, r6
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	f840 3b48 	str.w	r3, [r0], #72
 8001594:	f000 f826 	bl	80015e4 <__gnu_Unwind_Save_VFP_D>
 8001598:	af20      	add	r7, sp, #128	; 0x80
 800159a:	4638      	mov	r0, r7
 800159c:	464d      	mov	r5, r9
 800159e:	f000 f821 	bl	80015e4 <__gnu_Unwind_Save_VFP_D>
 80015a2:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	f47f af6a 	bne.w	800147e <_Unwind_VRS_Pop+0x17a>
 80015aa:	4638      	mov	r0, r7
 80015ac:	f000 f816 	bl	80015dc <__gnu_Unwind_Restore_VFP_D>
 80015b0:	e72a      	b.n	8001408 <_Unwind_VRS_Pop+0x104>
 80015b2:	bf00      	nop

080015b4 <__restore_core_regs>:
 80015b4:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80015b8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 80015bc:	469c      	mov	ip, r3
 80015be:	46a6      	mov	lr, r4
 80015c0:	f84c 5d04 	str.w	r5, [ip, #-4]!
 80015c4:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80015c8:	46e5      	mov	sp, ip
 80015ca:	bd00      	pop	{pc}

080015cc <__gnu_Unwind_Restore_VFP>:
 80015cc:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <__gnu_Unwind_Save_VFP>:
 80015d4:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop

080015dc <__gnu_Unwind_Restore_VFP_D>:
 80015dc:	ec90 0b20 	vldmia	r0, {d0-d15}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop

080015e4 <__gnu_Unwind_Save_VFP_D>:
 80015e4:	ec80 0b20 	vstmia	r0, {d0-d15}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80015ec:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop

080015f4 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80015f4:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop

080015fc <__gnu_Unwind_Restore_WMMXD>:
 80015fc:	ecf0 0102 	ldfe	f0, [r0], #8
 8001600:	ecf0 1102 	ldfe	f1, [r0], #8
 8001604:	ecf0 2102 	ldfe	f2, [r0], #8
 8001608:	ecf0 3102 	ldfe	f3, [r0], #8
 800160c:	ecf0 4102 	ldfe	f4, [r0], #8
 8001610:	ecf0 5102 	ldfe	f5, [r0], #8
 8001614:	ecf0 6102 	ldfe	f6, [r0], #8
 8001618:	ecf0 7102 	ldfe	f7, [r0], #8
 800161c:	ecf0 8102 	ldfp	f0, [r0], #8
 8001620:	ecf0 9102 	ldfp	f1, [r0], #8
 8001624:	ecf0 a102 	ldfp	f2, [r0], #8
 8001628:	ecf0 b102 	ldfp	f3, [r0], #8
 800162c:	ecf0 c102 	ldfp	f4, [r0], #8
 8001630:	ecf0 d102 	ldfp	f5, [r0], #8
 8001634:	ecf0 e102 	ldfp	f6, [r0], #8
 8001638:	ecf0 f102 	ldfp	f7, [r0], #8
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <__gnu_Unwind_Save_WMMXD>:
 8001640:	ece0 0102 	stfe	f0, [r0], #8
 8001644:	ece0 1102 	stfe	f1, [r0], #8
 8001648:	ece0 2102 	stfe	f2, [r0], #8
 800164c:	ece0 3102 	stfe	f3, [r0], #8
 8001650:	ece0 4102 	stfe	f4, [r0], #8
 8001654:	ece0 5102 	stfe	f5, [r0], #8
 8001658:	ece0 6102 	stfe	f6, [r0], #8
 800165c:	ece0 7102 	stfe	f7, [r0], #8
 8001660:	ece0 8102 	stfp	f0, [r0], #8
 8001664:	ece0 9102 	stfp	f1, [r0], #8
 8001668:	ece0 a102 	stfp	f2, [r0], #8
 800166c:	ece0 b102 	stfp	f3, [r0], #8
 8001670:	ece0 c102 	stfp	f4, [r0], #8
 8001674:	ece0 d102 	stfp	f5, [r0], #8
 8001678:	ece0 e102 	stfp	f6, [r0], #8
 800167c:	ece0 f102 	stfp	f7, [r0], #8
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop

08001684 <__gnu_Unwind_Restore_WMMXC>:
 8001684:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001688:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800168c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001690:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <__gnu_Unwind_Save_WMMXC>:
 8001698:	fca0 8101 	stc2	1, cr8, [r0], #4
 800169c:	fca0 9101 	stc2	1, cr9, [r0], #4
 80016a0:	fca0 a101 	stc2	1, cr10, [r0], #4
 80016a4:	fca0 b101 	stc2	1, cr11, [r0], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <_Unwind_RaiseException>:
 80016ac:	46ec      	mov	ip, sp
 80016ae:	b500      	push	{lr}
 80016b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80016c0:	a901      	add	r1, sp, #4
 80016c2:	f7ff fbcb 	bl	8000e5c <__gnu_Unwind_RaiseException>
 80016c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80016ca:	b012      	add	sp, #72	; 0x48
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <_Unwind_Resume>:
 80016d0:	46ec      	mov	ip, sp
 80016d2:	b500      	push	{lr}
 80016d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80016e4:	a901      	add	r1, sp, #4
 80016e6:	f7ff fbf5 	bl	8000ed4 <__gnu_Unwind_Resume>
 80016ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80016ee:	b012      	add	sp, #72	; 0x48
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop

080016f4 <_Unwind_Resume_or_Rethrow>:
 80016f4:	46ec      	mov	ip, sp
 80016f6:	b500      	push	{lr}
 80016f8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80016fc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001708:	a901      	add	r1, sp, #4
 800170a:	f7ff fc05 	bl	8000f18 <__gnu_Unwind_Resume_or_Rethrow>
 800170e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001712:	b012      	add	sp, #72	; 0x48
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop

08001718 <_Unwind_ForcedUnwind>:
 8001718:	46ec      	mov	ip, sp
 800171a:	b500      	push	{lr}
 800171c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001720:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	e92d 000c 	stmdb	sp!, {r2, r3}
 800172c:	ab01      	add	r3, sp, #4
 800172e:	f7ff fbc9 	bl	8000ec4 <__gnu_Unwind_ForcedUnwind>
 8001732:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001736:	b012      	add	sp, #72	; 0x48
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <_Unwind_Backtrace>:
 800173c:	46ec      	mov	ip, sp
 800173e:	b500      	push	{lr}
 8001740:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001744:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001750:	aa01      	add	r2, sp, #4
 8001752:	f7ff fc3b 	bl	8000fcc <__gnu_Unwind_Backtrace>
 8001756:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800175a:	b012      	add	sp, #72	; 0x48
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop

08001760 <next_unwind_byte>:
 8001760:	7a02      	ldrb	r2, [r0, #8]
 8001762:	4603      	mov	r3, r0
 8001764:	b97a      	cbnz	r2, 8001786 <next_unwind_byte+0x26>
 8001766:	7a42      	ldrb	r2, [r0, #9]
 8001768:	b1a2      	cbz	r2, 8001794 <next_unwind_byte+0x34>
 800176a:	6841      	ldr	r1, [r0, #4]
 800176c:	3a01      	subs	r2, #1
 800176e:	b410      	push	{r4}
 8001770:	7242      	strb	r2, [r0, #9]
 8001772:	6808      	ldr	r0, [r1, #0]
 8001774:	2203      	movs	r2, #3
 8001776:	1d0c      	adds	r4, r1, #4
 8001778:	721a      	strb	r2, [r3, #8]
 800177a:	0202      	lsls	r2, r0, #8
 800177c:	605c      	str	r4, [r3, #4]
 800177e:	0e00      	lsrs	r0, r0, #24
 8001780:	bc10      	pop	{r4}
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	4770      	bx	lr
 8001786:	6800      	ldr	r0, [r0, #0]
 8001788:	3a01      	subs	r2, #1
 800178a:	721a      	strb	r2, [r3, #8]
 800178c:	0202      	lsls	r2, r0, #8
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	0e00      	lsrs	r0, r0, #24
 8001792:	4770      	bx	lr
 8001794:	20b0      	movs	r0, #176	; 0xb0
 8001796:	4770      	bx	lr

08001798 <_Unwind_GetGR.constprop.0>:
 8001798:	b500      	push	{lr}
 800179a:	b085      	sub	sp, #20
 800179c:	2300      	movs	r3, #0
 800179e:	aa03      	add	r2, sp, #12
 80017a0:	9200      	str	r2, [sp, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	220c      	movs	r2, #12
 80017a6:	f7ff fbc7 	bl	8000f38 <_Unwind_VRS_Get>
 80017aa:	9803      	ldr	r0, [sp, #12]
 80017ac:	b005      	add	sp, #20
 80017ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80017b2:	bf00      	nop

080017b4 <unwind_UCB_from_context>:
 80017b4:	e7f0      	b.n	8001798 <_Unwind_GetGR.constprop.0>
 80017b6:	bf00      	nop

080017b8 <__gnu_unwind_execute>:
 80017b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017bc:	b085      	sub	sp, #20
 80017be:	4607      	mov	r7, r0
 80017c0:	460e      	mov	r6, r1
 80017c2:	f04f 0800 	mov.w	r8, #0
 80017c6:	ad03      	add	r5, sp, #12
 80017c8:	4630      	mov	r0, r6
 80017ca:	f7ff ffc9 	bl	8001760 <next_unwind_byte>
 80017ce:	28b0      	cmp	r0, #176	; 0xb0
 80017d0:	4604      	mov	r4, r0
 80017d2:	f000 80cb 	beq.w	800196c <__gnu_unwind_execute+0x1b4>
 80017d6:	0603      	lsls	r3, r0, #24
 80017d8:	d540      	bpl.n	800185c <__gnu_unwind_execute+0xa4>
 80017da:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80017de:	2b80      	cmp	r3, #128	; 0x80
 80017e0:	d056      	beq.n	8001890 <__gnu_unwind_execute+0xd8>
 80017e2:	2bb0      	cmp	r3, #176	; 0xb0
 80017e4:	d07d      	beq.n	80018e2 <__gnu_unwind_execute+0x12a>
 80017e6:	d81c      	bhi.n	8001822 <__gnu_unwind_execute+0x6a>
 80017e8:	2b90      	cmp	r3, #144	; 0x90
 80017ea:	f000 8093 	beq.w	8001914 <__gnu_unwind_execute+0x15c>
 80017ee:	2ba0      	cmp	r3, #160	; 0xa0
 80017f0:	d113      	bne.n	800181a <__gnu_unwind_execute+0x62>
 80017f2:	43c3      	mvns	r3, r0
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80017fc:	411a      	asrs	r2, r3
 80017fe:	0701      	lsls	r1, r0, #28
 8001800:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	bf48      	it	mi
 800180a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 800180e:	4619      	mov	r1, r3
 8001810:	4638      	mov	r0, r7
 8001812:	f7ff fd77 	bl	8001304 <_Unwind_VRS_Pop>
 8001816:	2800      	cmp	r0, #0
 8001818:	d0d6      	beq.n	80017c8 <__gnu_unwind_execute+0x10>
 800181a:	2009      	movs	r0, #9
 800181c:	b005      	add	sp, #20
 800181e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001822:	2bc0      	cmp	r3, #192	; 0xc0
 8001824:	d14b      	bne.n	80018be <__gnu_unwind_execute+0x106>
 8001826:	28c6      	cmp	r0, #198	; 0xc6
 8001828:	f000 8089 	beq.w	800193e <__gnu_unwind_execute+0x186>
 800182c:	28c7      	cmp	r0, #199	; 0xc7
 800182e:	f000 80a2 	beq.w	8001976 <__gnu_unwind_execute+0x1be>
 8001832:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001836:	2bc0      	cmp	r3, #192	; 0xc0
 8001838:	f000 80bc 	beq.w	80019b4 <__gnu_unwind_execute+0x1fc>
 800183c:	28c8      	cmp	r0, #200	; 0xc8
 800183e:	f000 80bf 	beq.w	80019c0 <__gnu_unwind_execute+0x208>
 8001842:	28c9      	cmp	r0, #201	; 0xc9
 8001844:	d1e9      	bne.n	800181a <__gnu_unwind_execute+0x62>
 8001846:	4630      	mov	r0, r6
 8001848:	f7ff ff8a 	bl	8001760 <next_unwind_byte>
 800184c:	0302      	lsls	r2, r0, #12
 800184e:	f000 000f 	and.w	r0, r0, #15
 8001852:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001856:	3001      	adds	r0, #1
 8001858:	4302      	orrs	r2, r0
 800185a:	e039      	b.n	80018d0 <__gnu_unwind_execute+0x118>
 800185c:	0083      	lsls	r3, r0, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	f103 0904 	add.w	r9, r3, #4
 8001864:	2300      	movs	r3, #0
 8001866:	4619      	mov	r1, r3
 8001868:	9500      	str	r5, [sp, #0]
 800186a:	220d      	movs	r2, #13
 800186c:	4638      	mov	r0, r7
 800186e:	f7ff fb63 	bl	8000f38 <_Unwind_VRS_Get>
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	0660      	lsls	r0, r4, #25
 8001876:	bf4c      	ite	mi
 8001878:	eba3 0309 	submi.w	r3, r3, r9
 800187c:	444b      	addpl	r3, r9
 800187e:	9303      	str	r3, [sp, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9500      	str	r5, [sp, #0]
 8001884:	220d      	movs	r2, #13
 8001886:	4619      	mov	r1, r3
 8001888:	4638      	mov	r0, r7
 800188a:	f7ff fb7b 	bl	8000f84 <_Unwind_VRS_Set>
 800188e:	e79b      	b.n	80017c8 <__gnu_unwind_execute+0x10>
 8001890:	0204      	lsls	r4, r0, #8
 8001892:	4630      	mov	r0, r6
 8001894:	f7ff ff64 	bl	8001760 <next_unwind_byte>
 8001898:	4320      	orrs	r0, r4
 800189a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800189e:	d0bc      	beq.n	800181a <__gnu_unwind_execute+0x62>
 80018a0:	0104      	lsls	r4, r0, #4
 80018a2:	2300      	movs	r3, #0
 80018a4:	b2a2      	uxth	r2, r4
 80018a6:	4619      	mov	r1, r3
 80018a8:	4638      	mov	r0, r7
 80018aa:	f7ff fd2b 	bl	8001304 <_Unwind_VRS_Pop>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d1b3      	bne.n	800181a <__gnu_unwind_execute+0x62>
 80018b2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80018b6:	bf18      	it	ne
 80018b8:	f04f 0801 	movne.w	r8, #1
 80018bc:	e784      	b.n	80017c8 <__gnu_unwind_execute+0x10>
 80018be:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80018c2:	2bd0      	cmp	r3, #208	; 0xd0
 80018c4:	d1a9      	bne.n	800181a <__gnu_unwind_execute+0x62>
 80018c6:	f000 0207 	and.w	r2, r0, #7
 80018ca:	3201      	adds	r2, #1
 80018cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018d0:	2305      	movs	r3, #5
 80018d2:	2101      	movs	r1, #1
 80018d4:	4638      	mov	r0, r7
 80018d6:	f7ff fd15 	bl	8001304 <_Unwind_VRS_Pop>
 80018da:	2800      	cmp	r0, #0
 80018dc:	f43f af74 	beq.w	80017c8 <__gnu_unwind_execute+0x10>
 80018e0:	e79b      	b.n	800181a <__gnu_unwind_execute+0x62>
 80018e2:	28b1      	cmp	r0, #177	; 0xb1
 80018e4:	d037      	beq.n	8001956 <__gnu_unwind_execute+0x19e>
 80018e6:	28b2      	cmp	r0, #178	; 0xb2
 80018e8:	f000 8087 	beq.w	80019fa <__gnu_unwind_execute+0x242>
 80018ec:	28b3      	cmp	r0, #179	; 0xb3
 80018ee:	d056      	beq.n	800199e <__gnu_unwind_execute+0x1e6>
 80018f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80018f4:	2bb4      	cmp	r3, #180	; 0xb4
 80018f6:	d090      	beq.n	800181a <__gnu_unwind_execute+0x62>
 80018f8:	f000 0207 	and.w	r2, r0, #7
 80018fc:	3201      	adds	r2, #1
 80018fe:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001902:	2301      	movs	r3, #1
 8001904:	4619      	mov	r1, r3
 8001906:	4638      	mov	r0, r7
 8001908:	f7ff fcfc 	bl	8001304 <_Unwind_VRS_Pop>
 800190c:	2800      	cmp	r0, #0
 800190e:	f43f af5b 	beq.w	80017c8 <__gnu_unwind_execute+0x10>
 8001912:	e782      	b.n	800181a <__gnu_unwind_execute+0x62>
 8001914:	f000 030d 	and.w	r3, r0, #13
 8001918:	2b0d      	cmp	r3, #13
 800191a:	f43f af7e 	beq.w	800181a <__gnu_unwind_execute+0x62>
 800191e:	2300      	movs	r3, #0
 8001920:	f000 020f 	and.w	r2, r0, #15
 8001924:	4619      	mov	r1, r3
 8001926:	9500      	str	r5, [sp, #0]
 8001928:	4638      	mov	r0, r7
 800192a:	f7ff fb05 	bl	8000f38 <_Unwind_VRS_Get>
 800192e:	2300      	movs	r3, #0
 8001930:	9500      	str	r5, [sp, #0]
 8001932:	220d      	movs	r2, #13
 8001934:	4619      	mov	r1, r3
 8001936:	4638      	mov	r0, r7
 8001938:	f7ff fb24 	bl	8000f84 <_Unwind_VRS_Set>
 800193c:	e744      	b.n	80017c8 <__gnu_unwind_execute+0x10>
 800193e:	4630      	mov	r0, r6
 8001940:	f7ff ff0e 	bl	8001760 <next_unwind_byte>
 8001944:	0302      	lsls	r2, r0, #12
 8001946:	f000 000f 	and.w	r0, r0, #15
 800194a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800194e:	3001      	adds	r0, #1
 8001950:	4302      	orrs	r2, r0
 8001952:	2303      	movs	r3, #3
 8001954:	e7d6      	b.n	8001904 <__gnu_unwind_execute+0x14c>
 8001956:	4630      	mov	r0, r6
 8001958:	f7ff ff02 	bl	8001760 <next_unwind_byte>
 800195c:	4602      	mov	r2, r0
 800195e:	2800      	cmp	r0, #0
 8001960:	f43f af5b 	beq.w	800181a <__gnu_unwind_execute+0x62>
 8001964:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001968:	d0cc      	beq.n	8001904 <__gnu_unwind_execute+0x14c>
 800196a:	e756      	b.n	800181a <__gnu_unwind_execute+0x62>
 800196c:	f1b8 0f00 	cmp.w	r8, #0
 8001970:	d032      	beq.n	80019d8 <__gnu_unwind_execute+0x220>
 8001972:	2000      	movs	r0, #0
 8001974:	e752      	b.n	800181c <__gnu_unwind_execute+0x64>
 8001976:	4630      	mov	r0, r6
 8001978:	f7ff fef2 	bl	8001760 <next_unwind_byte>
 800197c:	4602      	mov	r2, r0
 800197e:	2800      	cmp	r0, #0
 8001980:	f43f af4b 	beq.w	800181a <__gnu_unwind_execute+0x62>
 8001984:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 8001988:	f47f af47 	bne.w	800181a <__gnu_unwind_execute+0x62>
 800198c:	2300      	movs	r3, #0
 800198e:	2104      	movs	r1, #4
 8001990:	4638      	mov	r0, r7
 8001992:	f7ff fcb7 	bl	8001304 <_Unwind_VRS_Pop>
 8001996:	2800      	cmp	r0, #0
 8001998:	f43f af16 	beq.w	80017c8 <__gnu_unwind_execute+0x10>
 800199c:	e73d      	b.n	800181a <__gnu_unwind_execute+0x62>
 800199e:	4630      	mov	r0, r6
 80019a0:	f7ff fede 	bl	8001760 <next_unwind_byte>
 80019a4:	0302      	lsls	r2, r0, #12
 80019a6:	f000 000f 	and.w	r0, r0, #15
 80019aa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80019ae:	3001      	adds	r0, #1
 80019b0:	4302      	orrs	r2, r0
 80019b2:	e7a6      	b.n	8001902 <__gnu_unwind_execute+0x14a>
 80019b4:	f000 020f 	and.w	r2, r0, #15
 80019b8:	3201      	adds	r2, #1
 80019ba:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80019be:	e7c8      	b.n	8001952 <__gnu_unwind_execute+0x19a>
 80019c0:	4630      	mov	r0, r6
 80019c2:	f7ff fecd 	bl	8001760 <next_unwind_byte>
 80019c6:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80019ca:	f000 030f 	and.w	r3, r0, #15
 80019ce:	3210      	adds	r2, #16
 80019d0:	3301      	adds	r3, #1
 80019d2:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80019d6:	e77b      	b.n	80018d0 <__gnu_unwind_execute+0x118>
 80019d8:	ac03      	add	r4, sp, #12
 80019da:	4643      	mov	r3, r8
 80019dc:	220e      	movs	r2, #14
 80019de:	4641      	mov	r1, r8
 80019e0:	9400      	str	r4, [sp, #0]
 80019e2:	4638      	mov	r0, r7
 80019e4:	f7ff faa8 	bl	8000f38 <_Unwind_VRS_Get>
 80019e8:	9400      	str	r4, [sp, #0]
 80019ea:	4643      	mov	r3, r8
 80019ec:	220f      	movs	r2, #15
 80019ee:	4641      	mov	r1, r8
 80019f0:	4638      	mov	r0, r7
 80019f2:	f7ff fac7 	bl	8000f84 <_Unwind_VRS_Set>
 80019f6:	4640      	mov	r0, r8
 80019f8:	e710      	b.n	800181c <__gnu_unwind_execute+0x64>
 80019fa:	2300      	movs	r3, #0
 80019fc:	220d      	movs	r2, #13
 80019fe:	4619      	mov	r1, r3
 8001a00:	9500      	str	r5, [sp, #0]
 8001a02:	4638      	mov	r0, r7
 8001a04:	f7ff fa98 	bl	8000f38 <_Unwind_VRS_Get>
 8001a08:	4630      	mov	r0, r6
 8001a0a:	f7ff fea9 	bl	8001760 <next_unwind_byte>
 8001a0e:	0602      	lsls	r2, r0, #24
 8001a10:	9c03      	ldr	r4, [sp, #12]
 8001a12:	f04f 0902 	mov.w	r9, #2
 8001a16:	d50c      	bpl.n	8001a32 <__gnu_unwind_execute+0x27a>
 8001a18:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8001a20:	4404      	add	r4, r0
 8001a22:	4630      	mov	r0, r6
 8001a24:	9403      	str	r4, [sp, #12]
 8001a26:	f7ff fe9b 	bl	8001760 <next_unwind_byte>
 8001a2a:	0603      	lsls	r3, r0, #24
 8001a2c:	f109 0907 	add.w	r9, r9, #7
 8001a30:	d4f2      	bmi.n	8001a18 <__gnu_unwind_execute+0x260>
 8001a32:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001a36:	fa03 f309 	lsl.w	r3, r3, r9
 8001a3a:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001a3e:	4423      	add	r3, r4
 8001a40:	e71d      	b.n	800187e <__gnu_unwind_execute+0xc6>
 8001a42:	bf00      	nop

08001a44 <__gnu_unwind_frame>:
 8001a44:	b510      	push	{r4, lr}
 8001a46:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001a48:	6853      	ldr	r3, [r2, #4]
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	f04f 0c03 	mov.w	ip, #3
 8001a50:	3208      	adds	r2, #8
 8001a52:	021c      	lsls	r4, r3, #8
 8001a54:	4608      	mov	r0, r1
 8001a56:	0e1b      	lsrs	r3, r3, #24
 8001a58:	a901      	add	r1, sp, #4
 8001a5a:	9401      	str	r4, [sp, #4]
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	f88d c00c 	strb.w	ip, [sp, #12]
 8001a62:	f88d 300d 	strb.w	r3, [sp, #13]
 8001a66:	f7ff fea7 	bl	80017b8 <__gnu_unwind_execute>
 8001a6a:	b004      	add	sp, #16
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	bf00      	nop

08001a70 <_Unwind_GetRegionStart>:
 8001a70:	b508      	push	{r3, lr}
 8001a72:	f7ff fe9f 	bl	80017b4 <unwind_UCB_from_context>
 8001a76:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001a78:	bd08      	pop	{r3, pc}
 8001a7a:	bf00      	nop

08001a7c <_Unwind_GetLanguageSpecificData>:
 8001a7c:	b508      	push	{r3, lr}
 8001a7e:	f7ff fe99 	bl	80017b4 <unwind_UCB_from_context>
 8001a82:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001a84:	79c3      	ldrb	r3, [r0, #7]
 8001a86:	3302      	adds	r3, #2
 8001a88:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001a8c:	bd08      	pop	{r3, pc}
 8001a8e:	bf00      	nop

08001a90 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a90:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001a92:	2400      	movs	r4, #0
{
 8001a94:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a96:	2220      	movs	r2, #32
 8001a98:	4621      	mov	r1, r4
 8001a9a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8001a9c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001aa0:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	f004 fcad 	bl	8006400 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001aa6:	4822      	ldr	r0, [pc, #136]	; (8001b30 <MX_ADC1_Init+0xa0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001ab0:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab4:	2204      	movs	r2, #4
 8001ab6:	6182      	str	r2, [r0, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001ab8:	f44f 6290 	mov.w	r2, #1152	; 0x480
  hadc1.Init.NbrOfConversion = 1;
 8001abc:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8001abe:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ac0:	8384      	strh	r4, [r0, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aca:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc1.Init.NbrOfConversion = 1;
 8001ace:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ad0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ad4:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ad6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ada:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001adc:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ae0:	f001 f85c 	bl	8002b9c <HAL_ADC_Init>
 8001ae4:	b9c8      	cbnz	r0, 8001b1a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001ae6:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ae8:	4811      	ldr	r0, [pc, #68]	; (8001b30 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001aea:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001aec:	a901      	add	r1, sp, #4
 8001aee:	f001 fcc1 	bl	8003474 <HAL_ADCEx_MultiModeConfigChannel>
 8001af2:	b9c8      	cbnz	r0, 8001b28 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001af4:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <MX_ADC1_Init+0xa0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001af8:	2306      	movs	r3, #6
 8001afa:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001afe:	2403      	movs	r4, #3
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b00:	237f      	movs	r3, #127	; 0x7f
 8001b02:	e9cd 4306 	strd	r4, r3, [sp, #24]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b06:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8001b08:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 8001b0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	f001 f996 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8001b14:	b920      	cbnz	r0, 8001b20 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b16:	b00c      	add	sp, #48	; 0x30
 8001b18:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b1a:	f000 fd57 	bl	80025cc <Error_Handler>
 8001b1e:	e7e2      	b.n	8001ae6 <MX_ADC1_Init+0x56>
    Error_Handler();
 8001b20:	f000 fd54 	bl	80025cc <Error_Handler>
}
 8001b24:	b00c      	add	sp, #48	; 0x30
 8001b26:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001b28:	f000 fd50 	bl	80025cc <Error_Handler>
 8001b2c:	e7e2      	b.n	8001af4 <MX_ADC1_Init+0x64>
 8001b2e:	bf00      	nop
 8001b30:	20007834 	.word	0x20007834
 8001b34:	0c900008 	.word	0x0c900008

08001b38 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4668      	mov	r0, sp
 8001b42:	f004 fc5d 	bl	8006400 <memset>

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b46:	4c1c      	ldr	r4, [pc, #112]	; (8001bb8 <MX_ADC2_Init+0x80>)
  hadc2.Instance = ADC2;
 8001b48:	481c      	ldr	r0, [pc, #112]	; (8001bbc <MX_ADC2_Init+0x84>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b4a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001b4e:	e9c0 4100 	strd	r4, r1, [r0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b52:	2104      	movs	r1, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001b54:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b56:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001b58:	f44f 61ac 	mov.w	r1, #1376	; 0x560
  hadc2.Init.NbrOfConversion = 1;
 8001b5c:	2201      	movs	r2, #1
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001b5e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001b60:	8383      	strh	r3, [r0, #28]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b66:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.NbrOfConversion = 1;
 8001b6e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001b70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b74:	6301      	str	r1, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001b76:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b7a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001b7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b80:	f001 f80c 	bl	8002b9c <HAL_ADC_Init>
 8001b84:	b988      	cbnz	r0, 8001baa <MX_ADC2_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <MX_ADC2_Init+0x88>)
 8001b88:	9200      	str	r2, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b8a:	227f      	movs	r2, #127	; 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b8c:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b8e:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b90:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <MX_ADC2_Init+0x84>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b94:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b96:	4669      	mov	r1, sp
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b98:	e9cd 4301 	strd	r4, r3, [sp, #4]
  sConfig.Offset = 0;
 8001b9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001ba0:	f001 f94e 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8001ba4:	b920      	cbnz	r0, 8001bb0 <MX_ADC2_Init+0x78>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001ba6:	b008      	add	sp, #32
 8001ba8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001baa:	f000 fd0f 	bl	80025cc <Error_Handler>
 8001bae:	e7ea      	b.n	8001b86 <MX_ADC2_Init+0x4e>
    Error_Handler();
 8001bb0:	f000 fd0c 	bl	80025cc <Error_Handler>
}
 8001bb4:	b008      	add	sp, #32
 8001bb6:	bd10      	pop	{r4, pc}
 8001bb8:	50000100 	.word	0x50000100
 8001bbc:	200077c8 	.word	0x200077c8
 8001bc0:	04300002 	.word	0x04300002

08001bc4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bcc:	2244      	movs	r2, #68	; 0x44
 8001bce:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001bd4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001bd8:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bda:	f004 fc11 	bl	8006400 <memset>
  if(adcHandle->Instance==ADC1)
 8001bde:	6823      	ldr	r3, [r4, #0]
 8001be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001be4:	d004      	beq.n	8001bf0 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_ADC_MspInit+0x13c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d04b      	beq.n	8001c84 <HAL_ADC_MspInit+0xc0>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001bec:	b01a      	add	sp, #104	; 0x68
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001bf4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001bfa:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001bfc:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bfe:	f002 fcb7 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d175      	bne.n	8001cf2 <HAL_ADC_MspInit+0x12e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_ADC_MspInit+0x140>)
 8001c08:	6813      	ldr	r3, [r2, #0]
 8001c0a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c0c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c10:	d109      	bne.n	8001c26 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <HAL_ADC_MspInit+0x144>)
 8001c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Instance = DMA1_Channel2;
 8001c28:	4d38      	ldr	r5, [pc, #224]	; (8001d0c <HAL_ADC_MspInit+0x148>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c46:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	f001 ff83 	bl	8003b58 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel2;
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <HAL_ADC_MspInit+0x14c>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c54:	2305      	movs	r3, #5
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001c56:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c62:	61ab      	str	r3, [r5, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001c64:	2320      	movs	r3, #32
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c66:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c6a:	e9c5 6204 	strd	r6, r2, [r5, #16]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001c6e:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001c72:	4628      	mov	r0, r5
 8001c74:	f001 fe32 	bl	80038dc <HAL_DMA_Init>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d137      	bne.n	8001cec <HAL_ADC_MspInit+0x128>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001c7c:	6565      	str	r5, [r4, #84]	; 0x54
 8001c7e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001c80:	b01a      	add	sp, #104	; 0x68
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001c8e:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001c90:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c92:	f002 fc6d 	bl	8004570 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	2800      	cmp	r0, #0
 8001c98:	d12e      	bne.n	8001cf8 <HAL_ADC_MspInit+0x134>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_ADC_MspInit+0x140>)
 8001c9c:	6813      	ldr	r3, [r2, #0]
 8001c9e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ca0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_MspInit+0xf6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_ADC_MspInit+0x144>)
 8001ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cae:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_ADC_MspInit+0x144>)
    hdma_adc2.Instance = DMA1_Channel1;
 8001cbc:	4d15      	ldr	r5, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0x150>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc0:	f042 0201 	orr.w	r2, r2, #1
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f001 ff39 	bl	8003b58 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_ADC_MspInit+0x154>)
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001ce8:	2324      	movs	r3, #36	; 0x24
 8001cea:	e7b4      	b.n	8001c56 <HAL_ADC_MspInit+0x92>
      Error_Handler();
 8001cec:	f000 fc6e 	bl	80025cc <Error_Handler>
 8001cf0:	e7c4      	b.n	8001c7c <HAL_ADC_MspInit+0xb8>
      Error_Handler();
 8001cf2:	f000 fc6b 	bl	80025cc <Error_Handler>
 8001cf6:	e786      	b.n	8001c06 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8001cf8:	f000 fc68 	bl	80025cc <Error_Handler>
 8001cfc:	e7cd      	b.n	8001c9a <HAL_ADC_MspInit+0xd6>
 8001cfe:	bf00      	nop
 8001d00:	50000100 	.word	0x50000100
 8001d04:	20000078 	.word	0x20000078
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	200078a0 	.word	0x200078a0
 8001d10:	4002001c 	.word	0x4002001c
 8001d14:	20007900 	.word	0x20007900
 8001d18:	40020008 	.word	0x40020008

08001d1c <ADC1_Start>:
}

/* USER CODE BEGIN 1 */

void ADC1_Start() {
	HAL_ADC_Start_DMA(&hadc1, &ADC1_raw_data, 1);
 8001d1c:	4902      	ldr	r1, [pc, #8]	; (8001d28 <ADC1_Start+0xc>)
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <ADC1_Start+0x10>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	f001 bb2f 	b.w	8003384 <HAL_ADC_Start_DMA>
 8001d26:	bf00      	nop
 8001d28:	20000086 	.word	0x20000086
 8001d2c:	20007834 	.word	0x20007834

08001d30 <ADC2_Start>:
}
void ADC2_Start() {
	HAL_ADC_Start_DMA(&hadc2, &ADC2_raw_data, 1);
 8001d30:	4902      	ldr	r1, [pc, #8]	; (8001d3c <ADC2_Start+0xc>)
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <ADC2_Start+0x10>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	f001 bb25 	b.w	8003384 <HAL_ADC_Start_DMA>
 8001d3a:	bf00      	nop
 8001d3c:	20000088 	.word	0x20000088
 8001d40:	200077c8 	.word	0x200077c8

08001d44 <svf_init>:

void svf_init(svf_typedef *svf, float _freq, float _q) {
	svf->freq = _freq;

	svf->a = (6.28f * _freq) / SAMPLE_RATE;
	if (svf->a > 1.0f) {
 8001d44:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001d88 <svf_init+0x44>
	svf->freq = _freq;
 8001d48:	ed80 0a05 	vstr	s0, [r0, #20]
	if (svf->a > 1.0f) {
 8001d4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	svf->a = (6.28f * _freq) / SAMPLE_RATE;
 8001d54:	bfdc      	itt	le
 8001d56:	eddf 7a0d 	vldrle	s15, [pc, #52]	; 8001d8c <svf_init+0x48>
 8001d5a:	ee20 0a27 	vmulle.f32	s0, s0, s15
	}

	if (_q < 0.500f) {
		_q = 0.500f;
	}
	svf->q = 1.0f / _q;
 8001d5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8001d62:	eef4 0ae7 	vcmpe.f32	s1, s15
		svf->a = 1.0f;
 8001d66:	bfc8      	it	gt
 8001d68:	eeb7 0a00 	vmovgt.f32	s0, #112	; 0x3f800000  1.0
	svf->q = 1.0f / _q;
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	bfb8      	it	lt
 8001d72:	eef0 0a67 	vmovlt.f32	s1, s15
 8001d76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d7a:	eec7 7a20 	vdiv.f32	s15, s14, s1
 8001d7e:	ed80 0a06 	vstr	s0, [r0, #24]
 8001d82:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8001d86:	4770      	bx	lr
 8001d88:	4604b210 	.word	0x4604b210
 8001d8c:	38f6f0f3 	.word	0x38f6f0f3

08001d90 <svf_tick>:

void svf_tick(svf_typedef *svf, float _input) {
	svf->low = svf->delay2 + svf->a * svf->delay1;
 8001d90:	edd0 7a03 	vldr	s15, [r0, #12]
 8001d94:	edd0 6a06 	vldr	s13, [r0, #24]
 8001d98:	ed90 7a04 	vldr	s14, [r0, #16]
 8001d9c:	ed90 6a07 	vldr	s12, [r0, #28]
 8001da0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8001da4:	eea7 0ac6 	vfms.f32	s0, s15, s12
 8001da8:	ed80 7a00 	vstr	s14, [r0]
	svf->high = _input - svf->low - (svf->q * svf->delay1);
 8001dac:	ee30 0a47 	vsub.f32	s0, s0, s14
	svf->band = (svf->a * svf->high) + svf->delay1;

	svf->delay1 = svf->band;
	svf->delay2 = svf->low;
 8001db0:	ed80 7a04 	vstr	s14, [r0, #16]
	svf->band = (svf->a * svf->high) + svf->delay1;
 8001db4:	eee6 7a80 	vfma.f32	s15, s13, s0
	svf->high = _input - svf->low - (svf->q * svf->delay1);
 8001db8:	ed80 0a01 	vstr	s0, [r0, #4]
	svf->band = (svf->a * svf->high) + svf->delay1;
 8001dbc:	edc0 7a02 	vstr	s15, [r0, #8]
	svf->delay1 = svf->band;
 8001dc0:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop

08001dc8 <svf_get_low>:
	svf->q = 1.0f / _q;
}

float svf_get_low(svf_typedef *svf) {
	return svf->low;
}
 8001dc8:	ed90 0a00 	vldr	s0, [r0]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop

08001dd0 <svf_get_high>:

float svf_get_high(svf_typedef *svf) {
	return svf->high;
}
 8001dd0:	ed90 0a01 	vldr	s0, [r0, #4]
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <chorus_tick>:
	lfo->output = ((((sine_10b[lfo->phase_index >> 22] - 512) * 0.001953125f) * 0.5f) + 0.5f) * _amplitude;
	//lfo->output = (big_sine_wave[lfo->phase_index >> 22]) >> 5;
	return lfo->phase_index;
}

float chorus_tick(float _input) {
 8001dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//input highpass
	svf_tick(&input_highpass, _input);
 8001dda:	485e      	ldr	r0, [pc, #376]	; (8001f54 <chorus_tick+0x17c>)

	// a lil' pad
	chorus_signal_input = chorus_lp_input * 0.7f;

	// increment buffer index and wrap
	chorus_buffer_index_in++;
 8001ddc:	4d5e      	ldr	r5, [pc, #376]	; (8001f58 <chorus_tick+0x180>)
	if (chorus_buffer_index_in > (CHORUS_BUFFER_LENGTH - 1)) {
		chorus_buffer_index_in -= CHORUS_BUFFER_LENGTH;
	}

	// add feedback
	buffer_signal_input = chorus_signal_input + (feedback);
 8001dde:	4e5f      	ldr	r6, [pc, #380]	; (8001f5c <chorus_tick+0x184>)
	chorus_buffer[chorus_buffer_index_in] = buffer_signal_input;

	lfo_tick(&chorus_lfo, lfo_rate_pot, lfo_amt_pot);

	// 1p low pass filter the lfo modulation
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001de0:	4c5f      	ldr	r4, [pc, #380]	; (8001f60 <chorus_tick+0x188>)
	chorus_buffer[chorus_buffer_index_in] = buffer_signal_input;
 8001de2:	4f60      	ldr	r7, [pc, #384]	; (8001f64 <chorus_tick+0x18c>)
	svf_tick(&input_highpass, _input);
 8001de4:	f7ff ffd4 	bl	8001d90 <svf_tick>
	chorus_hp_input = svf_get_high(&input_highpass);
 8001de8:	485a      	ldr	r0, [pc, #360]	; (8001f54 <chorus_tick+0x17c>)
 8001dea:	f7ff fff1 	bl	8001dd0 <svf_get_high>
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <chorus_tick+0x190>)
	svf_tick(&input_lowpass, chorus_hp_input);
 8001df0:	485e      	ldr	r0, [pc, #376]	; (8001f6c <chorus_tick+0x194>)
	chorus_hp_input = svf_get_high(&input_highpass);
 8001df2:	ed83 0a00 	vstr	s0, [r3]
	svf_tick(&input_lowpass, chorus_hp_input);
 8001df6:	f7ff ffcb 	bl	8001d90 <svf_tick>
	chorus_lp_input = svf_get_low(&input_lowpass);
 8001dfa:	485c      	ldr	r0, [pc, #368]	; (8001f6c <chorus_tick+0x194>)
 8001dfc:	f7ff ffe4 	bl	8001dc8 <svf_get_low>
	chorus_signal_input = chorus_lp_input * 0.7f;
 8001e00:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8001f70 <chorus_tick+0x198>
	chorus_buffer_index_in++;
 8001e04:	882b      	ldrh	r3, [r5, #0]
	chorus_signal_input = chorus_lp_input * 0.7f;
 8001e06:	495b      	ldr	r1, [pc, #364]	; (8001f74 <chorus_tick+0x19c>)
	buffer_signal_input = chorus_signal_input + (feedback);
 8001e08:	ed96 7a00 	vldr	s14, [r6]
	lfo->phase_increment = ((42949.6710f) * (_frequency));
 8001e0c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8001f78 <chorus_tick+0x1a0>
	chorus_lp_input = svf_get_low(&input_lowpass);
 8001e10:	485a      	ldr	r0, [pc, #360]	; (8001f7c <chorus_tick+0x1a4>)
	lfo->output = ((((sine_10b[lfo->phase_index >> 22] - 512) * 0.001953125f) * 0.5f) + 0.5f) * _amplitude;
 8001e12:	eddf 4a5b 	vldr	s9, [pc, #364]	; 8001f80 <chorus_tick+0x1a8>
	chorus_lp_input = svf_get_low(&input_lowpass);
 8001e16:	ed80 0a00 	vstr	s0, [r0]
	chorus_signal_input = chorus_lp_input * 0.7f;
 8001e1a:	ee60 7a27 	vmul.f32	s15, s0, s15
	chorus_buffer_index_in++;
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	b292      	uxth	r2, r2
	chorus_signal_input = chorus_lp_input * 0.7f;
 8001e22:	edc1 7a00 	vstr	s15, [r1]
	if (chorus_buffer_index_in > (CHORUS_BUFFER_LENGTH - 1)) {
 8001e26:	f643 2197 	movw	r1, #14999	; 0x3a97
 8001e2a:	428a      	cmp	r2, r1
	lfo_tick(&chorus_lfo, lfo_rate_pot, lfo_amt_pot);
 8001e2c:	4955      	ldr	r1, [pc, #340]	; (8001f84 <chorus_tick+0x1ac>)
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001e2e:	edd4 6a00 	vldr	s13, [r4]
 8001e32:	ed9f 5a55 	vldr	s10, [pc, #340]	; 8001f88 <chorus_tick+0x1b0>
	buffer_signal_input = chorus_signal_input + (feedback);
 8001e36:	ee77 7a87 	vadd.f32	s15, s15, s14
	lfo_tick(&chorus_lfo, lfo_rate_pot, lfo_amt_pot);
 8001e3a:	ed91 7a00 	vldr	s14, [r1]
 8001e3e:	4953      	ldr	r1, [pc, #332]	; (8001f8c <chorus_tick+0x1b4>)
		chorus_buffer_index_in -= CHORUS_BUFFER_LENGTH;
 8001e40:	bf88      	it	hi
 8001e42:	f5a3 536a 	subhi.w	r3, r3, #14976	; 0x3a80
	lfo->phase_increment = ((42949.6710f) * (_frequency));
 8001e46:	ee27 7a06 	vmul.f32	s14, s14, s12
		chorus_buffer_index_in -= CHORUS_BUFFER_LENGTH;
 8001e4a:	bf84      	itt	hi
 8001e4c:	3b17      	subhi	r3, #23
 8001e4e:	b29a      	uxthhi	r2, r3
	lfo->phase_increment = ((42949.6710f) * (_frequency));
 8001e50:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001e54:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <chorus_tick+0x1b8>)
	lfo_tick(&chorus_lfo, lfo_rate_pot, lfo_amt_pot);
 8001e56:	ed91 6a00 	vldr	s12, [r1]
	lfo->phase_increment = ((42949.6710f) * (_frequency));
 8001e5a:	ed83 7a03 	vstr	s14, [r3, #12]
	lfo->phase_index += lfo->phase_increment;
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	6918      	ldr	r0, [r3, #16]
		chorus_buffer_index_in -= CHORUS_BUFFER_LENGTH;
 8001e62:	802a      	strh	r2, [r5, #0]
	lfo->phase_index += lfo->phase_increment;
 8001e64:	4401      	add	r1, r0
 8001e66:	6119      	str	r1, [r3, #16]
	lfo->output = ((((sine_10b[lfo->phase_index >> 22] - 512) * 0.001953125f) * 0.5f) + 0.5f) * _amplitude;
 8001e68:	6919      	ldr	r1, [r3, #16]
 8001e6a:	484a      	ldr	r0, [pc, #296]	; (8001f94 <chorus_tick+0x1bc>)
 8001e6c:	0d89      	lsrs	r1, r1, #22
 8001e6e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e72:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]

	// dynamic smooth the delay pot and cv input (summed in control tick)
	delay_pot_filter = dynamic_smooth_tick(&smooth_delay, delay_pot);
 8001e76:	4848      	ldr	r0, [pc, #288]	; (8001f98 <chorus_tick+0x1c0>)
	lfo->output = ((((sine_10b[lfo->phase_index >> 22] - 512) * 0.001953125f) * 0.5f) + 0.5f) * _amplitude;
 8001e78:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8001e7c:	ee07 1a10 	vmov	s14, r1
 8001e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e84:	eee7 5a24 	vfma.f32	s11, s14, s9
 8001e88:	ee26 7a25 	vmul.f32	s14, s12, s11
 8001e8c:	ed83 7a00 	vstr	s14, [r3]
	return lfo->phase_index;
 8001e90:	6919      	ldr	r1, [r3, #16]
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001e92:	ed93 7a00 	vldr	s14, [r3]
	delay_pot_filter = dynamic_smooth_tick(&smooth_delay, delay_pot);
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <chorus_tick+0x1c4>)
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001e98:	ee37 7a66 	vsub.f32	s14, s14, s13
	delay_pot_filter = dynamic_smooth_tick(&smooth_delay, delay_pot);
 8001e9c:	ed93 0a00 	vldr	s0, [r3]
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001ea0:	eee7 6a05 	vfma.f32	s13, s14, s10
	chorus_buffer[chorus_buffer_index_in] = buffer_signal_input;
 8001ea4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	buffer_modulation += ((chorus_lfo.output) - buffer_modulation) * 0.03f;
 8001ea8:	edc4 6a00 	vstr	s13, [r4]
	chorus_buffer[chorus_buffer_index_in] = buffer_signal_input;
 8001eac:	ee17 3a10 	vmov	r3, s14
 8001eb0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
	buffer_signal_input = chorus_signal_input + (feedback);
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <chorus_tick+0x1c8>)
 8001eb6:	edc3 7a00 	vstr	s15, [r3]
	delay_pot_filter = dynamic_smooth_tick(&smooth_delay, delay_pot);
 8001eba:	f000 fa1f 	bl	80022fc <dynamic_smooth_tick>
 8001ebe:	4a39      	ldr	r2, [pc, #228]	; (8001fa4 <chorus_tick+0x1cc>)

	// use the lerp to calculate our buffer output sample
	chorus_signal_output = lerp_int16(chorus_buffer, CHORUS_BUFFER_LENGTH,
			chorus_buffer_index_in - (buffer_modulation * (1.0f - delay_pot_filter)) - ((delay_pot_filter) * (CHORUS_BUFFER_LENGTH - 1)));
 8001ec0:	882b      	ldrh	r3, [r5, #0]
	delay_pot_filter = dynamic_smooth_tick(&smooth_delay, delay_pot);
 8001ec2:	ed82 0a00 	vstr	s0, [r2]
			chorus_buffer_index_in - (buffer_modulation * (1.0f - delay_pot_filter)) - ((delay_pot_filter) * (CHORUS_BUFFER_LENGTH - 1)));
 8001ec6:	edd2 7a00 	vldr	s15, [r2]
 8001eca:	ee06 3a90 	vmov	s13, r3
 8001ece:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ed6:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8001eda:	edd4 6a00 	vldr	s13, [r4]
 8001ede:	ed92 7a00 	vldr	s14, [r2]
 8001ee2:	eea7 0aa6 	vfma.f32	s0, s15, s13
	chorus_signal_output = lerp_int16(chorus_buffer, CHORUS_BUFFER_LENGTH,
 8001ee6:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001eea:	4638      	mov	r0, r7
 8001eec:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001fa8 <chorus_tick+0x1d0>
 8001ef0:	eea7 0a67 	vfms.f32	s0, s14, s15
 8001ef4:	f000 fa74 	bl	80023e0 <lerp_int16>

	// clip
	if (chorus_signal_output > 2047.0f) {
 8001ef8:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001fac <chorus_tick+0x1d4>
 8001efc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f04:	dd16      	ble.n	8001f34 <chorus_tick+0x15c>
		chorus_signal_output = 2047.0f;
 8001f06:	4b2a      	ldr	r3, [pc, #168]	; (8001fb0 <chorus_tick+0x1d8>)
 8001f08:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0c:	edc3 7a00 	vstr	s15, [r3]
#ifdef NO_FB_FILTER
	feedback = chorus_signal_output * (feedback_pot * -1.0f);
#endif

	//check for max
	if (chorus_signal_output > max_sig) {
 8001f10:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <chorus_tick+0x1dc>)
	feedback = chorus_signal_output * (feedback_pot * -1.0f);
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <chorus_tick+0x1e0>)
	if (chorus_signal_output > max_sig) {
 8001f14:	ed93 7a00 	vldr	s14, [r3]
	feedback = chorus_signal_output * (feedback_pot * -1.0f);
 8001f18:	edd2 7a00 	vldr	s15, [r2]
	if (chorus_signal_output > max_sig) {
 8001f1c:	eeb4 7ac0 	vcmpe.f32	s14, s0
	feedback = chorus_signal_output * (feedback_pot * -1.0f);
 8001f20:	ee60 7a67 	vnmul.f32	s15, s0, s15
	if (chorus_signal_output > max_sig) {
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	feedback = chorus_signal_output * (feedback_pot * -1.0f);
 8001f28:	edc6 7a00 	vstr	s15, [r6]
		max_sig = chorus_signal_output;
 8001f2c:	bf48      	it	mi
 8001f2e:	ed83 0a00 	vstrmi	s0, [r3]
	}

	return chorus_signal_output;
}
 8001f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (chorus_signal_output < -2047.0f) {
 8001f34:	eddf 7a21 	vldr	s15, [pc, #132]	; 8001fbc <chorus_tick+0x1e4>
		chorus_signal_output = -2047.0f;
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <chorus_tick+0x1d8>)
	if (chorus_signal_output < -2047.0f) {
 8001f3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	chorus_signal_output = lerp_int16(chorus_buffer, CHORUS_BUFFER_LENGTH,
 8001f42:	bf52      	itee	pl
 8001f44:	ed83 0a00 	vstrpl	s0, [r3]
		chorus_signal_output = -2047.0f;
 8001f48:	eeb0 0a67 	vmovmi.f32	s0, s15
 8001f4c:	edc3 7a00 	vstrmi	s15, [r3]
 8001f50:	e7de      	b.n	8001f10 <chorus_tick+0x138>
 8001f52:	bf00      	nop
 8001f54:	2000761c 	.word	0x2000761c
 8001f58:	200075c4 	.word	0x200075c4
 8001f5c:	200075f4 	.word	0x200075f4
 8001f60:	2000008c 	.word	0x2000008c
 8001f64:	20000094 	.word	0x20000094
 8001f68:	200075c8 	.word	0x200075c8
 8001f6c:	2000763c 	.word	0x2000763c
 8001f70:	3f333333 	.word	0x3f333333
 8001f74:	200075e4 	.word	0x200075e4
 8001f78:	4727c5ac 	.word	0x4727c5ac
 8001f7c:	200075e0 	.word	0x200075e0
 8001f80:	3a800000 	.word	0x3a800000
 8001f84:	20007660 	.word	0x20007660
 8001f88:	3cf5c28f 	.word	0x3cf5c28f
 8001f8c:	2000765c 	.word	0x2000765c
 8001f90:	200075cc 	.word	0x200075cc
 8001f94:	08006530 	.word	0x08006530
 8001f98:	2000766c 	.word	0x2000766c
 8001f9c:	200075ec 	.word	0x200075ec
 8001fa0:	20000090 	.word	0x20000090
 8001fa4:	200075f0 	.word	0x200075f0
 8001fa8:	466a5c00 	.word	0x466a5c00
 8001fac:	44ffe000 	.word	0x44ffe000
 8001fb0:	200075e8 	.word	0x200075e8
 8001fb4:	20007664 	.word	0x20007664
 8001fb8:	200075f8 	.word	0x200075f8
 8001fbc:	c4ffe000 	.word	0xc4ffe000

08001fc0 <chorus_control_tick>:

void chorus_control_tick(chorus_params_typedef *chorus) {

	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8001fc0:	4b35      	ldr	r3, [pc, #212]	; (8002098 <chorus_control_tick+0xd8>)
 8001fc2:	88c1      	ldrh	r1, [r0, #6]
 8001fc4:	4a35      	ldr	r2, [pc, #212]	; (800209c <chorus_control_tick+0xdc>)
 8001fc6:	eddf 6a36 	vldr	s13, [pc, #216]	; 80020a0 <chorus_control_tick+0xe0>
 8001fca:	ed92 7a00 	vldr	s14, [r2]
 8001fce:	edd2 7a00 	vldr	s15, [r2]

	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8001fd2:	f8b0 c004 	ldrh.w	ip, [r0, #4]

	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8001fd6:	ed9f 5a33 	vldr	s10, [pc, #204]	; 80020a4 <chorus_control_tick+0xe4>
	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8001fda:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001fde:	ed91 6a00 	vldr	s12, [r1]
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8001fe2:	4931      	ldr	r1, [pc, #196]	; (80020a8 <chorus_control_tick+0xe8>)
	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8001fe4:	ee96 7a26 	vfnms.f32	s14, s12, s13
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8001fe8:	eb03 038c 	add.w	r3, r3, ip, lsl #2
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8001fec:	f8b0 c008 	ldrh.w	ip, [r0, #8]
	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8001ff0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80020ac <chorus_control_tick+0xec>
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8001ff4:	edd3 5a00 	vldr	s11, [r3]
 8001ff8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80020b0 <chorus_control_tick+0xf0>

	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 8001ffc:	8843      	ldrh	r3, [r0, #2]
 8001ffe:	8800      	ldrh	r0, [r0, #0]
	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8002000:	eee7 7a26 	vfma.f32	s15, s14, s13
	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 8002004:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
	lfo_rate_pot += ((float_expo_table[chorus->lfo_rate] * 75.0f) - lfo_rate_pot) * 0.03f;
 8002008:	edc2 7a00 	vstr	s15, [r2]
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 800200c:	edd1 7a00 	vldr	s15, [r1]
 8002010:	ed91 7a00 	vldr	s14, [r1]
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <chorus_control_tick+0xf4>)
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8002016:	eed5 7a86 	vfnms.f32	s15, s11, s12
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 800201a:	ee05 ca90 	vmov	s11, ip
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 800201e:	eea7 7aa6 	vfma.f32	s14, s15, s13
	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 8002022:	ee07 0a90 	vmov	s15, r0
	lfo_amt_pot += ((float_expo_table[chorus->lfo_amount] * (CHORUS_BUFFER_LENGTH - 1)) - lfo_amt_pot) * 0.03f;
 8002026:	ed81 7a00 	vstr	s14, [r1]
	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 800202a:	ee07 3a10 	vmov	s14, r3
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 800202e:	ed92 6a00 	vldr	s12, [r2]
	}
	if (delay_input < 0.0f) {
		delay_input = 0.0f;
	}

	delay_pot += (((delay_input) / 1024.0f) - delay_pot) * 0.01f;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <chorus_control_tick+0xf8>)
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8002034:	eef8 5ae5 	vcvt.f32.s32	s11, s11
	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 8002038:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8002040:	ee95 6a85 	vfnms.f32	s12, s11, s10
	float delay_input = chorus->delay + ((chorus->delay_cv - magic_cv_offset) * 0.75f);
 8002044:	eef6 5a08 	vmov.f32	s11, #104	; 0x3f400000  0.750
 8002048:	eee7 7a25 	vfma.f32	s15, s14, s11
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 800204c:	ed92 7a00 	vldr	s14, [r2]
	delay_pot += (((delay_input) / 1024.0f) - delay_pot) * 0.01f;
 8002050:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80020bc <chorus_control_tick+0xfc>
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8002054:	eea6 7a26 	vfma.f32	s14, s12, s13
	delay_pot += (((delay_input) / 1024.0f) - delay_pot) * 0.01f;
 8002058:	eef4 7ae5 	vcmpe.f32	s15, s11
 800205c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002060:	bf88      	it	hi
 8002062:	eef0 7a65 	vmovhi.f32	s15, s11
	feedback_pot += ((chorus->feedback / 1024.0f) - feedback_pot) * 0.03f;
 8002066:	ed82 7a00 	vstr	s14, [r2]
	delay_pot += (((delay_input) / 1024.0f) - delay_pot) * 0.01f;
 800206a:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020c0 <chorus_control_tick+0x100>
 800206e:	ed93 7a00 	vldr	s14, [r3]
 8002072:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	bfb8      	it	lt
 800207c:	eef0 7a66 	vmovlt.f32	s15, s13
 8002080:	ee97 7a85 	vfnms.f32	s14, s15, s10
 8002084:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80020c4 <chorus_control_tick+0x104>
 8002088:	edd3 7a00 	vldr	s15, [r3]
 800208c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8002090:	edc3 7a00 	vstr	s15, [r3]

}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	08006d30 	.word	0x08006d30
 800209c:	20007660 	.word	0x20007660
 80020a0:	42960000 	.word	0x42960000
 80020a4:	3a800000 	.word	0x3a800000
 80020a8:	2000765c 	.word	0x2000765c
 80020ac:	3cf5c28f 	.word	0x3cf5c28f
 80020b0:	466a5c00 	.word	0x466a5c00
 80020b4:	200075f8 	.word	0x200075f8
 80020b8:	200075ec 	.word	0x200075ec
 80020bc:	447fc000 	.word	0x447fc000
 80020c0:	00000000 	.word	0x00000000
 80020c4:	3c23d70a 	.word	0x3c23d70a

080020c8 <chorus_init>:

void chorus_init() {
 80020c8:	b508      	push	{r3, lr}
	dynamic_smooth_init(&smooth_delay, 0.05f, 0.5f);
 80020ca:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002108 <chorus_init+0x40>
 80020ce:	480f      	ldr	r0, [pc, #60]	; (800210c <chorus_init+0x44>)
 80020d0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80020d4:	f000 f8de 	bl	8002294 <dynamic_smooth_init>

	svf_init(&input_lowpass, LP_INPUT_CUTOFF, 0.707f);
 80020d8:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8002110 <chorus_init+0x48>
 80020dc:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002114 <chorus_init+0x4c>
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <chorus_init+0x50>)
 80020e2:	f7ff fe2f 	bl	8001d44 <svf_init>
	svf_init(&input_highpass, HP_INPUT_CUTOFF, 1.5f);
 80020e6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800211c <chorus_init+0x54>
 80020ea:	480d      	ldr	r0, [pc, #52]	; (8002120 <chorus_init+0x58>)
 80020ec:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80020f0:	f7ff fe28 	bl	8001d44 <svf_init>
	svf_init(&feedback_svf, FB_SVF_CUTOFF, 1.0f);
}
 80020f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	svf_init(&feedback_svf, FB_SVF_CUTOFF, 1.0f);
 80020f8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002124 <chorus_init+0x5c>
 80020fc:	480a      	ldr	r0, [pc, #40]	; (8002128 <chorus_init+0x60>)
 80020fe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002102:	f7ff be1f 	b.w	8001d44 <svf_init>
 8002106:	bf00      	nop
 8002108:	3d4ccccd 	.word	0x3d4ccccd
 800210c:	2000766c 	.word	0x2000766c
 8002110:	3f34fdf4 	.word	0x3f34fdf4
 8002114:	45fa0000 	.word	0x45fa0000
 8002118:	2000763c 	.word	0x2000763c
 800211c:	43160000 	.word	0x43160000
 8002120:	2000761c 	.word	0x2000761c
 8002124:	459c4000 	.word	0x459c4000
 8002128:	200075fc 	.word	0x200075fc

0800212c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800212c:	b500      	push	{lr}
 800212e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002130:	2230      	movs	r2, #48	; 0x30
 8002132:	2100      	movs	r1, #0
 8002134:	4668      	mov	r0, sp
 8002136:	f004 f963 	bl	8006400 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800213a:	4815      	ldr	r0, [pc, #84]	; (8002190 <MX_DAC1_Init+0x64>)
 800213c:	4b15      	ldr	r3, [pc, #84]	; (8002194 <MX_DAC1_Init+0x68>)
 800213e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002140:	f001 fa7c 	bl	800363c <HAL_DAC_Init>
 8002144:	b9c8      	cbnz	r0, 800217a <MX_DAC1_Init+0x4e>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002146:	2102      	movs	r1, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002148:	2200      	movs	r2, #0
  sConfig.DAC_SignedFormat = DISABLE;
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800214a:	2301      	movs	r3, #1
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800214c:	9100      	str	r1, [sp, #0]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800214e:	4810      	ldr	r0, [pc, #64]	; (8002190 <MX_DAC1_Init+0x64>)
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002150:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002154:	4669      	mov	r1, sp
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002156:	e9cd 2202 	strd	r2, r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800215a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800215e:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002160:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002162:	f001 facf 	bl	8003704 <HAL_DAC_ConfigChannel>
 8002166:	b980      	cbnz	r0, 800218a <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002168:	4809      	ldr	r0, [pc, #36]	; (8002190 <MX_DAC1_Init+0x64>)
 800216a:	2210      	movs	r2, #16
 800216c:	4669      	mov	r1, sp
 800216e:	f001 fac9 	bl	8003704 <HAL_DAC_ConfigChannel>
 8002172:	b928      	cbnz	r0, 8002180 <MX_DAC1_Init+0x54>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002174:	b00d      	add	sp, #52	; 0x34
 8002176:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800217a:	f000 fa27 	bl	80025cc <Error_Handler>
 800217e:	e7e2      	b.n	8002146 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8002180:	f000 fa24 	bl	80025cc <Error_Handler>
}
 8002184:	b00d      	add	sp, #52	; 0x34
 8002186:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800218a:	f000 fa1f 	bl	80025cc <Error_Handler>
 800218e:	e7eb      	b.n	8002168 <MX_DAC1_Init+0x3c>
 8002190:	20007960 	.word	0x20007960
 8002194:	50000800 	.word	0x50000800

08002198 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002198:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 800219a:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_DAC_MspInit+0x70>)
 800219c:	6801      	ldr	r1, [r0, #0]
{
 800219e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 80021a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80021a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80021ac:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 80021ae:	d002      	beq.n	80021b6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80021b0:	b009      	add	sp, #36	; 0x24
 80021b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021be:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002200 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80021ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021cc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80021d0:	9200      	str	r2, [sp, #0]
 80021d2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	64da      	str	r2, [r3, #76]	; 0x4c
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e4:	a902      	add	r1, sp, #8
 80021e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021ea:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f0:	f001 fcb2 	bl	8003b58 <HAL_GPIO_Init>
}
 80021f4:	b009      	add	sp, #36	; 0x24
 80021f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021fa:	bf00      	nop
 80021fc:	f3af 8000 	nop.w
 8002200:	00000030 	.word	0x00000030
 8002204:	00000003 	.word	0x00000003
 8002208:	50000800 	.word	0x50000800

0800220c <DAC_Start>:
  }
}

/* USER CODE BEGIN 1 */

void DAC_Start() {
 800220c:	b510      	push	{r4, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800220e:	4c0c      	ldr	r4, [pc, #48]	; (8002240 <DAC_Start+0x34>)
 8002210:	2100      	movs	r1, #0
 8002212:	4620      	mov	r0, r4
 8002214:	f001 fa28 	bl	8003668 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002218:	2110      	movs	r1, #16
 800221a:	4620      	mov	r0, r4
 800221c:	f001 fa24 	bl	8003668 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2047);
 8002220:	2200      	movs	r2, #0
 8002222:	4611      	mov	r1, r2
 8002224:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002228:	4620      	mov	r0, r4
 800222a:	f001 fa53 	bl	80036d4 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2047);
 800222e:	4620      	mov	r0, r4
 8002230:	f240 73ff 	movw	r3, #2047	; 0x7ff
}
 8002234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2047);
 8002238:	2200      	movs	r2, #0
 800223a:	2110      	movs	r1, #16
 800223c:	f001 ba4a 	b.w	80036d4 <HAL_DAC_SetValue>
 8002240:	20007960 	.word	0x20007960

08002244 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <MX_DMA_Init+0x4c>)
{
 8002246:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002248:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800224a:	f040 0004 	orr.w	r0, r0, #4
 800224e:	6498      	str	r0, [r3, #72]	; 0x48
 8002250:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 8002252:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002254:	f004 0404 	and.w	r4, r4, #4
 8002258:	9400      	str	r4, [sp, #0]
 800225a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800225c:	6c9c      	ldr	r4, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800225e:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002260:	430c      	orrs	r4, r1
 8002262:	649c      	str	r4, [r3, #72]	; 0x48
 8002264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002266:	400b      	ands	r3, r1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002268:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800226a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800226c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800226e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002270:	f001 f97e 	bl	8003570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002274:	200b      	movs	r0, #11
 8002276:	f001 f9b9 	bl	80035ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800227a:	200c      	movs	r0, #12
 800227c:	2200      	movs	r2, #0
 800227e:	2102      	movs	r1, #2
 8002280:	f001 f976 	bl	8003570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002284:	200c      	movs	r0, #12

}
 8002286:	b002      	add	sp, #8
 8002288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800228c:	f001 b9ae 	b.w	80035ec <HAL_NVIC_EnableIRQ>
 8002290:	40021000 	.word	0x40021000

08002294 <dynamic_smooth_init>:
	} else {
		return a;
	}
}

void dynamic_smooth_init(dynamic_smooth* _smooth, float _base, float _sensitivity) {
 8002294:	b510      	push	{r4, lr}
	float basefreq, wc, gc;

	//init values
	basefreq = _base;
	wc = basefreq / DYN_SMOOTH_SAMPLE_RATE;
	gc = tan(3.14f * wc);
 8002296:	eddf 7a18 	vldr	s15, [pc, #96]	; 80022f8 <dynamic_smooth_init+0x64>
 800229a:	ee60 7a27 	vmul.f32	s15, s0, s15
void dynamic_smooth_init(dynamic_smooth* _smooth, float _base, float _sensitivity) {
 800229e:	4604      	mov	r4, r0
 80022a0:	ed2d 8b02 	vpush	{d8}
	gc = tan(3.14f * wc);
 80022a4:	ee17 0a90 	vmov	r0, s15
void dynamic_smooth_init(dynamic_smooth* _smooth, float _base, float _sensitivity) {
 80022a8:	eeb0 8a60 	vmov.f32	s16, s1
	gc = tan(3.14f * wc);
 80022ac:	f7fe f918 	bl	80004e0 <__aeabi_f2d>
 80022b0:	ec41 0b10 	vmov	d0, r0, r1
 80022b4:	f003 f804 	bl	80052c0 <tan>
 80022b8:	ec51 0b10 	vmov	r0, r1, d0
 80022bc:	f7fe fc2a 	bl	8000b14 <__aeabi_d2f>
 80022c0:	ee07 0a90 	vmov	s15, r0
	_smooth->g0 = 2*gc/(1+gc);
 80022c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022c8:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80022cc:	ee77 7a87 	vadd.f32	s15, s15, s14
	_smooth->sense = _sensitivity * 4.0f;
 80022d0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
	_smooth->g0 = 2*gc/(1+gc);
 80022d4:	ee86 7a27 	vdiv.f32	s14, s12, s15

	//tick values
	_smooth->low1 = 0.0f;
 80022d8:	2300      	movs	r3, #0
 80022da:	60a3      	str	r3, [r4, #8]
	_smooth->low2 = 0.0f;
 80022dc:	60e3      	str	r3, [r4, #12]
	_smooth->low1z = 0.0f;
 80022de:	6123      	str	r3, [r4, #16]
	_smooth->low2z = 0.0f;
 80022e0:	6163      	str	r3, [r4, #20]
	_smooth->bandz = 0.0f;
 80022e2:	61a3      	str	r3, [r4, #24]
	_smooth->out = 0.0f;
 80022e4:	61e3      	str	r3, [r4, #28]
	_smooth->sense = _sensitivity * 4.0f;
 80022e6:	ee28 8a26 	vmul.f32	s16, s16, s13
	_smooth->g0 = 2*gc/(1+gc);
 80022ea:	ed84 7a00 	vstr	s14, [r4]
	_smooth->sense = _sensitivity * 4.0f;
 80022ee:	ed84 8a01 	vstr	s16, [r4, #4]
}
 80022f2:	ecbd 8b02 	vpop	{d8}
 80022f6:	bd10      	pop	{r4, pc}
 80022f8:	38787e24 	.word	0x38787e24

080022fc <dynamic_smooth_tick>:

float dynamic_smooth_tick(dynamic_smooth* _smooth, float in) {
	float g;
	_smooth->low1z = _smooth->low1;
 80022fc:	edd0 6a02 	vldr	s13, [r0, #8]
	_smooth->low2z = _smooth->low2;
 8002300:	edd0 7a03 	vldr	s15, [r0, #12]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8002304:	ed90 6a01 	vldr	s12, [r0, #4]
 8002308:	ed90 7a00 	vldr	s14, [r0]
	_smooth->low1z = _smooth->low1;
 800230c:	edc0 6a04 	vstr	s13, [r0, #16]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8002310:	ee77 5ae6 	vsub.f32	s11, s15, s13
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8002314:	ee30 0a66 	vsub.f32	s0, s0, s13
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8002318:	eeb0 5ae5 	vabs.f32	s10, s11
 800231c:	eea5 7a06 	vfma.f32	s14, s10, s12
	return ((a) < (b) ? a : b);
 8002320:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002324:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	bf88      	it	hi
 800232e:	eeb0 7a46 	vmovhi.f32	s14, s12
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8002332:	eeb0 6a66 	vmov.f32	s12, s13
 8002336:	eea0 6a07 	vfma.f32	s12, s0, s14
	_smooth->low2z = _smooth->low2;
 800233a:	edc0 7a05 	vstr	s15, [r0, #20]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 800233e:	ee76 6a67 	vsub.f32	s13, s12, s15
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8002342:	edc0 5a06 	vstr	s11, [r0, #24]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8002346:	eee6 7a87 	vfma.f32	s15, s13, s14
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 800234a:	ed80 6a02 	vstr	s12, [r0, #8]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 800234e:	eeb0 0a67 	vmov.f32	s0, s15
 8002352:	edc0 7a03 	vstr	s15, [r0, #12]

	return _smooth->low2;
}
 8002356:	4770      	bx	lr

08002358 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002358:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	2400      	movs	r4, #0
{
 800235c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002362:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_GPIO_Init+0x80>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 800236c:	4d1b      	ldr	r5, [pc, #108]	; (80023dc <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236e:	f041 0101 	orr.w	r1, r1, #1
 8002372:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002374:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002376:	f001 0101 	and.w	r1, r1, #1
 800237a:	9100      	str	r1, [sp, #0]
 800237c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002380:	f041 0102 	orr.w	r1, r1, #2
 8002384:	64d9      	str	r1, [r3, #76]	; 0x4c
 8002386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002388:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 800238c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 8002390:	21c0      	movs	r1, #192	; 0xc0
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002396:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 8002398:	f001 fcd8 	bl	8003d4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 800239c:	4622      	mov	r2, r4
 800239e:	4628      	mov	r0, r5
 80023a0:	2101      	movs	r1, #1
 80023a2:	f001 fcd3 	bl	8003d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80023a6:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80023aa:	22c0      	movs	r2, #192	; 0xc0
 80023ac:	2301      	movs	r3, #1
 80023ae:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80023b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023bc:	f001 fbcc 	bl	8003b58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUX_A_Pin;
 80023c0:	2201      	movs	r2, #1
 80023c2:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 80023c4:	a902      	add	r1, sp, #8
 80023c6:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MUX_A_Pin;
 80023c8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80023cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f001 fbc2 	bl	8003b58 <HAL_GPIO_Init>

}
 80023d4:	b009      	add	sp, #36	; 0x24
 80023d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000400 	.word	0x48000400

080023e0 <lerp_int16>:
float lerp_int16(int16_t _buf[], uint16_t _bufsize, float position) {
	uint16_t integer_part;
	float float_part;
	int16_t this_sample, next_sample;

	if (position < 0.0f) {
 80023e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80023e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
float lerp_int16(int16_t _buf[], uint16_t _bufsize, float position) {
 80023e8:	b500      	push	{lr}
	if (position < 0.0f) {
 80023ea:	d505      	bpl.n	80023f8 <lerp_int16+0x18>
		position += _bufsize;
 80023ec:	ee07 1a90 	vmov	s15, r1
 80023f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f4:	ee30 0a27 	vadd.f32	s0, s0, s15
	}

	if (position > (_bufsize - 1)) {
 80023f8:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 80023fc:	ee07 ca90 	vmov	s15, ip
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	eef4 7ac0 	vcmpe.f32	s15, s0
 8002408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240c:	d505      	bpl.n	800241a <lerp_int16+0x3a>
		position -= _bufsize;
 800240e:	ee07 1a90 	vmov	s15, r1
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	ee30 0a67 	vsub.f32	s0, s0, s15
	}

	integer_part = (uint16_t) (position);
 800241a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	b29b      	uxth	r3, r3
	float_part = position - integer_part;
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	this_sample = _buf[integer_part];
	if (integer_part < (_bufsize - 1)) {
 800242c:	459c      	cmp	ip, r3
	float_part = position - integer_part;
 800242e:	ee70 7a67 	vsub.f32	s15, s0, s15
	this_sample = _buf[integer_part];
 8002432:	f930 2013 	ldrsh.w	r2, [r0, r3, lsl #1]
 8002436:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	if (integer_part < (_bufsize - 1)) {
 800243a:	dd0f      	ble.n	800245c <lerp_int16+0x7c>
		next_sample = _buf[integer_part + 1];
 800243c:	4470      	add	r0, lr
 800243e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
	} else {
		next_sample = _buf[(integer_part + 1) - _bufsize];
	}

	return (((next_sample - this_sample) * float_part) + this_sample);
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	ee07 3a10 	vmov	s14, r3
 8002448:	ee06 2a90 	vmov	s13, r2
 800244c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002450:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
}
 8002454:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002458:	f85d fb04 	ldr.w	pc, [sp], #4
		next_sample = _buf[(integer_part + 1) - _bufsize];
 800245c:	3301      	adds	r3, #1
 800245e:	1a59      	subs	r1, r3, r1
 8002460:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 8002464:	e7ed      	b.n	8002442 <lerp_int16+0x62>
 8002466:	bf00      	nop

08002468 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002468:	b510      	push	{r4, lr}
 800246a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800246c:	2238      	movs	r2, #56	; 0x38
 800246e:	2100      	movs	r1, #0
 8002470:	a806      	add	r0, sp, #24
 8002472:	f003 ffc5 	bl	8006400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002476:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002478:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800247c:	e9cd 3300 	strd	r3, r3, [sp]
 8002480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002484:	9304      	str	r3, [sp, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002486:	f001 fc67 	bl	8003d58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800248a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002490:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002492:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002494:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 12;
 8002496:	220c      	movs	r2, #12
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002498:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 12;
 800249a:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800249e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80024a0:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024a2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024a6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024aa:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80024ac:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ae:	f001 fcd1 	bl	8003e54 <HAL_RCC_OscConfig>
 80024b2:	b108      	cbz	r0, 80024b8 <_Z18SystemClock_Configv+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024b6:	e7fe      	b.n	80024b6 <_Z18SystemClock_Configv+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b8:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80024e0 <_Z18SystemClock_Configv+0x78>
 80024bc:	ed8d 7b00 	vstr	d7, [sp]
 80024c0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80024e8 <_Z18SystemClock_Configv+0x80>
 80024c4:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024c6:	4621      	mov	r1, r4
 80024c8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ca:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ce:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024d0:	f001 ff44 	bl	800435c <HAL_RCC_ClockConfig>
 80024d4:	b108      	cbz	r0, 80024da <_Z18SystemClock_Configv+0x72>
 80024d6:	b672      	cpsid	i
	while (1) {
 80024d8:	e7fe      	b.n	80024d8 <_Z18SystemClock_Configv+0x70>
}
 80024da:	b014      	add	sp, #80	; 0x50
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	bf00      	nop
 80024e0:	0000000f 	.word	0x0000000f
 80024e4:	00000003 	.word	0x00000003
	...

080024f0 <main>:
{
 80024f0:	b508      	push	{r3, lr}
  HAL_Init();
 80024f2:	f000 fb1f 	bl	8002b34 <HAL_Init>
  SystemClock_Config();
 80024f6:	f7ff ffb7 	bl	8002468 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 80024fa:	f7ff ff2d 	bl	8002358 <MX_GPIO_Init>
  MX_DMA_Init();
 80024fe:	f7ff fea1 	bl	8002244 <MX_DMA_Init>
  MX_ADC1_Init();
 8002502:	f7ff fac5 	bl	8001a90 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002506:	f7ff fb17 	bl	8001b38 <MX_ADC2_Init>
  MX_DAC1_Init();
 800250a:	f7ff fe0f 	bl	800212c <MX_DAC1_Init>
  MX_TIM2_Init();
 800250e:	f000 f9ef 	bl	80028f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002512:	f000 f941 	bl	8002798 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002516:	f000 fa25 	bl	8002964 <MX_TIM3_Init>
	DAC_Start();
 800251a:	f7ff fe77 	bl	800220c <DAC_Start>
	ADC1_Start();
 800251e:	f7ff fbfd 	bl	8001d1c <ADC1_Start>
	ADC2_Start();
 8002522:	f7ff fc05 	bl	8001d30 <ADC2_Start>
	TIM1_Start();
 8002526:	f000 faa3 	bl	8002a70 <TIM1_Start>
	TIM2_Start();
 800252a:	f000 faa7 	bl	8002a7c <TIM2_Start>
	TIM3_Start();
 800252e:	f000 faab 	bl	8002a88 <TIM3_Start>
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <main+0x64>)
	DWT->CYCCNT = 0;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <main+0x68>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002536:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
	DWT->CYCCNT = 0;
 800253a:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800253c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002540:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
	DWT->CYCCNT = 0;
 8002544:	6058      	str	r0, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f042 0201 	orr.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
	chorus_init();
 800254e:	f7ff fdbb 	bl	80020c8 <chorus_init>
	while (1) {
 8002552:	e7fe      	b.n	8002552 <main+0x62>
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	e0001000 	.word	0xe0001000

0800255c <HAL_ADC_ConvCpltCallback>:
	if (hadc->Instance == ADC1) {
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002562:	d000      	beq.n	8002566 <HAL_ADC_ConvCpltCallback+0xa>
 8002564:	4770      	bx	lr
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002566:	b510      	push	{r4, lr}
		ADC1_channel_data[mux_channel++] = ADC1_raw_data;
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_ADC_ConvCpltCallback+0x60>)
 800256a:	4c15      	ldr	r4, [pc, #84]	; (80025c0 <HAL_ADC_ConvCpltCallback+0x64>)
 800256c:	881a      	ldrh	r2, [r3, #0]
 800256e:	7823      	ldrb	r3, [r4, #0]
		HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin,
 8002570:	4814      	ldr	r0, [pc, #80]	; (80025c4 <HAL_ADC_ConvCpltCallback+0x68>)
		ADC1_channel_data[mux_channel++] = ADC1_raw_data;
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	3301      	adds	r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	7023      	strb	r3, [r4, #0]
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800257c:	b292      	uxth	r2, r2
 800257e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		if (mux_channel > NUM_ADC1_CHANNELS) {
 8002582:	7823      	ldrb	r3, [r4, #0]
 8002584:	2b05      	cmp	r3, #5
			mux_channel = 0;
 8002586:	bf84      	itt	hi
 8002588:	2300      	movhi	r3, #0
 800258a:	7023      	strbhi	r3, [r4, #0]
				(GPIO_PinState) (mux_channel & 1));
 800258c:	7822      	ldrb	r2, [r4, #0]
		HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin,
 800258e:	2101      	movs	r1, #1
 8002590:	f002 0201 	and.w	r2, r2, #1
 8002594:	f001 fbda 	bl	8003d4c <HAL_GPIO_WritePin>
				(GPIO_PinState) ((mux_channel >> 1) & 1));
 8002598:	7822      	ldrb	r2, [r4, #0]
		HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin,
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f001 fbd2 	bl	8003d4c <HAL_GPIO_WritePin>
				(GPIO_PinState) ((mux_channel >> 2) & 1));
 80025a8:	7822      	ldrb	r2, [r4, #0]
		HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin,
 80025aa:	2140      	movs	r1, #64	; 0x40
}
 80025ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin,
 80025b0:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f001 bbc8 	b.w	8003d4c <HAL_GPIO_WritePin>
 80025bc:	20000086 	.word	0x20000086
 80025c0:	20007668 	.word	0x20007668
 80025c4:	48000400 	.word	0x48000400
 80025c8:	2000007c 	.word	0x2000007c

080025cc <Error_Handler>:
 80025cc:	b672      	cpsid	i
	while (1) {
 80025ce:	e7fe      	b.n	80025ce <Error_Handler+0x2>

080025d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d0:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_MspInit+0x30>)
 80025d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	661a      	str	r2, [r3, #96]	; 0x60
 80025da:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80025dc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	f002 0201 	and.w	r2, r2, #1
 80025e2:	9200      	str	r2, [sp, #0]
 80025e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ec:	659a      	str	r2, [r3, #88]	; 0x58
 80025ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f8:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80025fa:	f001 bc23 	b.w	8003e44 <HAL_PWREx_DisableUCPDDeadBattery>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002604:	e7fe      	b.n	8002604 <NMI_Handler>
 8002606:	bf00      	nop

08002608 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <HardFault_Handler>
 800260a:	bf00      	nop

0800260c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <MemManage_Handler>
 800260e:	bf00      	nop

08002610 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <BusFault_Handler>
 8002612:	bf00      	nop

08002614 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler>
 8002616:	bf00      	nop

08002618 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <DebugMon_Handler>:
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <PendSV_Handler>:
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002624:	f000 ba96 	b.w	8002b54 <HAL_IncTick>

08002628 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002628:	4801      	ldr	r0, [pc, #4]	; (8002630 <DMA1_Channel1_IRQHandler+0x8>)
 800262a:	f001 ba47 	b.w	8003abc <HAL_DMA_IRQHandler>
 800262e:	bf00      	nop
 8002630:	20007900 	.word	0x20007900

08002634 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002634:	4801      	ldr	r0, [pc, #4]	; (800263c <DMA1_Channel2_IRQHandler+0x8>)
 8002636:	f001 ba41 	b.w	8003abc <HAL_DMA_IRQHandler>
 800263a:	bf00      	nop
 800263c:	200078a0 	.word	0x200078a0

08002640 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002640:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	tim2_tick_end = DWT->CYCCNT;
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8002642:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <TIM2_IRQHandler+0x78>)
	tim2_tick_end = DWT->CYCCNT;
 8002644:	4c1d      	ldr	r4, [pc, #116]	; (80026bc <TIM2_IRQHandler+0x7c>)
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8002646:	6810      	ldr	r0, [r2, #0]
	tim2_tick_end = DWT->CYCCNT;
 8002648:	6863      	ldr	r3, [r4, #4]
 800264a:	4d1d      	ldr	r5, [pc, #116]	; (80026c0 <TIM2_IRQHandler+0x80>)
	tim2_tick_start = DWT->CYCCNT;

	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 800264c:	491d      	ldr	r1, [pc, #116]	; (80026c4 <TIM2_IRQHandler+0x84>)
	tim2_tick_end = DWT->CYCCNT;
 800264e:	602b      	str	r3, [r5, #0]
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8002650:	1a1b      	subs	r3, r3, r0
 8002652:	481d      	ldr	r0, [pc, #116]	; (80026c8 <TIM2_IRQHandler+0x88>)
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8002654:	6809      	ldr	r1, [r1, #0]
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8002656:	6003      	str	r3, [r0, #0]
	tim2_tick_start = DWT->CYCCNT;
 8002658:	6860      	ldr	r0, [r4, #4]
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 800265a:	690b      	ldr	r3, [r1, #16]
	tim2_tick_start = DWT->CYCCNT;
 800265c:	6010      	str	r0, [r2, #0]
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 800265e:	07da      	lsls	r2, r3, #31
 8002660:	d502      	bpl.n	8002668 <TIM2_IRQHandler+0x28>
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8002662:	68cb      	ldr	r3, [r1, #12]
 8002664:	07db      	lsls	r3, r3, #31
 8002666:	d400      	bmi.n	800266a <TIM2_IRQHandler+0x2a>
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
#endif

  /* USER CODE END TIM2_IRQn 1 */
}
 8002668:	bd38      	pop	{r3, r4, r5, pc}
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 800266a:	f06f 0201 	mvn.w	r2, #1
					chorus_tick(ADC2_raw_data - 2048) + 2048);
 800266e:	4b17      	ldr	r3, [pc, #92]	; (80026cc <TIM2_IRQHandler+0x8c>)
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8002670:	610a      	str	r2, [r1, #16]
			chorus_tick_start = DWT->CYCCNT;
 8002672:	6862      	ldr	r2, [r4, #4]
					chorus_tick(ADC2_raw_data - 2048) + 2048);
 8002674:	881b      	ldrh	r3, [r3, #0]
			chorus_tick_start = DWT->CYCCNT;
 8002676:	4d16      	ldr	r5, [pc, #88]	; (80026d0 <TIM2_IRQHandler+0x90>)
					chorus_tick(ADC2_raw_data - 2048) + 2048);
 8002678:	b29b      	uxth	r3, r3
 800267a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800267e:	ee00 3a10 	vmov	s0, r3
 8002682:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
			chorus_tick_start = DWT->CYCCNT;
 8002686:	602a      	str	r2, [r5, #0]
					chorus_tick(ADC2_raw_data - 2048) + 2048);
 8002688:	f7ff fba6 	bl	8001dd8 <chorus_tick>
 800268c:	eddf 7a11 	vldr	s15, [pc, #68]	; 80026d4 <TIM2_IRQHandler+0x94>
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002690:	4811      	ldr	r0, [pc, #68]	; (80026d8 <TIM2_IRQHandler+0x98>)
					chorus_tick(ADC2_raw_data - 2048) + 2048);
 8002692:	ee30 0a27 	vadd.f32	s0, s0, s15
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8002696:	2200      	movs	r2, #0
 8002698:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800269c:	4611      	mov	r1, r2
 800269e:	ee17 3a90 	vmov	r3, s15
 80026a2:	f001 f817 	bl	80036d4 <HAL_DAC_SetValue>
			chorus_tick_end = DWT->CYCCNT;
 80026a6:	6862      	ldr	r2, [r4, #4]
			chorus_ticks = chorus_tick_end - chorus_tick_start;
 80026a8:	682b      	ldr	r3, [r5, #0]
			chorus_tick_end = DWT->CYCCNT;
 80026aa:	480c      	ldr	r0, [pc, #48]	; (80026dc <TIM2_IRQHandler+0x9c>)
			chorus_ticks = chorus_tick_end - chorus_tick_start;
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <TIM2_IRQHandler+0xa0>)
			chorus_tick_end = DWT->CYCCNT;
 80026ae:	6002      	str	r2, [r0, #0]
			chorus_ticks = chorus_tick_end - chorus_tick_start;
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	600b      	str	r3, [r1, #0]
}
 80026b4:	bd38      	pop	{r3, r4, r5, pc}
 80026b6:	bf00      	nop
 80026b8:	20007978 	.word	0x20007978
 80026bc:	e0001000 	.word	0xe0001000
 80026c0:	20007988 	.word	0x20007988
 80026c4:	20007a24 	.word	0x20007a24
 80026c8:	20007980 	.word	0x20007980
 80026cc:	20000088 	.word	0x20000088
 80026d0:	20007984 	.word	0x20007984
 80026d4:	45000000 	.word	0x45000000
 80026d8:	20007960 	.word	0x20007960
 80026dc:	20007974 	.word	0x20007974
 80026e0:	2000797c 	.word	0x2000797c

080026e4 <TIM3_IRQHandler>:
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) {
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <TIM3_IRQHandler+0x70>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	07d1      	lsls	r1, r2, #31
 80026ec:	d502      	bpl.n	80026f4 <TIM3_IRQHandler+0x10>
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) != RESET) {
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	d400      	bmi.n	80026f6 <TIM3_IRQHandler+0x12>
 80026f4:	4770      	bx	lr
{
 80026f6:	b500      	push	{lr}
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);

			chorus_params_typedef params;

			params.delay = ADC1_channel_data[DELAY_POT_INDEX] >> 2;
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <TIM3_IRQHandler+0x74>)
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 80026fa:	f06f 0101 	mvn.w	r1, #1
 80026fe:	6119      	str	r1, [r3, #16]
			params.delay = ADC1_channel_data[DELAY_POT_INDEX] >> 2;
 8002700:	f8b2 c002 	ldrh.w	ip, [r2, #2]
			params.delay_cv = ADC1_channel_data[CV_INPUT_INDEX];
 8002704:	f8b2 e004 	ldrh.w	lr, [r2, #4]
			params.feedback = ADC1_channel_data[FB_POT_INDEX] >> 2;
 8002708:	8910      	ldrh	r0, [r2, #8]
			params.lfo_rate = ADC1_channel_data[RATE_POT_INDEX] >> 2;
 800270a:	88d1      	ldrh	r1, [r2, #6]
			params.lfo_amount = ADC1_channel_data[AMT_POT_INDEX] >> 2;
 800270c:	8813      	ldrh	r3, [r2, #0]
{
 800270e:	b085      	sub	sp, #20
			params.feedback = ADC1_channel_data[FB_POT_INDEX] >> 2;
 8002710:	f3c0 008d 	ubfx	r0, r0, #2, #14
			params.lfo_rate = ADC1_channel_data[RATE_POT_INDEX] >> 2;
 8002714:	f3c1 028d 	ubfx	r2, r1, #2, #14
			params.delay = ADC1_channel_data[DELAY_POT_INDEX] >> 2;
 8002718:	f3cc 0c8d 	ubfx	ip, ip, #2, #14
			params.lfo_amount = ADC1_channel_data[AMT_POT_INDEX] >> 2;
 800271c:	f3c3 038d 	ubfx	r3, r3, #2, #14
			params.feedback = ADC1_channel_data[FB_POT_INDEX] >> 2;
 8002720:	f8ad 000c 	strh.w	r0, [sp, #12]

			chorus_control_tick(&params);
 8002724:	a801      	add	r0, sp, #4
			params.lfo_rate = ADC1_channel_data[RATE_POT_INDEX] >> 2;
 8002726:	f8ad 200a 	strh.w	r2, [sp, #10]
			params.lfo_amount = ADC1_channel_data[AMT_POT_INDEX] >> 2;
 800272a:	f8ad 3008 	strh.w	r3, [sp, #8]
			params.delay = ADC1_channel_data[DELAY_POT_INDEX] >> 2;
 800272e:	f8ad c004 	strh.w	ip, [sp, #4]
			params.delay_cv = ADC1_channel_data[CV_INPUT_INDEX];
 8002732:	f8ad e006 	strh.w	lr, [sp, #6]
			chorus_control_tick(&params);
 8002736:	f7ff fc43 	bl	8001fc0 <chorus_control_tick>
			TIM1->CCR1 = (uint16_t) chorus_lfo.output;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <TIM3_IRQHandler+0x78>)
 800273c:	4a08      	ldr	r2, [pc, #32]	; (8002760 <TIM3_IRQHandler+0x7c>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002746:	ee17 3a90 	vmov	r3, s15
 800274a:	b29b      	uxth	r3, r3
 800274c:	6353      	str	r3, [r2, #52]	; 0x34
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
#endif

  /* USER CODE END TIM3_IRQn 1 */
}
 800274e:	b005      	add	sp, #20
 8002750:	f85d fb04 	ldr.w	pc, [sp], #4
 8002754:	2000798c 	.word	0x2000798c
 8002758:	2000007c 	.word	0x2000007c
 800275c:	200075cc 	.word	0x200075cc
 8002760:	40012c00 	.word	0x40012c00

08002764 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002764:	2001      	movs	r0, #1
 8002766:	4770      	bx	lr

08002768 <_kill>:

int _kill(int pid, int sig)
{
 8002768:	b508      	push	{r3, lr}
	errno = EINVAL;
 800276a:	f003 fe51 	bl	8006410 <__errno>
 800276e:	2316      	movs	r3, #22
 8002770:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002776:	bd08      	pop	{r3, pc}

08002778 <_exit>:

void _exit (int status)
{
 8002778:	b508      	push	{r3, lr}
	errno = EINVAL;
 800277a:	f003 fe49 	bl	8006410 <__errno>
 800277e:	2316      	movs	r3, #22
 8002780:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002782:	e7fe      	b.n	8002782 <_exit+0xa>

08002784 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002784:	4a03      	ldr	r2, [pc, #12]	; (8002794 <SystemInit+0x10>)
 8002786:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800278a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800278e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002798:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279a:	2400      	movs	r4, #0
{
 800279c:	b0a5      	sub	sp, #148	; 0x94
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800279e:	2234      	movs	r2, #52	; 0x34
 80027a0:	4621      	mov	r1, r4
 80027a2:	a817      	add	r0, sp, #92	; 0x5c

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a4:	4d50      	ldr	r5, [pc, #320]	; (80028e8 <MX_TIM1_Init+0x150>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a6:	9406      	str	r4, [sp, #24]
 80027a8:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
 80027b4:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 80027b8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027be:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c0:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027c2:	f003 fe1d 	bl	8006400 <memset>
  htim1.Init.Prescaler = 200;
 80027c6:	4a49      	ldr	r2, [pc, #292]	; (80028ec <MX_TIM1_Init+0x154>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 4096;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 200;
 80027ca:	23c8      	movs	r3, #200	; 0xc8
 80027cc:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027d0:	4628      	mov	r0, r5
  htim1.Init.Period = 4096;
 80027d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d6:	e9c5 4302 	strd	r4, r3, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 80027da:	e9c5 4404 	strd	r4, r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027de:	f002 f8cf 	bl	8004980 <HAL_TIM_Base_Init>
 80027e2:	2800      	cmp	r0, #0
 80027e4:	d14e      	bne.n	8002884 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ea:	483f      	ldr	r0, [pc, #252]	; (80028e8 <MX_TIM1_Init+0x150>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ec:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027ee:	a906      	add	r1, sp, #24
 80027f0:	f002 fab8 	bl	8004d64 <HAL_TIM_ConfigClockSource>
 80027f4:	2800      	cmp	r0, #0
 80027f6:	d154      	bne.n	80028a2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027f8:	483b      	ldr	r0, [pc, #236]	; (80028e8 <MX_TIM1_Init+0x150>)
 80027fa:	f002 f985 	bl	8004b08 <HAL_TIM_PWM_Init>
 80027fe:	2800      	cmp	r0, #0
 8002800:	d14c      	bne.n	800289c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002802:	2300      	movs	r3, #0
 8002804:	2200      	movs	r2, #0
 8002806:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800280a:	4837      	ldr	r0, [pc, #220]	; (80028e8 <MX_TIM1_Init+0x150>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800280e:	a902      	add	r1, sp, #8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002810:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002812:	f002 fcbb 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8002816:	2800      	cmp	r0, #0
 8002818:	d13d      	bne.n	8002896 <MX_TIM1_Init+0xfe>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 512;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281a:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80028e0 <MX_TIM1_Init+0x148>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002820:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002822:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002824:	4830      	ldr	r0, [pc, #192]	; (80028e8 <MX_TIM1_Init+0x150>)
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002826:	9213      	str	r2, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 512;
 8002828:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800282c:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800282e:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002832:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002836:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002838:	f002 fba6 	bl	8004f88 <HAL_TIM_PWM_ConfigChannel>
 800283c:	bb40      	cbnz	r0, 8002890 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800283e:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002844:	e9cd 321b 	strd	r3, r2, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002848:	4827      	ldr	r0, [pc, #156]	; (80028e8 <MX_TIM1_Init+0x150>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800284a:	9323      	str	r3, [sp, #140]	; 0x8c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800284c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002850:	a917      	add	r1, sp, #92	; 0x5c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002852:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002856:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800285a:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800285e:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002862:	e9cd 3321 	strd	r3, r3, [sp, #132]	; 0x84
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002866:	f002 fcdb 	bl	8005220 <HAL_TIMEx_ConfigBreakDeadTime>
 800286a:	b970      	cbnz	r0, 800288a <MX_TIM1_Init+0xf2>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <MX_TIM1_Init+0x154>)
 800286e:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8002872:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8002878:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 800287c:	930e      	str	r3, [sp, #56]	; 0x38
  if(timHandle->Instance==TIM1)
 800287e:	d013      	beq.n	80028a8 <MX_TIM1_Init+0x110>
}
 8002880:	b025      	add	sp, #148	; 0x94
 8002882:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002884:	f7ff fea2 	bl	80025cc <Error_Handler>
 8002888:	e7ad      	b.n	80027e6 <MX_TIM1_Init+0x4e>
    Error_Handler();
 800288a:	f7ff fe9f 	bl	80025cc <Error_Handler>
 800288e:	e7ed      	b.n	800286c <MX_TIM1_Init+0xd4>
    Error_Handler();
 8002890:	f7ff fe9c 	bl	80025cc <Error_Handler>
 8002894:	e7d3      	b.n	800283e <MX_TIM1_Init+0xa6>
    Error_Handler();
 8002896:	f7ff fe99 	bl	80025cc <Error_Handler>
 800289a:	e7be      	b.n	800281a <MX_TIM1_Init+0x82>
    Error_Handler();
 800289c:	f7ff fe96 	bl	80025cc <Error_Handler>
 80028a0:	e7af      	b.n	8002802 <MX_TIM1_Init+0x6a>
    Error_Handler();
 80028a2:	f7ff fe93 	bl	80025cc <Error_Handler>
 80028a6:	e7a7      	b.n	80027f8 <MX_TIM1_Init+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028ac:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028b0:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028c4:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028c6:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	a90a      	add	r1, sp, #40	; 0x28
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028ce:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028d4:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f001 f93f 	bl	8003b58 <HAL_GPIO_Init>
}
 80028da:	b025      	add	sp, #148	; 0x94
 80028dc:	bd30      	pop	{r4, r5, pc}
 80028de:	bf00      	nop
	...
 80028e8:	200079d8 	.word	0x200079d8
 80028ec:	40012c00 	.word	0x40012c00

080028f0 <MX_TIM2_Init>:
{
 80028f0:	b500      	push	{lr}
  htim2.Instance = TIM2;
 80028f2:	481b      	ldr	r0, [pc, #108]	; (8002960 <MX_TIM2_Init+0x70>)
{
 80028f4:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80028f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fa:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 80028fc:	6002      	str	r2, [r0, #0]
  htim2.Init.Period = 960;
 80028fe:	f44f 7270 	mov.w	r2, #960	; 0x3c0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002902:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002906:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290e:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002912:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002916:	9303      	str	r3, [sp, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002918:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800291a:	f002 f831 	bl	8004980 <HAL_TIM_Base_Init>
 800291e:	b998      	cbnz	r0, 8002948 <MX_TIM2_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002924:	480e      	ldr	r0, [pc, #56]	; (8002960 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002926:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002928:	a904      	add	r1, sp, #16
 800292a:	f002 fa1b 	bl	8004d64 <HAL_TIM_ConfigClockSource>
 800292e:	b998      	cbnz	r0, 8002958 <MX_TIM2_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002930:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002934:	480a      	ldr	r0, [pc, #40]	; (8002960 <MX_TIM2_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002936:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002938:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800293c:	f002 fc26 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	b928      	cbnz	r0, 800294e <MX_TIM2_Init+0x5e>
}
 8002942:	b009      	add	sp, #36	; 0x24
 8002944:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002948:	f7ff fe40 	bl	80025cc <Error_Handler>
 800294c:	e7e8      	b.n	8002920 <MX_TIM2_Init+0x30>
    Error_Handler();
 800294e:	f7ff fe3d 	bl	80025cc <Error_Handler>
}
 8002952:	b009      	add	sp, #36	; 0x24
 8002954:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002958:	f7ff fe38 	bl	80025cc <Error_Handler>
 800295c:	e7e8      	b.n	8002930 <MX_TIM2_Init+0x40>
 800295e:	bf00      	nop
 8002960:	20007a24 	.word	0x20007a24

08002964 <MX_TIM3_Init>:
{
 8002964:	b500      	push	{lr}
  htim3.Instance = TIM3;
 8002966:	481a      	ldr	r0, [pc, #104]	; (80029d0 <MX_TIM3_Init+0x6c>)
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <MX_TIM3_Init+0x70>)
 800296a:	6002      	str	r2, [r0, #0]
{
 800296c:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296e:	2300      	movs	r3, #0
  htim3.Init.Period = 6400;
 8002970:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002974:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002978:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002980:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002988:	9303      	str	r3, [sp, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800298c:	f001 fff8 	bl	8004980 <HAL_TIM_Base_Init>
 8002990:	b998      	cbnz	r0, 80029ba <MX_TIM3_Init+0x56>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002996:	480e      	ldr	r0, [pc, #56]	; (80029d0 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800299a:	a904      	add	r1, sp, #16
 800299c:	f002 f9e2 	bl	8004d64 <HAL_TIM_ConfigClockSource>
 80029a0:	b998      	cbnz	r0, 80029ca <MX_TIM3_Init+0x66>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029a2:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a6:	480a      	ldr	r0, [pc, #40]	; (80029d0 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029a8:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029aa:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ac:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ae:	f002 fbed 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	b928      	cbnz	r0, 80029c0 <MX_TIM3_Init+0x5c>
}
 80029b4:	b009      	add	sp, #36	; 0x24
 80029b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029ba:	f7ff fe07 	bl	80025cc <Error_Handler>
 80029be:	e7e8      	b.n	8002992 <MX_TIM3_Init+0x2e>
    Error_Handler();
 80029c0:	f7ff fe04 	bl	80025cc <Error_Handler>
}
 80029c4:	b009      	add	sp, #36	; 0x24
 80029c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80029ca:	f7ff fdff 	bl	80025cc <Error_Handler>
 80029ce:	e7e8      	b.n	80029a2 <MX_TIM3_Init+0x3e>
 80029d0:	2000798c 	.word	0x2000798c
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_TIM_Base_MspInit>:
{
 80029d8:	b500      	push	{lr}
  if(tim_baseHandle->Instance==TIM1)
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <HAL_TIM_Base_MspInit+0x8c>)
 80029dc:	6803      	ldr	r3, [r0, #0]
 80029de:	4293      	cmp	r3, r2
{
 80029e0:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM1)
 80029e2:	d008      	beq.n	80029f6 <HAL_TIM_Base_MspInit+0x1e>
  else if(tim_baseHandle->Instance==TIM2)
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d026      	beq.n	8002a38 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM3)
 80029ea:	4a1f      	ldr	r2, [pc, #124]	; (8002a68 <HAL_TIM_Base_MspInit+0x90>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <HAL_TIM_Base_MspInit+0x38>
}
 80029f0:	b005      	add	sp, #20
 80029f2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_TIM_Base_MspInit+0x94>)
 80029f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
 8002a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	9b01      	ldr	r3, [sp, #4]
}
 8002a0a:	b005      	add	sp, #20
 8002a0c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a10:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <HAL_TIM_Base_MspInit+0x94>)
 8002a12:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a14:	f041 0102 	orr.w	r1, r1, #2
 8002a18:	6599      	str	r1, [r3, #88]	; 0x58
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002a1c:	2102      	movs	r1, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a1e:	400b      	ands	r3, r1
 8002a20:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002a22:	201d      	movs	r0, #29
 8002a24:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a26:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002a28:	f000 fda2 	bl	8003570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a2c:	201d      	movs	r0, #29
}
 8002a2e:	b005      	add	sp, #20
 8002a30:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a34:	f000 bdda 	b.w	80035ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a38:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8002a40:	f041 0101 	orr.w	r1, r1, #1
 8002a44:	6599      	str	r1, [r3, #88]	; 0x58
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a4e:	201c      	movs	r0, #28
 8002a50:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a52:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a54:	f000 fd8c 	bl	8003570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a58:	201c      	movs	r0, #28
}
 8002a5a:	b005      	add	sp, #20
 8002a5c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a60:	f000 bdc4 	b.w	80035ec <HAL_NVIC_EnableIRQ>
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40021000 	.word	0x40021000

08002a70 <TIM1_Start>:
}

/* USER CODE BEGIN 1 */

void TIM1_Start() {
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <TIM1_Start+0x8>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	f002 b8d0 	b.w	8004c18 <HAL_TIM_PWM_Start>
 8002a78:	200079d8 	.word	0x200079d8

08002a7c <TIM2_Start>:
}

void TIM2_Start() {
	HAL_TIM_Base_Start_IT(&htim2);
 8002a7c:	4801      	ldr	r0, [pc, #4]	; (8002a84 <TIM2_Start+0x8>)
 8002a7e:	f002 b807 	b.w	8004a90 <HAL_TIM_Base_Start_IT>
 8002a82:	bf00      	nop
 8002a84:	20007a24 	.word	0x20007a24

08002a88 <TIM3_Start>:
}

void TIM3_Start() {
	HAL_TIM_Base_Start_IT(&htim3);
 8002a88:	4801      	ldr	r0, [pc, #4]	; (8002a90 <TIM3_Start+0x8>)
 8002a8a:	f002 b801 	b.w	8004a90 <HAL_TIM_Base_Start_IT>
 8002a8e:	bf00      	nop
 8002a90:	2000798c 	.word	0x2000798c

08002a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a94:	480d      	ldr	r0, [pc, #52]	; (8002acc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a98:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9a:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a9c:	4a0e      	ldr	r2, [pc, #56]	; (8002ad8 <LoopForever+0xe>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab0:	4c0b      	ldr	r4, [pc, #44]	; (8002ae0 <LoopForever+0x16>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002abe:	f7ff fe61 	bl	8002784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f003 fcab 	bl	800641c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ac6:	f7ff fd13 	bl	80024f0 <main>

08002aca <LoopForever>:

LoopForever:
    b LoopForever
 8002aca:	e7fe      	b.n	8002aca <LoopForever>
  ldr   r0, =_estack
 8002acc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002ad8:	0800801c 	.word	0x0800801c
  ldr r2, =_sbss
 8002adc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002ae0:	20007a74 	.word	0x20007a74

08002ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <ADC1_2_IRQHandler>
	...

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_InitTick+0x40>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b90b      	cbnz	r3, 8002af4 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002af2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002af4:	490d      	ldr	r1, [pc, #52]	; (8002b2c <HAL_InitTick+0x44>)
 8002af6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002afa:	4605      	mov	r5, r0
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	6808      	ldr	r0, [r1, #0]
 8002b02:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b06:	f000 fd7f 	bl	8003608 <HAL_SYSTICK_Config>
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1ef      	bne.n	8002af0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b10:	2d0f      	cmp	r5, #15
 8002b12:	d8ed      	bhi.n	8002af0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b14:	4602      	mov	r2, r0
 8002b16:	4629      	mov	r1, r5
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b1c:	f000 fd28 	bl	8003570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_InitTick+0x48>)
 8002b22:	4620      	mov	r0, r4
 8002b24:	601d      	str	r5, [r3, #0]
}
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	20000004 	.word	0x20000004
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000008 	.word	0x20000008

08002b34 <HAL_Init>:
{
 8002b34:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b36:	2003      	movs	r0, #3
 8002b38:	f000 fd08 	bl	800354c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3c:	200f      	movs	r0, #15
 8002b3e:	f7ff ffd3 	bl	8002ae8 <HAL_InitTick>
 8002b42:	b110      	cbz	r0, 8002b4a <HAL_Init+0x16>
    status = HAL_ERROR;
 8002b44:	2401      	movs	r4, #1
}
 8002b46:	4620      	mov	r0, r4
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	4604      	mov	r4, r0
    HAL_MspInit();
 8002b4c:	f7ff fd40 	bl	80025d0 <HAL_MspInit>
}
 8002b50:	4620      	mov	r0, r4
 8002b52:	bd10      	pop	{r4, pc}

08002b54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <HAL_IncTick+0x10>)
 8002b56:	4904      	ldr	r1, [pc, #16]	; (8002b68 <HAL_IncTick+0x14>)
 8002b58:	6813      	ldr	r3, [r2, #0]
 8002b5a:	6809      	ldr	r1, [r1, #0]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20007a70 	.word	0x20007a70
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <HAL_GetTick+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20007a70 	.word	0x20007a70

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff fff6 	bl	8002b6c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b80:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002b82:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002b84:	d002      	beq.n	8002b8c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_Delay+0x20>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b8c:	f7ff ffee 	bl	8002b6c <HAL_GetTick>
 8002b90:	1b43      	subs	r3, r0, r5
 8002b92:	42a3      	cmp	r3, r4
 8002b94:	d3fa      	bcc.n	8002b8c <HAL_Delay+0x14>
  {
  }
}
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b530      	push	{r4, r5, lr}
 8002b9e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	f000 80c9 	beq.w	8002d3c <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002baa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8002bac:	4604      	mov	r4, r0
 8002bae:	2d00      	cmp	r5, #0
 8002bb0:	f000 8092 	beq.w	8002cd8 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002bb4:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002bb6:	6893      	ldr	r3, [r2, #8]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	d505      	bpl.n	8002bc8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bbc:	6893      	ldr	r3, [r2, #8]
 8002bbe:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bc2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bc8:	6893      	ldr	r3, [r2, #8]
 8002bca:	00dd      	lsls	r5, r3, #3
 8002bcc:	d419      	bmi.n	8002c02 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bce:	4b70      	ldr	r3, [pc, #448]	; (8002d90 <HAL_ADC_Init+0x1f4>)
 8002bd0:	4870      	ldr	r0, [pc, #448]	; (8002d94 <HAL_ADC_Init+0x1f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002bd4:	6891      	ldr	r1, [r2, #8]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	fba0 0303 	umull	r0, r3, r0, r3
 8002bdc:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bee:	6091      	str	r1, [r2, #8]
 8002bf0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bf2:	9b01      	ldr	r3, [sp, #4]
 8002bf4:	b12b      	cbz	r3, 8002c02 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002bfc:	9b01      	ldr	r3, [sp, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c02:	6893      	ldr	r3, [r2, #8]
 8002c04:	00d8      	lsls	r0, r3, #3
 8002c06:	d459      	bmi.n	8002cbc <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c0a:	f043 0310 	orr.w	r3, r3, #16
 8002c0e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	4303      	orrs	r3, r0
 8002c16:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c18:	6893      	ldr	r3, [r2, #8]
 8002c1a:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c20:	d153      	bne.n	8002cca <HAL_ADC_Init+0x12e>
 8002c22:	06d9      	lsls	r1, r3, #27
 8002c24:	d451      	bmi.n	8002cca <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c26:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c32:	6893      	ldr	r3, [r2, #8]
 8002c34:	07db      	lsls	r3, r3, #31
 8002c36:	d40e      	bmi.n	8002c56 <HAL_ADC_Init+0xba>
 8002c38:	4b57      	ldr	r3, [pc, #348]	; (8002d98 <HAL_ADC_Init+0x1fc>)
 8002c3a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8002c3e:	6889      	ldr	r1, [r1, #8]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	430b      	orrs	r3, r1
 8002c44:	07dd      	lsls	r5, r3, #31
 8002c46:	d406      	bmi.n	8002c56 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c48:	4954      	ldr	r1, [pc, #336]	; (8002d9c <HAL_ADC_Init+0x200>)
 8002c4a:	6865      	ldr	r5, [r4, #4]
 8002c4c:	688b      	ldr	r3, [r1, #8]
 8002c4e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8002c52:	432b      	orrs	r3, r5
 8002c54:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8002c56:	68e5      	ldr	r5, [r4, #12]
 8002c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c5a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8002c5e:	432b      	orrs	r3, r5
 8002c60:	68a5      	ldr	r5, [r4, #8]
 8002c62:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c64:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c66:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8002c68:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c70:	d05f      	beq.n	8002d32 <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002c74:	b121      	cbz	r1, 8002c80 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8002c76:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c78:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c7c:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c7e:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c80:	68d5      	ldr	r5, [r2, #12]
 8002c82:	4947      	ldr	r1, [pc, #284]	; (8002da0 <HAL_ADC_Init+0x204>)
 8002c84:	4029      	ands	r1, r5
 8002c86:	4319      	orrs	r1, r3
 8002c88:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c8a:	6913      	ldr	r3, [r2, #16]
 8002c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c8e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002c92:	430b      	orrs	r3, r1
 8002c94:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c96:	6893      	ldr	r3, [r2, #8]
 8002c98:	0759      	lsls	r1, r3, #29
 8002c9a:	d523      	bpl.n	8002ce4 <HAL_ADC_Init+0x148>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c9c:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c9e:	6963      	ldr	r3, [r4, #20]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d04e      	beq.n	8002d42 <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ca4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ca6:	f023 030f 	bic.w	r3, r3, #15
 8002caa:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8002cb8:	b003      	add	sp, #12
 8002cba:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cbc:	6893      	ldr	r3, [r2, #8]
 8002cbe:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc2:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002cc8:	d0ab      	beq.n	8002c22 <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8002ccc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	f043 0310 	orr.w	r3, r3, #16
 8002cd2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8002cd4:	b003      	add	sp, #12
 8002cd6:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8002cd8:	f7fe ff74 	bl	8001bc4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002cdc:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8002cde:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8002ce2:	e767      	b.n	8002bb4 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ce4:	6893      	ldr	r3, [r2, #8]
 8002ce6:	071b      	lsls	r3, r3, #28
 8002ce8:	d4d9      	bmi.n	8002c9e <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cea:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cf0:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cf2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cf6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cf8:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cfc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d00:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8002d02:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d04:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d06:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8002d08:	bb19      	cbnz	r1, 8002d52 <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d10:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002d14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8002d20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d021      	beq.n	8002d6c <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d28:	6913      	ldr	r3, [r2, #16]
 8002d2a:	f023 0301 	bic.w	r3, r3, #1
 8002d2e:	6113      	str	r3, [r2, #16]
 8002d30:	e7b5      	b.n	8002c9e <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002d34:	3901      	subs	r1, #1
 8002d36:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002d3a:	e79a      	b.n	8002c72 <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8002d3c:	2001      	movs	r0, #1
}
 8002d3e:	b003      	add	sp, #12
 8002d40:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d42:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002d44:	6a23      	ldr	r3, [r4, #32]
 8002d46:	f021 010f 	bic.w	r1, r1, #15
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d50:	e7ac      	b.n	8002cac <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d58:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8002d5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d64:	430b      	orrs	r3, r1
 8002d66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d6a:	e7d9      	b.n	8002d20 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d6c:	6911      	ldr	r1, [r2, #16]
 8002d6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d70:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8002d72:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8002d76:	f021 0104 	bic.w	r1, r1, #4
 8002d7a:	432b      	orrs	r3, r5
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002d80:	430b      	orrs	r3, r1
 8002d82:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6113      	str	r3, [r2, #16]
 8002d8c:	e787      	b.n	8002c9e <HAL_ADC_Init+0x102>
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000
 8002d94:	053e2d63 	.word	0x053e2d63
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	50000300 	.word	0x50000300
 8002da0:	fff04007 	.word	0xfff04007

08002da4 <HAL_ADC_ConvHalfCpltCallback>:
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop

08002da8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002da8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002daa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002dac:	f7ff fffa 	bl	8002da4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002db0:	bd08      	pop	{r3, pc}
 8002db2:	bf00      	nop

08002db4 <HAL_ADC_ErrorCallback>:
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dbc:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002dc0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002dc4:	d11d      	bne.n	8002e02 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dc6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002dce:	680a      	ldr	r2, [r1, #0]
 8002dd0:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002dd4:	68ca      	ldr	r2, [r1, #12]
 8002dd6:	d01b      	beq.n	8002e10 <ADC_DMAConvCplt+0x58>
 8002dd8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8002ddc:	d10d      	bne.n	8002dfa <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002dde:	68ca      	ldr	r2, [r1, #12]
 8002de0:	0494      	lsls	r4, r2, #18
 8002de2:	d40a      	bmi.n	8002dfa <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dee:	04d1      	lsls	r1, r2, #19
 8002df0:	d403      	bmi.n	8002dfa <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fbae 	bl	800255c <HAL_ADC_ConvCpltCallback>
}
 8002e00:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e02:	06d2      	lsls	r2, r2, #27
 8002e04:	d40a      	bmi.n	8002e1c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e10:	0790      	lsls	r0, r2, #30
 8002e12:	d5e7      	bpl.n	8002de4 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fba1 	bl	800255c <HAL_ADC_ConvCpltCallback>
 8002e1a:	e7f1      	b.n	8002e00 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ffc9 	bl	8002db4 <HAL_ADC_ErrorCallback>
}
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e24:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8002e26:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e28:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e30:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002e32:	f043 0304 	orr.w	r3, r3, #4
 8002e36:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e38:	f7ff ffbc 	bl	8002db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e3c:	bd08      	pop	{r3, pc}
 8002e3e:	bf00      	nop

08002e40 <HAL_ADC_ConfigChannel>:
{
 8002e40:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002e42:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8002e46:	b083      	sub	sp, #12
 8002e48:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002e4a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002e52:	f000 8141 	beq.w	80030d8 <HAL_ADC_ConfigChannel+0x298>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e56:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e5e:	68a2      	ldr	r2, [r4, #8]
 8002e60:	0756      	lsls	r6, r2, #29
 8002e62:	d44c      	bmi.n	8002efe <HAL_ADC_ConfigChannel+0xbe>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e64:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8002e66:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e68:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8002e6c:	f00c 0c0c 	and.w	ip, ip, #12
 8002e70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8002e74:	f000 001f 	and.w	r0, r0, #31
 8002e78:	f85e 500c 	ldr.w	r5, [lr, ip]
 8002e7c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002e80:	261f      	movs	r6, #31
 8002e82:	4082      	lsls	r2, r0
 8002e84:	fa06 f000 	lsl.w	r0, r6, r0
 8002e88:	ea25 0000 	bic.w	r0, r5, r0
 8002e8c:	4302      	orrs	r2, r0
 8002e8e:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e92:	68a2      	ldr	r2, [r4, #8]
 8002e94:	0755      	lsls	r5, r2, #29
 8002e96:	d543      	bpl.n	8002f20 <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e98:	68a2      	ldr	r2, [r4, #8]
 8002e9a:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e9c:	68a2      	ldr	r2, [r4, #8]
 8002e9e:	f012 0f01 	tst.w	r2, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002ea6:	4dbf      	ldr	r5, [pc, #764]	; (80031a4 <HAL_ADC_ConfigChannel+0x364>)
 8002ea8:	68ce      	ldr	r6, [r1, #12]
 8002eaa:	42ae      	cmp	r6, r5
 8002eac:	f000 80bc 	beq.w	8003028 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 8002eb0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8002eb4:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8002eb8:	ea21 0100 	bic.w	r1, r1, r0
 8002ebc:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ec0:	49b9      	ldr	r1, [pc, #740]	; (80031a8 <HAL_ADC_ConfigChannel+0x368>)
 8002ec2:	420a      	tst	r2, r1
 8002ec4:	d02a      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002ec6:	49b9      	ldr	r1, [pc, #740]	; (80031ac <HAL_ADC_ConfigChannel+0x36c>)
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ec8:	4db9      	ldr	r5, [pc, #740]	; (80031b0 <HAL_ADC_ConfigChannel+0x370>)
 8002eca:	6888      	ldr	r0, [r1, #8]
 8002ecc:	42aa      	cmp	r2, r5
 8002ece:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8002ed2:	d01d      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0xd0>
 8002ed4:	4db7      	ldr	r5, [pc, #732]	; (80031b4 <HAL_ADC_ConfigChannel+0x374>)
 8002ed6:	42aa      	cmp	r2, r5
 8002ed8:	d01a      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0xd0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002eda:	4db7      	ldr	r5, [pc, #732]	; (80031b8 <HAL_ADC_ConfigChannel+0x378>)
 8002edc:	42aa      	cmp	r2, r5
 8002ede:	f040 812d 	bne.w	800313c <HAL_ADC_ConfigChannel+0x2fc>
 8002ee2:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002ee6:	d119      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ee8:	4ab4      	ldr	r2, [pc, #720]	; (80031bc <HAL_ADC_ConfigChannel+0x37c>)
 8002eea:	4294      	cmp	r4, r2
 8002eec:	d016      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002eee:	688a      	ldr	r2, [r1, #8]
 8002ef0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8002ef4:	4332      	orrs	r2, r6
 8002ef6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002efa:	608a      	str	r2, [r1, #8]
}
 8002efc:	e003      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xc6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f00:	f042 0220 	orr.w	r2, r2, #32
 8002f04:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8002f0c:	b003      	add	sp, #12
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f10:	0202      	lsls	r2, r0, #8
 8002f12:	d403      	bmi.n	8002f1c <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f14:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002f18:	f000 80f1 	beq.w	80030fe <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e7f2      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f20:	68a2      	ldr	r2, [r4, #8]
 8002f22:	0710      	lsls	r0, r2, #28
 8002f24:	d47e      	bmi.n	8003024 <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f26:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f28:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f2a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002f2e:	f000 8119 	beq.w	8003164 <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002f32:	0dee      	lsrs	r6, r5, #23
 8002f34:	f104 0c14 	add.w	ip, r4, #20
 8002f38:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8002f3c:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8002f40:	f85c 0006 	ldr.w	r0, [ip, r6]
 8002f44:	2707      	movs	r7, #7
 8002f46:	40aa      	lsls	r2, r5
 8002f48:	fa07 f505 	lsl.w	r5, r7, r5
 8002f4c:	ea20 0005 	bic.w	r0, r0, r5
 8002f50:	4302      	orrs	r2, r0
 8002f52:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f56:	6962      	ldr	r2, [r4, #20]
 8002f58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f5c:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f5e:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f62:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f64:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f66:	d02d      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f68:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f6c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f70:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 8002f72:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 8002f76:	4f92      	ldr	r7, [pc, #584]	; (80031c0 <HAL_ADC_ConfigChannel+0x380>)
 8002f78:	4096      	lsls	r6, r2
 8002f7a:	680a      	ldr	r2, [r1, #0]
 8002f7c:	ea0c 0707 	and.w	r7, ip, r7
 8002f80:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002f84:	433a      	orrs	r2, r7
 8002f86:	4332      	orrs	r2, r6
 8002f88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f8c:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f90:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8002f92:	698e      	ldr	r6, [r1, #24]
 8002f94:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8002f98:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002f9c:	4332      	orrs	r2, r6
 8002f9e:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fa2:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fa4:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8002fa6:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8002faa:	f1a5 0501 	sub.w	r5, r5, #1
 8002fae:	fab5 f585 	clz	r5, r5
 8002fb2:	096d      	lsrs	r5, r5, #5
 8002fb4:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002fb8:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8002fbc:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8002fc0:	6808      	ldr	r0, [r1, #0]
}
 8002fc2:	e76b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fc4:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fc6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002fc8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002fca:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fce:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fd2:	2d00      	cmp	r5, #0
 8002fd4:	f040 80fc 	bne.w	80031d0 <HAL_ADC_ConfigChannel+0x390>
 8002fd8:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fdc:	42aa      	cmp	r2, r5
 8002fde:	f000 8170 	beq.w	80032c2 <HAL_ADC_ConfigChannel+0x482>
 8002fe2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002fe4:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe6:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fea:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8002fee:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8002ff2:	42ae      	cmp	r6, r5
 8002ff4:	f000 8153 	beq.w	800329e <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ff8:	6896      	ldr	r6, [r2, #8]
 8002ffa:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ffc:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003000:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003004:	42ae      	cmp	r6, r5
 8003006:	f000 8138 	beq.w	800327a <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800300a:	68d6      	ldr	r6, [r2, #12]
 800300c:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800300e:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003012:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8003016:	4295      	cmp	r5, r2
 8003018:	f47f af40 	bne.w	8002e9c <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003022:	603a      	str	r2, [r7, #0]
 8003024:	6808      	ldr	r0, [r1, #0]
}
 8003026:	e739      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8003028:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800302c:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003030:	432a      	orrs	r2, r5
 8003032:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003036:	2d00      	cmp	r5, #0
 8003038:	d051      	beq.n	80030de <HAL_ADC_ConfigChannel+0x29e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800303e:	2a00      	cmp	r2, #0
 8003040:	f000 80f7 	beq.w	8003232 <HAL_ADC_ConfigChannel+0x3f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003044:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	3201      	adds	r2, #1
 800304a:	f002 021f 	and.w	r2, r2, #31
 800304e:	2a09      	cmp	r2, #9
 8003050:	f240 80ef 	bls.w	8003232 <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003058:	2d00      	cmp	r5, #0
 800305a:	f000 814e 	beq.w	80032fa <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 800305e:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003062:	3501      	adds	r5, #1
 8003064:	06ad      	lsls	r5, r5, #26
 8003066:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800306e:	2a00      	cmp	r2, #0
 8003070:	f000 8148 	beq.w	8003304 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8003074:	fab2 f282 	clz	r2, r2
 8003078:	3201      	adds	r2, #1
 800307a:	f002 021f 	and.w	r2, r2, #31
 800307e:	2601      	movs	r6, #1
 8003080:	fa06 f202 	lsl.w	r2, r6, r2
 8003084:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800308a:	2800      	cmp	r0, #0
 800308c:	f000 8138 	beq.w	8003300 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8003090:	fab0 f080 	clz	r0, r0
 8003094:	3001      	adds	r0, #1
 8003096:	f000 001f 	and.w	r0, r0, #31
 800309a:	2203      	movs	r2, #3
 800309c:	f06f 061d 	mvn.w	r6, #29
 80030a0:	fb12 6200 	smlabb	r2, r2, r0, r6
 80030a4:	0512      	lsls	r2, r2, #20
 80030a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030aa:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030ac:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 80030ae:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80030b0:	f005 0504 	and.w	r5, r5, #4
 80030b4:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80030b8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80030bc:	fa00 fc02 	lsl.w	ip, r0, r2
 80030c0:	f04f 0e07 	mov.w	lr, #7
 80030c4:	5970      	ldr	r0, [r6, r5]
 80030c6:	fa0e f202 	lsl.w	r2, lr, r2
 80030ca:	ea20 0202 	bic.w	r2, r0, r2
 80030ce:	ea42 020c 	orr.w	r2, r2, ip
 80030d2:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030d4:	680a      	ldr	r2, [r1, #0]
}
 80030d6:	e6f3      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80030d8:	2002      	movs	r0, #2
}
 80030da:	b003      	add	sp, #12
 80030dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030de:	0e82      	lsrs	r2, r0, #26
 80030e0:	3201      	adds	r2, #1
 80030e2:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e6:	2809      	cmp	r0, #9
 80030e8:	d84e      	bhi.n	8003188 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ea:	0695      	lsls	r5, r2, #26
 80030ec:	2201      	movs	r2, #1
 80030ee:	4082      	lsls	r2, r0
 80030f0:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80030f4:	4315      	orrs	r5, r2
 80030f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80030fa:	0512      	lsls	r2, r2, #20
 80030fc:	e7d5      	b.n	80030aa <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030fe:	492b      	ldr	r1, [pc, #172]	; (80031ac <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003100:	4830      	ldr	r0, [pc, #192]	; (80031c4 <HAL_ADC_ConfigChannel+0x384>)
 8003102:	688a      	ldr	r2, [r1, #8]
 8003104:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003108:	4332      	orrs	r2, r6
 800310a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800310e:	608a      	str	r2, [r1, #8]
 8003110:	6802      	ldr	r2, [r0, #0]
 8003112:	492d      	ldr	r1, [pc, #180]	; (80031c8 <HAL_ADC_ConfigChannel+0x388>)
 8003114:	0992      	lsrs	r2, r2, #6
 8003116:	fba1 1202 	umull	r1, r2, r1, r2
 800311a:	0992      	lsrs	r2, r2, #6
 800311c:	3201      	adds	r2, #1
 800311e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003126:	9a01      	ldr	r2, [sp, #4]
 8003128:	2a00      	cmp	r2, #0
 800312a:	f43f aef7 	beq.w	8002f1c <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 800312e:	9a01      	ldr	r2, [sp, #4]
 8003130:	3a01      	subs	r2, #1
 8003132:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003134:	9a01      	ldr	r2, [sp, #4]
 8003136:	2a00      	cmp	r2, #0
 8003138:	d1f9      	bne.n	800312e <HAL_ADC_ConfigChannel+0x2ee>
 800313a:	e6ef      	b.n	8002f1c <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800313c:	4d23      	ldr	r5, [pc, #140]	; (80031cc <HAL_ADC_ConfigChannel+0x38c>)
 800313e:	42aa      	cmp	r2, r5
 8003140:	f47f aeec 	bne.w	8002f1c <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003144:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003148:	f47f aee8 	bne.w	8002f1c <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_ADC_ConfigChannel+0x37c>)
 800314e:	4294      	cmp	r4, r2
 8003150:	f43f aee4 	beq.w	8002f1c <HAL_ADC_ConfigChannel+0xdc>
 8003154:	688a      	ldr	r2, [r1, #8]
 8003156:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800315a:	4332      	orrs	r2, r6
 800315c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003160:	608a      	str	r2, [r1, #8]
}
 8003162:	e6d0      	b.n	8002f06 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003164:	0dea      	lsrs	r2, r5, #23
 8003166:	f002 0204 	and.w	r2, r2, #4
 800316a:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 800316e:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003172:	2607      	movs	r6, #7
 8003174:	40ae      	lsls	r6, r5
 8003176:	5885      	ldr	r5, [r0, r2]
 8003178:	ea25 0506 	bic.w	r5, r5, r6
 800317c:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800317e:	6962      	ldr	r2, [r4, #20]
 8003180:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003184:	6162      	str	r2, [r4, #20]
}
 8003186:	e6ea      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003188:	0695      	lsls	r5, r2, #26
 800318a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800318e:	3a1e      	subs	r2, #30
 8003190:	2601      	movs	r6, #1
 8003192:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003196:	0512      	lsls	r2, r2, #20
 8003198:	fa06 f000 	lsl.w	r0, r6, r0
 800319c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80031a0:	4305      	orrs	r5, r0
 80031a2:	e782      	b.n	80030aa <HAL_ADC_ConfigChannel+0x26a>
 80031a4:	407f0000 	.word	0x407f0000
 80031a8:	80080000 	.word	0x80080000
 80031ac:	50000300 	.word	0x50000300
 80031b0:	c3210000 	.word	0xc3210000
 80031b4:	90c00010 	.word	0x90c00010
 80031b8:	c7520000 	.word	0xc7520000
 80031bc:	50000100 	.word	0x50000100
 80031c0:	03fff000 	.word	0x03fff000
 80031c4:	20000000 	.word	0x20000000
 80031c8:	053e2d63 	.word	0x053e2d63
 80031cc:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80031d4:	b11d      	cbz	r5, 80031de <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 80031d6:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031da:	42aa      	cmp	r2, r5
 80031dc:	d071      	beq.n	80032c2 <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031e2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80031ea:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80031f2:	b11d      	cbz	r5, 80031fc <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80031f4:	fab5 f585 	clz	r5, r5
 80031f8:	42ae      	cmp	r6, r5
 80031fa:	d050      	beq.n	800329e <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031fc:	6895      	ldr	r5, [r2, #8]
 80031fe:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003200:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003204:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800320c:	b11d      	cbz	r5, 8003216 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800320e:	fab5 f585 	clz	r5, r5
 8003212:	42ae      	cmp	r6, r5
 8003214:	d031      	beq.n	800327a <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003216:	68d5      	ldr	r5, [r2, #12]
 8003218:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800321a:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800321e:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003226:	2d00      	cmp	r5, #0
 8003228:	f43f ae38 	beq.w	8002e9c <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 800322c:	fab5 f585 	clz	r5, r5
 8003230:	e6f1      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003236:	2d00      	cmp	r5, #0
 8003238:	d059      	beq.n	80032ee <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 800323a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800323e:	3501      	adds	r5, #1
 8003240:	06ad      	lsls	r5, r5, #26
 8003242:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800324a:	2a00      	cmp	r2, #0
 800324c:	d04d      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 800324e:	fab2 f282 	clz	r2, r2
 8003252:	3201      	adds	r2, #1
 8003254:	f002 021f 	and.w	r2, r2, #31
 8003258:	2601      	movs	r6, #1
 800325a:	fa06 f202 	lsl.w	r2, r6, r2
 800325e:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003264:	2800      	cmp	r0, #0
 8003266:	d045      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003268:	fab0 f280 	clz	r2, r0
 800326c:	3201      	adds	r2, #1
 800326e:	f002 021f 	and.w	r2, r2, #31
 8003272:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003276:	0512      	lsls	r2, r2, #20
 8003278:	e717      	b.n	80030aa <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003280:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003282:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003284:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003286:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800328a:	68d2      	ldr	r2, [r2, #12]
 800328c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003290:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003294:	2d00      	cmp	r5, #0
 8003296:	d1c4      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x3e2>
 8003298:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800329c:	e6bb      	b.n	8003016 <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 800329e:	6838      	ldr	r0, [r7, #0]
 80032a0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80032a4:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032a6:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032a8:	6808      	ldr	r0, [r1, #0]
 80032aa:	6896      	ldr	r6, [r2, #8]
 80032ac:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032b0:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032b4:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b8:	2d00      	cmp	r5, #0
 80032ba:	d1a5      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x3c8>
 80032bc:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80032c0:	e6a0      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 80032c2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80032c4:	4622      	mov	r2, r4
 80032c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80032ca:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032ce:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032d0:	6808      	ldr	r0, [r1, #0]
 80032d2:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80032d4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d8:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032dc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d184      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x3ae>
 80032e4:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80032e8:	e683      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x1b2>
 80032ea:	2202      	movs	r2, #2
 80032ec:	e7b7      	b.n	800325e <HAL_ADC_ConfigChannel+0x41e>
 80032ee:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80032f2:	e7a8      	b.n	8003246 <HAL_ADC_ConfigChannel+0x406>
 80032f4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80032f8:	e6d7      	b.n	80030aa <HAL_ADC_ConfigChannel+0x26a>
 80032fa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80032fe:	e6b4      	b.n	800306a <HAL_ADC_ConfigChannel+0x22a>
 8003300:	4a01      	ldr	r2, [pc, #4]	; (8003308 <HAL_ADC_ConfigChannel+0x4c8>)
 8003302:	e6d2      	b.n	80030aa <HAL_ADC_ConfigChannel+0x26a>
 8003304:	2202      	movs	r2, #2
 8003306:	e6bd      	b.n	8003084 <HAL_ADC_ConfigChannel+0x244>
 8003308:	fe500000 	.word	0xfe500000

0800330c <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800330c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	07d2      	lsls	r2, r2, #31
 8003312:	d501      	bpl.n	8003318 <ADC_Enable+0xc>
  return HAL_OK;
 8003314:	2000      	movs	r0, #0
}
 8003316:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <ADC_Enable+0x70>)
 800331c:	4211      	tst	r1, r2
{
 800331e:	b570      	push	{r4, r5, r6, lr}
 8003320:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003322:	d008      	beq.n	8003336 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003324:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8003326:	f043 0310 	orr.w	r3, r3, #16
 800332a:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332c:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800332e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003330:	4303      	orrs	r3, r0
 8003332:	6633      	str	r3, [r6, #96]	; 0x60
}
 8003334:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4d11      	ldr	r5, [pc, #68]	; (8003380 <ADC_Enable+0x74>)
 800333a:	402a      	ands	r2, r5
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003342:	f7ff fc13 	bl	8002b6c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003346:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003348:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	07d0      	lsls	r0, r2, #31
 800334e:	d413      	bmi.n	8003378 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	07d1      	lsls	r1, r2, #31
 8003354:	d404      	bmi.n	8003360 <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	402a      	ands	r2, r5
 800335a:	f042 0201 	orr.w	r2, r2, #1
 800335e:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003360:	f7ff fc04 	bl	8002b6c <HAL_GetTick>
 8003364:	1b03      	subs	r3, r0, r4
 8003366:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003368:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800336a:	d9ee      	bls.n	800334a <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	07d2      	lsls	r2, r2, #31
 8003370:	d5d8      	bpl.n	8003324 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	07d0      	lsls	r0, r2, #31
 8003376:	d5eb      	bpl.n	8003350 <ADC_Enable+0x44>
  return HAL_OK;
 8003378:	2000      	movs	r0, #0
}
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	8000003f 	.word	0x8000003f
 8003380:	7fffffc0 	.word	0x7fffffc0

08003384 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_ADC_Start_DMA+0xdc>)
{
 8003386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800338a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800338e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003390:	689d      	ldr	r5, [r3, #8]
 8003392:	f015 0504 	ands.w	r5, r5, #4
 8003396:	d116      	bne.n	80033c6 <HAL_ADC_Start_DMA+0x42>
    __HAL_LOCK(hadc);
 8003398:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 800339c:	2b01      	cmp	r3, #1
 800339e:	4604      	mov	r4, r0
 80033a0:	d011      	beq.n	80033c6 <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033a2:	f008 081f 	and.w	r8, r8, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033a6:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 80033aa:	f04f 0c01 	mov.w	ip, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033ae:	fa23 f308 	lsr.w	r3, r3, r8
 80033b2:	ea13 030c 	ands.w	r3, r3, ip
    __HAL_LOCK(hadc);
 80033b6:	f880 c058 	strb.w	ip, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033ba:	d107      	bne.n	80033cc <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80033bc:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80033c0:	4660      	mov	r0, ip
}
 80033c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80033c6:	2002      	movs	r0, #2
}
 80033c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80033cc:	460e      	mov	r6, r1
 80033ce:	4617      	mov	r7, r2
 80033d0:	f7ff ff9c 	bl	800330c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d13b      	bne.n	8003450 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80033d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033da:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80033dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_ADC_Start_DMA+0xe0>)
 80033ec:	4299      	cmp	r1, r3
 80033ee:	d033      	beq.n	8003458 <HAL_ADC_Start_DMA+0xd4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033f0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80033f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80033f6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033f8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033fc:	4d1a      	ldr	r5, [pc, #104]	; (8003468 <HAL_ADC_Start_DMA+0xe4>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033fe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003402:	bf1c      	itt	ne
 8003404:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8003406:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800340a:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800340c:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800340e:	4d17      	ldr	r5, [pc, #92]	; (800346c <HAL_ADC_Start_DMA+0xe8>)
 8003410:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003412:	4d17      	ldr	r5, [pc, #92]	; (8003470 <HAL_ADC_Start_DMA+0xec>)
 8003414:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003416:	251c      	movs	r5, #28
 8003418:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 800341a:	2500      	movs	r5, #0
 800341c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003420:	684d      	ldr	r5, [r1, #4]
 8003422:	f045 0510 	orr.w	r5, r5, #16
 8003426:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003428:	68cd      	ldr	r5, [r1, #12]
 800342a:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800342e:	463b      	mov	r3, r7
 8003430:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003432:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003434:	3140      	adds	r1, #64	; 0x40
 8003436:	f000 fae7 	bl	8003a08 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800343a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800343c:	6893      	ldr	r3, [r2, #8]
 800343e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003442:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003446:	f043 0304 	orr.w	r3, r3, #4
 800344a:	6093      	str	r3, [r2, #8]
}
 800344c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003450:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8003454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003458:	f1b8 0f00 	cmp.w	r8, #0
 800345c:	d0c8      	beq.n	80033f0 <HAL_ADC_Start_DMA+0x6c>
 800345e:	e7cb      	b.n	80033f8 <HAL_ADC_Start_DMA+0x74>
 8003460:	50000300 	.word	0x50000300
 8003464:	50000100 	.word	0x50000100
 8003468:	08002db9 	.word	0x08002db9
 800346c:	08002da9 	.word	0x08002da9
 8003470:	08002e25 	.word	0x08002e25

08003474 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003476:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800347a:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 800347c:	2a01      	cmp	r2, #1
{
 800347e:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 8003480:	d047      	beq.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003482:	6804      	ldr	r4, [r0, #0]
 8003484:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003486:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003488:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800348a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800348e:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8003490:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003494:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003496:	d007      	beq.n	80034a8 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003498:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800349a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800349e:	f041 0120 	orr.w	r1, r1, #32
 80034a2:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80034a4:	b01d      	add	sp, #116	; 0x74
 80034a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a8:	4d26      	ldr	r5, [pc, #152]	; (8003544 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 80034aa:	68aa      	ldr	r2, [r5, #8]
 80034ac:	0752      	lsls	r2, r2, #29
 80034ae:	d50a      	bpl.n	80034c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80034b0:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034b4:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80034c2:	b01d      	add	sp, #116	; 0x74
 80034c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c6:	68a0      	ldr	r0, [r4, #8]
 80034c8:	f010 0004 	ands.w	r0, r0, #4
 80034cc:	d1f1      	bne.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ce:	b31e      	cbz	r6, 8003518 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034d0:	f8df e074 	ldr.w	lr, [pc, #116]	; 8003548 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80034d4:	684f      	ldr	r7, [r1, #4]
 80034d6:	f8de 2008 	ldr.w	r2, [lr, #8]
 80034da:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80034de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034e2:	433a      	orrs	r2, r7
 80034e4:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80034e8:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ec:	68a2      	ldr	r2, [r4, #8]
 80034ee:	07d4      	lsls	r4, r2, #31
 80034f0:	d426      	bmi.n	8003540 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80034f2:	68a8      	ldr	r0, [r5, #8]
 80034f4:	f010 0001 	ands.w	r0, r0, #1
 80034f8:	d119      	bne.n	800352e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 80034fa:	688a      	ldr	r2, [r1, #8]
 80034fc:	f8de 1008 	ldr.w	r1, [lr, #8]
 8003500:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 8003504:	4332      	orrs	r2, r6
 8003506:	f021 010f 	bic.w	r1, r1, #15
 800350a:	430a      	orrs	r2, r1
 800350c:	f8ce 2008 	str.w	r2, [lr, #8]
 8003510:	e7d4      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 8003512:	2002      	movs	r0, #2
}
 8003514:	b01d      	add	sp, #116	; 0x74
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003518:	490b      	ldr	r1, [pc, #44]	; (8003548 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 800351a:	688a      	ldr	r2, [r1, #8]
 800351c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003520:	608a      	str	r2, [r1, #8]
 8003522:	68a2      	ldr	r2, [r4, #8]
 8003524:	68a8      	ldr	r0, [r5, #8]
 8003526:	4310      	orrs	r0, r2
 8003528:	f010 0001 	ands.w	r0, r0, #1
 800352c:	d001      	beq.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352e:	2000      	movs	r0, #0
 8003530:	e7c4      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003532:	688a      	ldr	r2, [r1, #8]
 8003534:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8003538:	f022 020f 	bic.w	r2, r2, #15
 800353c:	608a      	str	r2, [r1, #8]
 800353e:	e7bd      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003540:	68aa      	ldr	r2, [r5, #8]
 8003542:	e7bb      	b.n	80034bc <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003544:	50000100 	.word	0x50000100
 8003548:	50000300 	.word	0x50000300

0800354c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800354c:	4907      	ldr	r1, [pc, #28]	; (800356c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800354e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003550:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003552:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800355e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003566:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003570:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_NVIC_SetPriority+0x74>)
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357a:	f1c3 0e07 	rsb	lr, r3, #7
 800357e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003582:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003586:	bf28      	it	cs
 8003588:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358c:	f1bc 0f06 	cmp.w	ip, #6
 8003590:	d91b      	bls.n	80035ca <HAL_NVIC_SetPriority+0x5a>
 8003592:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003598:	fa0c fc03 	lsl.w	ip, ip, r3
 800359c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80035a4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80035a8:	ea21 010c 	bic.w	r1, r1, ip
 80035ac:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80035ae:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b0:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80035b4:	db0c      	blt.n	80035d0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80035ba:	0109      	lsls	r1, r1, #4
 80035bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80035c0:	b2c9      	uxtb	r1, r1
 80035c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80035c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ca:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035cc:	4613      	mov	r3, r2
 80035ce:	e7e7      	b.n	80035a0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <HAL_NVIC_SetPriority+0x78>)
 80035d2:	f000 000f 	and.w	r0, r0, #15
 80035d6:	0109      	lsls	r1, r1, #4
 80035d8:	4403      	add	r3, r0
 80035da:	b2c9      	uxtb	r1, r1
 80035dc:	7619      	strb	r1, [r3, #24]
 80035de:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00
 80035e8:	e000ecfc 	.word	0xe000ecfc

080035ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80035ec:	2800      	cmp	r0, #0
 80035ee:	db07      	blt.n	8003600 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_NVIC_EnableIRQ+0x18>)
 80035f2:	0941      	lsrs	r1, r0, #5
 80035f4:	2301      	movs	r3, #1
 80035f6:	f000 001f 	and.w	r0, r0, #31
 80035fa:	4083      	lsls	r3, r0
 80035fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003608:	3801      	subs	r0, #1
 800360a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800360e:	d210      	bcs.n	8003632 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003610:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003612:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003616:	4c08      	ldr	r4, [pc, #32]	; (8003638 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003618:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800361e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003622:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003624:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003626:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003628:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800362a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362e:	6119      	str	r1, [r3, #16]
 8003630:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003632:	2001      	movs	r0, #1
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800363c:	b188      	cbz	r0, 8003662 <HAL_DAC_Init+0x26>
{
 800363e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003640:	7903      	ldrb	r3, [r0, #4]
 8003642:	4604      	mov	r4, r0
 8003644:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003648:	b13b      	cbz	r3, 800365a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800364a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800364c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800364e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003650:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003652:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003654:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8003656:	4618      	mov	r0, r3
}
 8003658:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800365a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800365c:	f7fe fd9c 	bl	8002198 <HAL_DAC_MspInit>
 8003660:	e7f3      	b.n	800364a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8003662:	2001      	movs	r0, #1
}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop

08003668 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800366a:	7943      	ldrb	r3, [r0, #5]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d02e      	beq.n	80036ce <HAL_DAC_Start+0x66>
 8003670:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003672:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003674:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8003676:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 8003678:	2001      	movs	r0, #1
 800367a:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 800367c:	460d      	mov	r5, r1
 800367e:	f005 0710 	and.w	r7, r5, #16
 8003682:	6811      	ldr	r1, [r2, #0]
 8003684:	fa00 f307 	lsl.w	r3, r0, r7
 8003688:	430b      	orrs	r3, r1
 800368a:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800368c:	f7ff fa74 	bl	8002b78 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003690:	6822      	ldr	r2, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8003692:	b96d      	cbnz	r5, 80036b0 <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800369a:	42b3      	cmp	r3, r6
 800369c:	d103      	bne.n	80036a6 <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800369e:	6853      	ldr	r3, [r2, #4]
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80036a6:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80036a8:	2301      	movs	r3, #1
 80036aa:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80036ac:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 80036ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80036b0:	6813      	ldr	r3, [r2, #0]
 80036b2:	40be      	lsls	r6, r7
 80036b4:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 80036b8:	42b3      	cmp	r3, r6
 80036ba:	d1f4      	bne.n	80036a6 <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80036bc:	6853      	ldr	r3, [r2, #4]
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 80036c4:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 80036c6:	2301      	movs	r3, #1
 80036c8:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 80036ca:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 80036cc:	e7ef      	b.n	80036ae <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 80036ce:	2002      	movs	r0, #2
}
 80036d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036d2:	bf00      	nop

080036d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80036d4:	b410      	push	{r4}
 80036d6:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80036d8:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 80036da:	2400      	movs	r4, #0
 80036dc:	9401      	str	r4, [sp, #4]
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80036de:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80036e0:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 80036e2:	b951      	cbnz	r1, 80036fa <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80036e4:	9901      	ldr	r1, [sp, #4]
 80036e6:	3108      	adds	r1, #8
 80036e8:	440a      	add	r2, r1
 80036ea:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80036ec:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 80036ee:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 80036f0:	6013      	str	r3, [r2, #0]
}
 80036f2:	b003      	add	sp, #12
 80036f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036f8:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80036fa:	9901      	ldr	r1, [sp, #4]
 80036fc:	3114      	adds	r1, #20
 80036fe:	440a      	add	r2, r1
 8003700:	9201      	str	r2, [sp, #4]
 8003702:	e7f3      	b.n	80036ec <HAL_DAC_SetValue+0x18>

08003704 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003704:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003706:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 800370a:	2b01      	cmp	r3, #1
 800370c:	f000 80d0 	beq.w	80038b0 <HAL_DAC_ConfigChannel+0x1ac>
 8003710:	2301      	movs	r3, #1
{
 8003712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003716:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 800371a:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800371c:	f04f 0302 	mov.w	r3, #2
 8003720:	4605      	mov	r5, r0
 8003722:	460f      	mov	r7, r1
 8003724:	4616      	mov	r6, r2
 8003726:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003728:	d07d      	beq.n	8003826 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800372a:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800372c:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8003736:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003738:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800373a:	211f      	movs	r1, #31
 800373c:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800373e:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003740:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003744:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003746:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003748:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 800374a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800374c:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800374e:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003750:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003754:	d063      	beq.n	800381e <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003756:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	bf16      	itet	ne
 800375c:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8003760:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003764:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003768:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800376a:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800376e:	f1a4 0401 	sub.w	r4, r4, #1
 8003772:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003776:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800377a:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800377c:	fab8 f888 	clz	r8, r8
 8003780:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003784:	0264      	lsls	r4, r4, #9
 8003786:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 800378a:	ea44 040c 	orr.w	r4, r4, ip
 800378e:	ea44 040e 	orr.w	r4, r4, lr
 8003792:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003798:	40b2      	lsls	r2, r6
 800379a:	430a      	orrs	r2, r1
 800379c:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80037a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a4:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80037a6:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80037ae:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80037b2:	d074      	beq.n	800389e <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80037b4:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037b8:	40b4      	lsls	r4, r6
 80037ba:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80037be:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80037c0:	6803      	ldr	r3, [r0, #0]
 80037c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037c6:	40b2      	lsls	r2, r6
 80037c8:	ea23 0302 	bic.w	r3, r3, r2
 80037cc:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80037ce:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 80037d2:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80037d4:	f640 71fe 	movw	r1, #4094	; 0xffe
 80037d8:	40b1      	lsls	r1, r6
 80037da:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80037de:	fa02 f106 	lsl.w	r1, r2, r6
 80037e2:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80037e4:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 80037e6:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80037e8:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80037ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037f0:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037f2:	24c0      	movs	r4, #192	; 0xc0
 80037f4:	6802      	ldr	r2, [r0, #0]
 80037f6:	40b4      	lsls	r4, r6
 80037f8:	ea22 0204 	bic.w	r2, r2, r4
 80037fc:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80037fe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8003800:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003804:	40b1      	lsls	r1, r6
 8003806:	ea22 0201 	bic.w	r2, r2, r1
 800380a:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800380c:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800380e:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003810:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003812:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8003814:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8003816:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8003818:	7169      	strb	r1, [r5, #5]
}
 800381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800381e:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 8003820:	f04f 0e00 	mov.w	lr, #0
 8003824:	e7a0      	b.n	8003768 <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 8003826:	f7ff f9a1 	bl	8002b6c <HAL_GetTick>
 800382a:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 800382c:	b12e      	cbz	r6, 800383a <HAL_DAC_ConfigChannel+0x136>
 800382e:	e014      	b.n	800385a <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003830:	f7ff f99c 	bl	8002b6c <HAL_GetTick>
 8003834:	1b03      	subs	r3, r0, r4
 8003836:	2b01      	cmp	r3, #1
 8003838:	d83c      	bhi.n	80038b4 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800383a:	682b      	ldr	r3, [r5, #0]
 800383c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	d4f6      	bmi.n	8003830 <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f7ff f998 	bl	8002b78 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003848:	6828      	ldr	r0, [r5, #0]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	6403      	str	r3, [r0, #64]	; 0x40
 800384e:	e00e      	b.n	800386e <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003850:	f7ff f98c 	bl	8002b6c <HAL_GetTick>
 8003854:	1b03      	subs	r3, r0, r4
 8003856:	2b01      	cmp	r3, #1
 8003858:	d82c      	bhi.n	80038b4 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800385a:	682b      	ldr	r3, [r5, #0]
 800385c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385e:	2b00      	cmp	r3, #0
 8003860:	dbf6      	blt.n	8003850 <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 8003862:	2001      	movs	r0, #1
 8003864:	f7ff f988 	bl	8002b78 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003868:	6828      	ldr	r0, [r5, #0]
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800386e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003870:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003872:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003876:	f006 0610 	and.w	r6, r6, #16
 800387a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800387e:	40b1      	lsls	r1, r6
 8003880:	40b2      	lsls	r2, r6
 8003882:	ea23 0301 	bic.w	r3, r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800388a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800388c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388e:	21ff      	movs	r1, #255	; 0xff
 8003890:	40b1      	lsls	r1, r6
 8003892:	40b2      	lsls	r2, r6
 8003894:	ea23 0301 	bic.w	r3, r3, r1
 8003898:	4313      	orrs	r3, r2
 800389a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800389c:	e748      	b.n	8003730 <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800389e:	f000 fe61 	bl	8004564 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_DAC_ConfigChannel+0x1d0>)
 80038a4:	4298      	cmp	r0, r3
 80038a6:	d90d      	bls.n	80038c4 <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 80038a8:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80038aa:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80038ae:	e783      	b.n	80037b8 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 80038b0:	2002      	movs	r0, #2
}
 80038b2:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038b4:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038b6:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 80038be:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038c0:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 80038c2:	e7aa      	b.n	800381a <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <HAL_DAC_ConfigChannel+0x1d4>)
 80038c6:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80038c8:	bf88      	it	hi
 80038ca:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 80038ce:	6828      	ldr	r0, [r5, #0]
 80038d0:	e772      	b.n	80037b8 <HAL_DAC_ConfigChannel+0xb4>
 80038d2:	bf00      	nop
 80038d4:	09896800 	.word	0x09896800
 80038d8:	04c4b400 	.word	0x04c4b400

080038dc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80038dc:	2800      	cmp	r0, #0
 80038de:	d078      	beq.n	80039d2 <HAL_DMA_Init+0xf6>
{
 80038e0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038e2:	4b3d      	ldr	r3, [pc, #244]	; (80039d8 <HAL_DMA_Init+0xfc>)
 80038e4:	6804      	ldr	r4, [r0, #0]
 80038e6:	429c      	cmp	r4, r3
 80038e8:	d95f      	bls.n	80039aa <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038ea:	4a3c      	ldr	r2, [pc, #240]	; (80039dc <HAL_DMA_Init+0x100>)
 80038ec:	4b3c      	ldr	r3, [pc, #240]	; (80039e0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 80038ee:	493d      	ldr	r1, [pc, #244]	; (80039e4 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80038f0:	4422      	add	r2, r4
 80038f2:	fba3 3202 	umull	r3, r2, r3, r2
 80038f6:	0912      	lsrs	r2, r2, #4
 80038f8:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fa:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038fc:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80038fe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8003902:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003904:	4e36      	ldr	r6, [pc, #216]	; (80039e0 <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003906:	4f34      	ldr	r7, [pc, #208]	; (80039d8 <HAL_DMA_Init+0xfc>)
 8003908:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800390c:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 800390e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003910:	430b      	orrs	r3, r1
 8003912:	6941      	ldr	r1, [r0, #20]
 8003914:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003916:	6981      	ldr	r1, [r0, #24]
 8003918:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 800391a:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800391c:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003920:	69c1      	ldr	r1, [r0, #28]
 8003922:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003924:	b2e1      	uxtb	r1, r4
 8003926:	3908      	subs	r1, #8
 8003928:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800392c:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800392e:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8003932:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8003934:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8003938:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800393a:	4e2b      	ldr	r6, [pc, #172]	; (80039e8 <HAL_DMA_Init+0x10c>)
 800393c:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800393e:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003942:	42bc      	cmp	r4, r7
 8003944:	bf98      	it	ls
 8003946:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003948:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800394c:	4c28      	ldr	r4, [pc, #160]	; (80039f0 <HAL_DMA_Init+0x114>)
 800394e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003950:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003954:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003956:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800395a:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800395c:	6484      	str	r4, [r0, #72]	; 0x48
 800395e:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003962:	d02b      	beq.n	80039bc <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003964:	6845      	ldr	r5, [r0, #4]
 8003966:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003968:	3d01      	subs	r5, #1
 800396a:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800396c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003970:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003974:	d828      	bhi.n	80039c8 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003978:	4d1f      	ldr	r5, [pc, #124]	; (80039f8 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800397a:	4a20      	ldr	r2, [pc, #128]	; (80039fc <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800397c:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800397e:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003980:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003982:	f004 041f 	and.w	r4, r4, #31
 8003986:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800398a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800398c:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003990:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003992:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003994:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003996:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8003998:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800399a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800399c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80039a0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80039a4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80039a6:	4618      	mov	r0, r3
}
 80039a8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <HAL_DMA_Init+0x124>)
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 80039ae:	4915      	ldr	r1, [pc, #84]	; (8003a04 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039b0:	4422      	add	r2, r4
 80039b2:	fba3 3202 	umull	r3, r2, r3, r2
 80039b6:	0912      	lsrs	r2, r2, #4
 80039b8:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 80039ba:	e79e      	b.n	80038fa <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80039bc:	2400      	movs	r4, #0
 80039be:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80039c0:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c4:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 80039c8:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80039ca:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ce:	65c3      	str	r3, [r0, #92]	; 0x5c
 80039d0:	e7e1      	b.n	8003996 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40020407 	.word	0x40020407
 80039dc:	bffdfbf8 	.word	0xbffdfbf8
 80039e0:	cccccccd 	.word	0xcccccccd
 80039e4:	40020400 	.word	0x40020400
 80039e8:	40020800 	.word	0x40020800
 80039ec:	40020820 	.word	0x40020820
 80039f0:	40020880 	.word	0x40020880
 80039f4:	1000823f 	.word	0x1000823f
 80039f8:	40020940 	.word	0x40020940
 80039fc:	40020900 	.word	0x40020900
 8003a00:	bffdfff8 	.word	0xbffdfff8
 8003a04:	40020000 	.word	0x40020000

08003a08 <HAL_DMA_Start_IT>:
{
 8003a08:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003a0a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8003a0e:	2c01      	cmp	r4, #1
 8003a10:	d051      	beq.n	8003ab6 <HAL_DMA_Start_IT+0xae>
 8003a12:	2401      	movs	r4, #1
 8003a14:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8003a18:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8003a1c:	2c01      	cmp	r4, #1
 8003a1e:	d005      	beq.n	8003a2c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8003a20:	2300      	movs	r3, #0
 8003a22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8003a26:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8003a28:	2002      	movs	r0, #2
}
 8003a2a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a2c:	2402      	movs	r4, #2
 8003a2e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a32:	2400      	movs	r4, #0
 8003a34:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003a36:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a38:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	f025 0501 	bic.w	r5, r5, #1
 8003a40:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a42:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8003a46:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8003a48:	b115      	cbz	r5, 8003a50 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a4a:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8003a4e:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a50:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8003a52:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8003a54:	f006 0c1f 	and.w	ip, r6, #31
 8003a58:	2601      	movs	r6, #1
 8003a5a:	fa06 f60c 	lsl.w	r6, r6, ip
 8003a5e:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8003a60:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a62:	6883      	ldr	r3, [r0, #8]
 8003a64:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8003a66:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8003a68:	bf0b      	itete	eq
 8003a6a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8003a6c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003a6e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8003a70:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003a72:	b1bb      	cbz	r3, 8003aa4 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f043 030e 	orr.w	r3, r3, #14
 8003a7a:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a7c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	03d2      	lsls	r2, r2, #15
 8003a82:	d503      	bpl.n	8003a8c <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8003a8c:	b11d      	cbz	r5, 8003a96 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a94:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8003a96:	6823      	ldr	r3, [r4, #0]
 8003a98:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003a9c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003a9e:	6023      	str	r3, [r4, #0]
}
 8003aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8003aa2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f023 0304 	bic.w	r3, r3, #4
 8003aaa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	f043 030a 	orr.w	r3, r3, #10
 8003ab2:	6023      	str	r3, [r4, #0]
 8003ab4:	e7e2      	b.n	8003a7c <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8003ab6:	2002      	movs	r0, #2
}
 8003ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8003aba:	4770      	bx	lr

08003abc <HAL_DMA_IRQHandler>:
{
 8003abc:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003abe:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac0:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8003ac2:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac4:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003ac6:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2204      	movs	r2, #4
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	420a      	tst	r2, r1
 8003ad2:	d00e      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x36>
 8003ad4:	f014 0f04 	tst.w	r4, #4
 8003ad8:	d00b      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ada:	682b      	ldr	r3, [r5, #0]
 8003adc:	069b      	lsls	r3, r3, #26
 8003ade:	d403      	bmi.n	8003ae8 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ae8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003aea:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003aec:	b1cb      	cbz	r3, 8003b22 <HAL_DMA_IRQHandler+0x66>
}
 8003aee:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8003af0:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003af2:	2202      	movs	r2, #2
 8003af4:	409a      	lsls	r2, r3
 8003af6:	420a      	tst	r2, r1
 8003af8:	d015      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8003afa:	f014 0f02 	tst.w	r4, #2
 8003afe:	d012      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b00:	682b      	ldr	r3, [r5, #0]
 8003b02:	0699      	lsls	r1, r3, #26
 8003b04:	d406      	bmi.n	8003b14 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b06:	682b      	ldr	r3, [r5, #0]
 8003b08:	f023 030a 	bic.w	r3, r3, #10
 8003b0c:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8003b14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b16:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e5      	bne.n	8003aee <HAL_DMA_IRQHandler+0x32>
}
 8003b22:	bc70      	pop	{r4, r5, r6}
 8003b24:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003b26:	2208      	movs	r2, #8
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	420a      	tst	r2, r1
 8003b2c:	d0f9      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8003b2e:	0722      	lsls	r2, r4, #28
 8003b30:	d5f7      	bpl.n	8003b22 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8003b34:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b36:	f022 020e 	bic.w	r2, r2, #14
 8003b3a:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8003b42:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b44:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b46:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003b48:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8003b4c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d0e6      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x66>
}
 8003b54:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8003b56:	4708      	bx	r1

08003b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b5c:	680c      	ldr	r4, [r1, #0]
{
 8003b5e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b60:	2c00      	cmp	r4, #0
 8003b62:	d07d      	beq.n	8003c60 <HAL_GPIO_Init+0x108>
 8003b64:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b68:	4e71      	ldr	r6, [pc, #452]	; (8003d30 <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8003b6a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b6c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b70:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b72:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8003b76:	ea17 0a04 	ands.w	sl, r7, r4
 8003b7a:	d06b      	beq.n	8003c54 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b7c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8003b80:	f001 0203 	and.w	r2, r1, #3
 8003b84:	1e55      	subs	r5, r2, #1
 8003b86:	2d01      	cmp	r5, #1
 8003b88:	d96d      	bls.n	8003c66 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b8a:	2a03      	cmp	r2, #3
 8003b8c:	f040 80b1 	bne.w	8003cf2 <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b90:	fa02 f20c 	lsl.w	r2, r2, ip
 8003b94:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8003b96:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b98:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9a:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9c:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003ba0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ba2:	d057      	beq.n	8003c54 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba4:	4d63      	ldr	r5, [pc, #396]	; (8003d34 <HAL_GPIO_Init+0x1dc>)
 8003ba6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	662a      	str	r2, [r5, #96]	; 0x60
 8003bae:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8003bb0:	f002 0201 	and.w	r2, r2, #1
 8003bb4:	9203      	str	r2, [sp, #12]
 8003bb6:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb8:	f023 0203 	bic.w	r2, r3, #3
 8003bbc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003bc0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bc4:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc8:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bca:	00bf      	lsls	r7, r7, #2
 8003bcc:	f04f 080f 	mov.w	r8, #15
 8003bd0:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bd4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bd8:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bdc:	d01a      	beq.n	8003c14 <HAL_GPIO_Init+0xbc>
 8003bde:	4d56      	ldr	r5, [pc, #344]	; (8003d38 <HAL_GPIO_Init+0x1e0>)
 8003be0:	42a8      	cmp	r0, r5
 8003be2:	f000 8092 	beq.w	8003d0a <HAL_GPIO_Init+0x1b2>
 8003be6:	4d55      	ldr	r5, [pc, #340]	; (8003d3c <HAL_GPIO_Init+0x1e4>)
 8003be8:	42a8      	cmp	r0, r5
 8003bea:	f000 8093 	beq.w	8003d14 <HAL_GPIO_Init+0x1bc>
 8003bee:	4d54      	ldr	r5, [pc, #336]	; (8003d40 <HAL_GPIO_Init+0x1e8>)
 8003bf0:	42a8      	cmp	r0, r5
 8003bf2:	f000 8083 	beq.w	8003cfc <HAL_GPIO_Init+0x1a4>
 8003bf6:	4d53      	ldr	r5, [pc, #332]	; (8003d44 <HAL_GPIO_Init+0x1ec>)
 8003bf8:	42a8      	cmp	r0, r5
 8003bfa:	f000 8092 	beq.w	8003d22 <HAL_GPIO_Init+0x1ca>
 8003bfe:	4d52      	ldr	r5, [pc, #328]	; (8003d48 <HAL_GPIO_Init+0x1f0>)
 8003c00:	42a8      	cmp	r0, r5
 8003c02:	bf0c      	ite	eq
 8003c04:	f04f 0805 	moveq.w	r8, #5
 8003c08:	f04f 0806 	movne.w	r8, #6
 8003c0c:	fa08 f707 	lsl.w	r7, r8, r7
 8003c10:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c14:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8003c18:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8003c1a:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1e:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 8003c20:	bf54      	ite	pl
 8003c22:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8003c24:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8003c28:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8003c2a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c2c:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 8003c2e:	bf54      	ite	pl
 8003c30:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8003c32:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8003c36:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8003c38:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3a:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8003c3c:	bf54      	ite	pl
 8003c3e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8003c40:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8003c44:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c46:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c48:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8003c4a:	bf54      	ite	pl
 8003c4c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8003c4e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8003c52:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8003c54:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c56:	fa34 f203 	lsrs.w	r2, r4, r3
 8003c5a:	f10c 0c02 	add.w	ip, ip, #2
 8003c5e:	d188      	bne.n	8003b72 <HAL_GPIO_Init+0x1a>
  }
}
 8003c60:	b005      	add	sp, #20
 8003c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8003c66:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c6a:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c6e:	f04f 0803 	mov.w	r8, #3
 8003c72:	fa08 f80c 	lsl.w	r8, r8, ip
 8003c76:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7a:	fa05 f50c 	lsl.w	r5, r5, ip
 8003c7e:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 8003c82:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c84:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8003c88:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c8c:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c90:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8003c94:	409f      	lsls	r7, r3
 8003c96:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8003c9a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003c9c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c9e:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca2:	f8de 7008 	ldr.w	r7, [lr, #8]
 8003ca6:	fa07 f70c 	lsl.w	r7, r7, ip
 8003caa:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cae:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003cb0:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	fa02 f20c 	lsl.w	r2, r2, ip
 8003cb6:	f47f af6e 	bne.w	8003b96 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8003cba:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003cbe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cc2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003cc6:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8003cca:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ccc:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cd0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cd4:	fa07 f708 	lsl.w	r7, r7, r8
 8003cd8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cda:	270f      	movs	r7, #15
 8003cdc:	fa07 f808 	lsl.w	r8, r7, r8
 8003ce0:	9f00      	ldr	r7, [sp, #0]
 8003ce2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ce6:	9f01      	ldr	r7, [sp, #4]
 8003ce8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8003cec:	f8c9 7020 	str.w	r7, [r9, #32]
 8003cf0:	e751      	b.n	8003b96 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cf2:	2503      	movs	r5, #3
 8003cf4:	fa05 f50c 	lsl.w	r5, r5, ip
 8003cf8:	43ed      	mvns	r5, r5
 8003cfa:	e7cf      	b.n	8003c9c <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cfc:	f04f 0803 	mov.w	r8, #3
 8003d00:	fa08 f707 	lsl.w	r7, r8, r7
 8003d04:	ea49 0907 	orr.w	r9, r9, r7
 8003d08:	e784      	b.n	8003c14 <HAL_GPIO_Init+0xbc>
 8003d0a:	fa0b f707 	lsl.w	r7, fp, r7
 8003d0e:	ea49 0907 	orr.w	r9, r9, r7
 8003d12:	e77f      	b.n	8003c14 <HAL_GPIO_Init+0xbc>
 8003d14:	f04f 0802 	mov.w	r8, #2
 8003d18:	fa08 f707 	lsl.w	r7, r8, r7
 8003d1c:	ea49 0907 	orr.w	r9, r9, r7
 8003d20:	e778      	b.n	8003c14 <HAL_GPIO_Init+0xbc>
 8003d22:	f04f 0804 	mov.w	r8, #4
 8003d26:	fa08 f707 	lsl.w	r7, r8, r7
 8003d2a:	ea49 0907 	orr.w	r9, r9, r7
 8003d2e:	e771      	b.n	8003c14 <HAL_GPIO_Init+0xbc>
 8003d30:	40010400 	.word	0x40010400
 8003d34:	40021000 	.word	0x40021000
 8003d38:	48000400 	.word	0x48000400
 8003d3c:	48000800 	.word	0x48000800
 8003d40:	48000c00 	.word	0x48000c00
 8003d44:	48001000 	.word	0x48001000
 8003d48:	48001400 	.word	0x48001400

08003d4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d4c:	b10a      	cbz	r2, 8003d52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d4e:	6181      	str	r1, [r0, #24]
 8003d50:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d52:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop

08003d58 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d58:	4a37      	ldr	r2, [pc, #220]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003d5a:	b960      	cbnz	r0, 8003d76 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d5c:	6813      	ldr	r3, [r2, #0]
 8003d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d66:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d6a:	d01d      	beq.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d74:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d76:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d7a:	d007      	beq.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d86:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d88:	6013      	str	r3, [r2, #0]
}
 8003d8a:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d96:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9a:	d02b      	beq.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8003da0:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003da6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db2:	4822      	ldr	r0, [pc, #136]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003db4:	4922      	ldr	r1, [pc, #136]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dbe:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc0:	6803      	ldr	r3, [r0, #0]
 8003dc2:	2032      	movs	r0, #50	; 0x32
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dc8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dca:	fba1 1303 	umull	r1, r3, r1, r3
 8003dce:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd0:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dd2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	d506      	bpl.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8003dd8:	e000      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x84>
 8003dda:	b123      	cbz	r3, 8003de6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8003ddc:	6951      	ldr	r1, [r2, #20]
 8003dde:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003de0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003de4:	d4f9      	bmi.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 8003dec:	bf54      	ite	pl
 8003dee:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 8003df0:	2003      	movmi	r0, #3
 8003df2:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dfc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dfe:	480f      	ldr	r0, [pc, #60]	; (8003e3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003e00:	490f      	ldr	r1, [pc, #60]	; (8003e40 <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e02:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e0c:	6803      	ldr	r3, [r0, #0]
 8003e0e:	2032      	movs	r0, #50	; 0x32
 8003e10:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e14:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e16:	fba1 1303 	umull	r1, r3, r1, r3
 8003e1a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e1c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e1e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e22:	d5e0      	bpl.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8003e24:	e001      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0xd2>
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0dd      	beq.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8003e2a:	6951      	ldr	r1, [r2, #20]
 8003e2c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003e2e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e32:	d5d8      	bpl.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8003e34:	e7f7      	b.n	8003e26 <HAL_PWREx_ControlVoltageScaling+0xce>
 8003e36:	bf00      	nop
 8003e38:	40007000 	.word	0x40007000
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	431bde83 	.word	0x431bde83

08003e44 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e44:	4a02      	ldr	r2, [pc, #8]	; (8003e50 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8003e46:	6893      	ldr	r3, [r2, #8]
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6093      	str	r3, [r2, #8]
}
 8003e4e:	4770      	bx	lr
 8003e50:	40007000 	.word	0x40007000

08003e54 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e54:	2800      	cmp	r0, #0
 8003e56:	f000 81c3 	beq.w	80041e0 <HAL_RCC_OscConfig+0x38c>
{
 8003e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5e:	6803      	ldr	r3, [r0, #0]
 8003e60:	07d9      	lsls	r1, r3, #31
{
 8003e62:	b082      	sub	sp, #8
 8003e64:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e66:	d52d      	bpl.n	8003ec4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e68:	49a6      	ldr	r1, [pc, #664]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003e6a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e6c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e6e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e72:	2a0c      	cmp	r2, #12
 8003e74:	f000 810a 	beq.w	800408c <HAL_RCC_OscConfig+0x238>
 8003e78:	2a08      	cmp	r2, #8
 8003e7a:	f000 810c 	beq.w	8004096 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	f000 8133 	beq.w	80040ee <HAL_RCC_OscConfig+0x29a>
 8003e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8c:	f000 819b 	beq.w	80041c6 <HAL_RCC_OscConfig+0x372>
 8003e90:	4d9c      	ldr	r5, [pc, #624]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003e92:	682a      	ldr	r2, [r5, #0]
 8003e94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	682a      	ldr	r2, [r5, #0]
 8003e9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ea0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f040 8128 	bne.w	80040f8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fe60 	bl	8002b6c <HAL_GetTick>
 8003eac:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eae:	e005      	b.n	8003ebc <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe fe5c 	bl	8002b6c <HAL_GetTick>
 8003eb4:	1b80      	subs	r0, r0, r6
 8003eb6:	2864      	cmp	r0, #100	; 0x64
 8003eb8:	f200 8142 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	039f      	lsls	r7, r3, #14
 8003ec0:	d4f6      	bmi.n	8003eb0 <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	079e      	lsls	r6, r3, #30
 8003ec6:	d528      	bpl.n	8003f1a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ec8:	4a8e      	ldr	r2, [pc, #568]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003eca:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ecc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ece:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	f000 80ec 	beq.w	80040b0 <HAL_RCC_OscConfig+0x25c>
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	f000 80ee 	beq.w	80040ba <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ede:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4d88      	ldr	r5, [pc, #544]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 811d 	beq.w	8004122 <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eee:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fe3c 	bl	8002b6c <HAL_GetTick>
 8003ef4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ef6:	e005      	b.n	8003f04 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ef8:	f7fe fe38 	bl	8002b6c <HAL_GetTick>
 8003efc:	1b80      	subs	r0, r0, r6
 8003efe:	2802      	cmp	r0, #2
 8003f00:	f200 811e 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	0558      	lsls	r0, r3, #21
 8003f08:	d5f6      	bpl.n	8003ef8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0a:	686b      	ldr	r3, [r5, #4]
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f16:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	071a      	lsls	r2, r3, #28
 8003f1c:	d519      	bpl.n	8003f52 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f20:	4d78      	ldr	r5, [pc, #480]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 809e 	beq.w	8004064 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8003f28:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe fe1a 	bl	8002b6c <HAL_GetTick>
 8003f38:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f3a:	e005      	b.n	8003f48 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fe16 	bl	8002b6c <HAL_GetTick>
 8003f40:	1b80      	subs	r0, r0, r6
 8003f42:	2802      	cmp	r0, #2
 8003f44:	f200 80fc 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f48:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8003f4c:	079f      	lsls	r7, r3, #30
 8003f4e:	d5f5      	bpl.n	8003f3c <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	0759      	lsls	r1, r3, #29
 8003f54:	d541      	bpl.n	8003fda <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f56:	4b6b      	ldr	r3, [pc, #428]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003f58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f5a:	00d2      	lsls	r2, r2, #3
 8003f5c:	f100 80f4 	bmi.w	8004148 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003f62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f66:	659a      	str	r2, [r3, #88]	; 0x58
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f72:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f74:	4e64      	ldr	r6, [pc, #400]	; (8004108 <HAL_RCC_OscConfig+0x2b4>)
 8003f76:	6833      	ldr	r3, [r6, #0]
 8003f78:	05df      	lsls	r7, r3, #23
 8003f7a:	f140 8113 	bpl.w	80041a4 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f000 80e3 	beq.w	800414c <HAL_RCC_OscConfig+0x2f8>
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	f000 8169 	beq.w	800425e <HAL_RCC_OscConfig+0x40a>
 8003f8c:	4e5d      	ldr	r6, [pc, #372]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003f8e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8003f9a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8003f9e:	f022 0204 	bic.w	r2, r2, #4
 8003fa2:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 80d7 	bne.w	800415a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fe fdde 	bl	8002b6c <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fb4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fdd8 	bl	8002b6c <HAL_GetTick>
 8003fbc:	1bc0      	subs	r0, r0, r7
 8003fbe:	4540      	cmp	r0, r8
 8003fc0:	f200 80be 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8003fc8:	079a      	lsls	r2, r3, #30
 8003fca:	d4f5      	bmi.n	8003fb8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fcc:	b125      	cbz	r5, 8003fd8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fce:	4a4d      	ldr	r2, [pc, #308]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8003fd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	069b      	lsls	r3, r3, #26
 8003fdc:	d518      	bpl.n	8004010 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fde:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fe0:	4d48      	ldr	r5, [pc, #288]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80ca 	beq.w	800417c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8003fe8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fdba 	bl	8002b6c <HAL_GetTick>
 8003ff8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ffa:	e005      	b.n	8004008 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffc:	f7fe fdb6 	bl	8002b6c <HAL_GetTick>
 8004000:	1b80      	subs	r0, r0, r6
 8004002:	2802      	cmp	r0, #2
 8004004:	f200 809c 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004008:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800400c:	079f      	lsls	r7, r3, #30
 800400e:	d5f5      	bpl.n	8003ffc <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004010:	69e0      	ldr	r0, [r4, #28]
 8004012:	b318      	cbz	r0, 800405c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004014:	4d3b      	ldr	r5, [pc, #236]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8004016:	68ab      	ldr	r3, [r5, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b0c      	cmp	r3, #12
 800401e:	f000 812c 	beq.w	800427a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004022:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004024:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800402c:	f000 80da 	beq.w	80041e4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004030:	68eb      	ldr	r3, [r5, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004038:	68eb      	ldr	r3, [r5, #12]
 800403a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fd92 	bl	8002b6c <HAL_GetTick>
 8004048:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404a:	e004      	b.n	8004056 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fd8e 	bl	8002b6c <HAL_GetTick>
 8004050:	1b00      	subs	r0, r0, r4
 8004052:	2802      	cmp	r0, #2
 8004054:	d874      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004056:	682b      	ldr	r3, [r5, #0]
 8004058:	019b      	lsls	r3, r3, #6
 800405a:	d4f7      	bmi.n	800404c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 800405c:	2000      	movs	r0, #0
}
 800405e:	b002      	add	sp, #8
 8004060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004064:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004070:	f7fe fd7c 	bl	8002b6c <HAL_GetTick>
 8004074:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004076:	e004      	b.n	8004082 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004078:	f7fe fd78 	bl	8002b6c <HAL_GetTick>
 800407c:	1b80      	subs	r0, r0, r6
 800407e:	2802      	cmp	r0, #2
 8004080:	d85e      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004082:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004086:	0798      	lsls	r0, r3, #30
 8004088:	d4f6      	bmi.n	8004078 <HAL_RCC_OscConfig+0x224>
 800408a:	e761      	b.n	8003f50 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800408c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004090:	2903      	cmp	r1, #3
 8004092:	f47f aef4 	bne.w	8003e7e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	0392      	lsls	r2, r2, #14
 800409c:	f57f af12 	bpl.w	8003ec4 <HAL_RCC_OscConfig+0x70>
 80040a0:	6862      	ldr	r2, [r4, #4]
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	f47f af0e 	bne.w	8003ec4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 80040a8:	2001      	movs	r0, #1
}
 80040aa:	b002      	add	sp, #8
 80040ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040b0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040b4:	2a02      	cmp	r2, #2
 80040b6:	f47f af12 	bne.w	8003ede <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	055d      	lsls	r5, r3, #21
 80040c0:	d502      	bpl.n	80040c8 <HAL_RCC_OscConfig+0x274>
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0ef      	beq.n	80040a8 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 80040ca:	6920      	ldr	r0, [r4, #16]
 80040cc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040ce:	490f      	ldr	r1, [pc, #60]	; (800410c <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80040d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80040d8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040da:	6808      	ldr	r0, [r1, #0]
 80040dc:	f7fe fd04 	bl	8002ae8 <HAL_InitTick>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d1e1      	bne.n	80040a8 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	071a      	lsls	r2, r3, #28
 80040e8:	f57f af33 	bpl.w	8003f52 <HAL_RCC_OscConfig+0xfe>
 80040ec:	e717      	b.n	8003f1e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ee:	4a05      	ldr	r2, [pc, #20]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
 80040f0:	6813      	ldr	r3, [r2, #0]
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80040f8:	f7fe fd38 	bl	8002b6c <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fc:	4e01      	ldr	r6, [pc, #4]	; (8004104 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80040fe:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004100:	e00b      	b.n	800411a <HAL_RCC_OscConfig+0x2c6>
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	40007000 	.word	0x40007000
 800410c:	20000008 	.word	0x20000008
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe fd2c 	bl	8002b6c <HAL_GetTick>
 8004114:	1b40      	subs	r0, r0, r5
 8004116:	2864      	cmp	r0, #100	; 0x64
 8004118:	d812      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800411a:	6833      	ldr	r3, [r6, #0]
 800411c:	039b      	lsls	r3, r3, #14
 800411e:	d5f7      	bpl.n	8004110 <HAL_RCC_OscConfig+0x2bc>
 8004120:	e6cf      	b.n	8003ec2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8004122:	682b      	ldr	r3, [r5, #0]
 8004124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004128:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800412a:	f7fe fd1f 	bl	8002b6c <HAL_GetTick>
 800412e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004130:	682b      	ldr	r3, [r5, #0]
 8004132:	0559      	lsls	r1, r3, #21
 8004134:	d5d6      	bpl.n	80040e4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004136:	f7fe fd19 	bl	8002b6c <HAL_GetTick>
 800413a:	1b80      	subs	r0, r0, r6
 800413c:	2802      	cmp	r0, #2
 800413e:	d9f7      	bls.n	8004130 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004140:	2003      	movs	r0, #3
}
 8004142:	b002      	add	sp, #8
 8004144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004148:	2500      	movs	r5, #0
 800414a:	e713      	b.n	8003f74 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800414c:	4a65      	ldr	r2, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x490>)
 800414e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800415a:	f7fe fd07 	bl	8002b6c <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	4f61      	ldr	r7, [pc, #388]	; (80042e4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8004160:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004166:	e004      	b.n	8004172 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004168:	f7fe fd00 	bl	8002b6c <HAL_GetTick>
 800416c:	1b80      	subs	r0, r0, r6
 800416e:	4540      	cmp	r0, r8
 8004170:	d8e6      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004172:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004176:	0799      	lsls	r1, r3, #30
 8004178:	d5f6      	bpl.n	8004168 <HAL_RCC_OscConfig+0x314>
 800417a:	e727      	b.n	8003fcc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 800417c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004188:	f7fe fcf0 	bl	8002b6c <HAL_GetTick>
 800418c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800418e:	e004      	b.n	800419a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004190:	f7fe fcec 	bl	8002b6c <HAL_GetTick>
 8004194:	1b80      	subs	r0, r0, r6
 8004196:	2802      	cmp	r0, #2
 8004198:	d8d2      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800419a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800419e:	0798      	lsls	r0, r3, #30
 80041a0:	d4f6      	bmi.n	8004190 <HAL_RCC_OscConfig+0x33c>
 80041a2:	e735      	b.n	8004010 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80041ac:	f7fe fcde 	bl	8002b6c <HAL_GetTick>
 80041b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b2:	6833      	ldr	r3, [r6, #0]
 80041b4:	05d8      	lsls	r0, r3, #23
 80041b6:	f53f aee2 	bmi.w	8003f7e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fe fcd7 	bl	8002b6c <HAL_GetTick>
 80041be:	1bc0      	subs	r0, r0, r7
 80041c0:	2802      	cmp	r0, #2
 80041c2:	d9f6      	bls.n	80041b2 <HAL_RCC_OscConfig+0x35e>
 80041c4:	e7bc      	b.n	8004140 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ca:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041dc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041de:	e78b      	b.n	80040f8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80041e0:	2001      	movs	r0, #1
}
 80041e2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80041e4:	f7fe fcc2 	bl	8002b6c <HAL_GetTick>
 80041e8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ea:	e004      	b.n	80041f6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe fcbe 	bl	8002b6c <HAL_GetTick>
 80041f0:	1b80      	subs	r0, r0, r6
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d8a4      	bhi.n	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041f6:	682b      	ldr	r3, [r5, #0]
 80041f8:	0199      	lsls	r1, r3, #6
 80041fa:	d4f7      	bmi.n	80041ec <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041fc:	68e9      	ldr	r1, [r5, #12]
 80041fe:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_RCC_OscConfig+0x494>)
 8004200:	6a22      	ldr	r2, [r4, #32]
 8004202:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004204:	4e37      	ldr	r6, [pc, #220]	; (80042e4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004206:	400b      	ands	r3, r1
 8004208:	4313      	orrs	r3, r2
 800420a:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800420e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004212:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004216:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 800421a:	3801      	subs	r0, #1
 800421c:	0849      	lsrs	r1, r1, #1
 800421e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004222:	3901      	subs	r1, #1
 8004224:	0852      	lsrs	r2, r2, #1
 8004226:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800422a:	3a01      	subs	r2, #1
 800422c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004230:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004232:	682b      	ldr	r3, [r5, #0]
 8004234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004238:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800423a:	68eb      	ldr	r3, [r5, #12]
 800423c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004240:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004242:	f7fe fc93 	bl	8002b6c <HAL_GetTick>
 8004246:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004248:	e005      	b.n	8004256 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424a:	f7fe fc8f 	bl	8002b6c <HAL_GetTick>
 800424e:	1b00      	subs	r0, r0, r4
 8004250:	2802      	cmp	r0, #2
 8004252:	f63f af75 	bhi.w	8004140 <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	6833      	ldr	r3, [r6, #0]
 8004258:	019a      	lsls	r2, r3, #6
 800425a:	d5f6      	bpl.n	800424a <HAL_RCC_OscConfig+0x3f6>
 800425c:	e6fe      	b.n	800405c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_OscConfig+0x490>)
 8004260:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004264:	f042 0204 	orr.w	r2, r2, #4
 8004268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800426c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004278:	e76f      	b.n	800415a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800427a:	2801      	cmp	r0, #1
 800427c:	f43f aeef 	beq.w	800405e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8004280:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004282:	6a22      	ldr	r2, [r4, #32]
 8004284:	f003 0103 	and.w	r1, r3, #3
 8004288:	4291      	cmp	r1, r2
 800428a:	f47f af0d 	bne.w	80040a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800428e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004290:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004294:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800429a:	f47f af05 	bne.w	80040a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800429e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80042a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80042a8:	f47f aefe 	bne.w	80040a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80042b6:	f47f aef7 	bne.w	80040a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042bc:	0852      	lsrs	r2, r2, #1
 80042be:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80042c2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80042c8:	f47f aeee 	bne.w	80040a8 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042cc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80042ce:	0852      	lsrs	r2, r2, #1
 80042d0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80042d4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80042da:	bf14      	ite	ne
 80042dc:	2001      	movne	r0, #1
 80042de:	2000      	moveq	r0, #0
 80042e0:	e6bd      	b.n	800405e <HAL_RCC_OscConfig+0x20a>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
 80042e8:	019f800c 	.word	0x019f800c

080042ec <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_RCC_GetSysClockFreq+0x64>)
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	f002 020c 	and.w	r2, r2, #12
 80042f4:	2a04      	cmp	r2, #4
 80042f6:	d026      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	f002 020c 	and.w	r2, r2, #12
 80042fe:	2a08      	cmp	r2, #8
 8004300:	d023      	beq.n	800434a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	f002 020c 	and.w	r2, r2, #12
 8004308:	2a0c      	cmp	r2, #12
 800430a:	d001      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800430c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800430e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004310:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004312:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004314:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004316:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800431a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800431c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004320:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004324:	bf0c      	ite	eq
 8004326:	4b0b      	ldreq	r3, [pc, #44]	; (8004354 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004328:	4b0b      	ldrne	r3, [pc, #44]	; (8004358 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800432a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800432c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004330:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <HAL_RCC_GetSysClockFreq+0x64>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800433c:	3301      	adds	r3, #1
 800433e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004340:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004344:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004346:	4804      	ldr	r0, [pc, #16]	; (8004358 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004348:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800434a:	4802      	ldr	r0, [pc, #8]	; (8004354 <HAL_RCC_GetSysClockFreq+0x68>)
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
 8004354:	007a1200 	.word	0x007a1200
 8004358:	00f42400 	.word	0x00f42400

0800435c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800435c:	2800      	cmp	r0, #0
 800435e:	f000 80ee 	beq.w	800453e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004362:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCC_ClockConfig+0x1e8>)
{
 8004364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	6813      	ldr	r3, [r2, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	428b      	cmp	r3, r1
 8004370:	460d      	mov	r5, r1
 8004372:	4604      	mov	r4, r0
 8004374:	d20c      	bcs.n	8004390 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	f023 030f 	bic.w	r3, r3, #15
 800437c:	430b      	orrs	r3, r1
 800437e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	428b      	cmp	r3, r1
 8004388:	d002      	beq.n	8004390 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800438a:	2001      	movs	r0, #1
}
 800438c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	07df      	lsls	r7, r3, #31
 8004394:	d569      	bpl.n	800446a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004396:	6867      	ldr	r7, [r4, #4]
 8004398:	2f03      	cmp	r7, #3
 800439a:	f000 80a0 	beq.w	80044de <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439e:	4b6a      	ldr	r3, [pc, #424]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a4:	f000 8097 	beq.w	80044d6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a8:	055b      	lsls	r3, r3, #21
 80043aa:	d5ee      	bpl.n	800438a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043ac:	f7ff ff9e 	bl	80042ec <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80043b0:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
 80043b2:	4298      	cmp	r0, r3
 80043b4:	f240 80c0 	bls.w	8004538 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043b8:	4a63      	ldr	r2, [pc, #396]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80043ba:	6893      	ldr	r3, [r2, #8]
 80043bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043c6:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4e5f      	ldr	r6, [pc, #380]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80043cc:	68b3      	ldr	r3, [r6, #8]
 80043ce:	f023 0303 	bic.w	r3, r3, #3
 80043d2:	433b      	orrs	r3, r7
 80043d4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80043d6:	f7fe fbc9 	bl	8002b6c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043da:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80043de:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e0:	e004      	b.n	80043ec <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e2:	f7fe fbc3 	bl	8002b6c <HAL_GetTick>
 80043e6:	1bc0      	subs	r0, r0, r7
 80043e8:	4540      	cmp	r0, r8
 80043ea:	d871      	bhi.n	80044d0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ec:	68b3      	ldr	r3, [r6, #8]
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	f003 030c 	and.w	r3, r3, #12
 80043f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80043f8:	d1f3      	bne.n	80043e2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	079f      	lsls	r7, r3, #30
 80043fe:	d436      	bmi.n	800446e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	d003      	beq.n	800440e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004406:	68b3      	ldr	r3, [r6, #8]
 8004408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800440c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800440e:	4e4d      	ldr	r6, [pc, #308]	; (8004544 <HAL_RCC_ClockConfig+0x1e8>)
 8004410:	6833      	ldr	r3, [r6, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	42ab      	cmp	r3, r5
 8004418:	d846      	bhi.n	80044a8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	075a      	lsls	r2, r3, #29
 800441e:	d506      	bpl.n	800442e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004420:	4949      	ldr	r1, [pc, #292]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004422:	68e0      	ldr	r0, [r4, #12]
 8004424:	688a      	ldr	r2, [r1, #8]
 8004426:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800442a:	4302      	orrs	r2, r0
 800442c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800442e:	071b      	lsls	r3, r3, #28
 8004430:	d507      	bpl.n	8004442 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004432:	4a45      	ldr	r2, [pc, #276]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004434:	6921      	ldr	r1, [r4, #16]
 8004436:	6893      	ldr	r3, [r2, #8]
 8004438:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800443c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004440:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004442:	f7ff ff53 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 8004446:	4a40      	ldr	r2, [pc, #256]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004448:	4c41      	ldr	r4, [pc, #260]	; (8004550 <HAL_RCC_ClockConfig+0x1f4>)
 800444a:	6892      	ldr	r2, [r2, #8]
 800444c:	4941      	ldr	r1, [pc, #260]	; (8004554 <HAL_RCC_ClockConfig+0x1f8>)
 800444e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004452:	4603      	mov	r3, r0
 8004454:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004456:	4840      	ldr	r0, [pc, #256]	; (8004558 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004458:	f002 021f 	and.w	r2, r2, #31
 800445c:	40d3      	lsrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004460:	6800      	ldr	r0, [r0, #0]
}
 8004462:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004466:	f7fe bb3f 	b.w	8002ae8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446a:	079e      	lsls	r6, r3, #30
 800446c:	d5cf      	bpl.n	800440e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446e:	0758      	lsls	r0, r3, #29
 8004470:	d504      	bpl.n	800447c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004472:	4935      	ldr	r1, [pc, #212]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004474:	688a      	ldr	r2, [r1, #8]
 8004476:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800447a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	0719      	lsls	r1, r3, #28
 800447e:	d506      	bpl.n	800448e <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004480:	4a31      	ldr	r2, [pc, #196]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004482:	6893      	ldr	r3, [r2, #8]
 8004484:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004488:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800448c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448e:	4a2e      	ldr	r2, [pc, #184]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 8004490:	68a1      	ldr	r1, [r4, #8]
 8004492:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004494:	4e2b      	ldr	r6, [pc, #172]	; (8004544 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800449a:	430b      	orrs	r3, r1
 800449c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800449e:	6833      	ldr	r3, [r6, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	d9b8      	bls.n	800441a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	f023 030f 	bic.w	r3, r3, #15
 80044ae:	432b      	orrs	r3, r5
 80044b0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80044b2:	f7fe fb5b 	bl	8002b6c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80044ba:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044bc:	6833      	ldr	r3, [r6, #0]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	d0a9      	beq.n	800441a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c6:	f7fe fb51 	bl	8002b6c <HAL_GetTick>
 80044ca:	1bc0      	subs	r0, r0, r7
 80044cc:	4540      	cmp	r0, r8
 80044ce:	d9f5      	bls.n	80044bc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80044d0:	2003      	movs	r0, #3
}
 80044d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044d6:	039a      	lsls	r2, r3, #14
 80044d8:	f53f af68 	bmi.w	80043ac <HAL_RCC_ClockConfig+0x50>
 80044dc:	e755      	b.n	800438a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	0188      	lsls	r0, r1, #6
 80044e4:	f57f af51 	bpl.w	800438a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044e8:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ea:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ec:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80044ee:	4e17      	ldr	r6, [pc, #92]	; (800454c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044f0:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80044f4:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f6:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044fa:	bf0c      	ite	eq
 80044fc:	4817      	ldreq	r0, [pc, #92]	; (800455c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044fe:	4818      	ldrne	r0, [pc, #96]	; (8004560 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004500:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004502:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004506:	4810      	ldr	r0, [pc, #64]	; (8004548 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004508:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800450c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004510:	68c1      	ldr	r1, [r0, #12]
 8004512:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004516:	3101      	adds	r1, #1
 8004518:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800451a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800451e:	42b2      	cmp	r2, r6
 8004520:	d90a      	bls.n	8004538 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004522:	6882      	ldr	r2, [r0, #8]
 8004524:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8004528:	f43f af46 	beq.w	80043b8 <HAL_RCC_ClockConfig+0x5c>
 800452c:	0799      	lsls	r1, r3, #30
 800452e:	d503      	bpl.n	8004538 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004530:	68a3      	ldr	r3, [r4, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f43f af40 	beq.w	80043b8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004538:	f04f 0900 	mov.w	r9, #0
 800453c:	e745      	b.n	80043ca <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800453e:	2001      	movs	r0, #1
}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40022000 	.word	0x40022000
 8004548:	40021000 	.word	0x40021000
 800454c:	04c4b400 	.word	0x04c4b400
 8004550:	08007d30 	.word	0x08007d30
 8004554:	20000000 	.word	0x20000000
 8004558:	20000008 	.word	0x20000008
 800455c:	007a1200 	.word	0x007a1200
 8004560:	00f42400 	.word	0x00f42400

08004564 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004566:	6818      	ldr	r0, [r3, #0]
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	20000000 	.word	0x20000000

08004570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004574:	6803      	ldr	r3, [r0, #0]
{
 8004576:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004578:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800457c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800457e:	d056      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004580:	4b9f      	ldr	r3, [pc, #636]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004582:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004584:	00d5      	lsls	r5, r2, #3
 8004586:	f140 810c 	bpl.w	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458c:	4d9d      	ldr	r5, [pc, #628]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800458e:	682b      	ldr	r3, [r5, #0]
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004596:	f7fe fae9 	bl	8002b6c <HAL_GetTick>
 800459a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800459c:	e005      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fe fae5 	bl	8002b6c <HAL_GetTick>
 80045a2:	1b83      	subs	r3, r0, r6
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	f200 8107 	bhi.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045aa:	682b      	ldr	r3, [r5, #0]
 80045ac:	05d8      	lsls	r0, r3, #23
 80045ae:	d5f6      	bpl.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80045b0:	4d93      	ldr	r5, [pc, #588]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80045b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80045ba:	d027      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80045bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045be:	429a      	cmp	r2, r3
 80045c0:	d025      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045c2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80045ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ce:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045da:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045de:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045e2:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80045e4:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045e8:	f140 8108 	bpl.w	80047fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fe fabe 	bl	8002b6c <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80045f4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045f6:	e005      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fe fab8 	bl	8002b6c <HAL_GetTick>
 80045fc:	1b80      	subs	r0, r0, r6
 80045fe:	4540      	cmp	r0, r8
 8004600:	f200 80da 	bhi.w	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004604:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004608:	079b      	lsls	r3, r3, #30
 800460a:	d5f5      	bpl.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800460c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460e:	497c      	ldr	r1, [pc, #496]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004610:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004614:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800461e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004620:	b127      	cbz	r7, 800462c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4a77      	ldr	r2, [pc, #476]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004624:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	07de      	lsls	r6, r3, #31
 8004630:	d508      	bpl.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004632:	4973      	ldr	r1, [pc, #460]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004634:	6865      	ldr	r5, [r4, #4]
 8004636:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800463a:	f022 0203 	bic.w	r2, r2, #3
 800463e:	432a      	orrs	r2, r5
 8004640:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004644:	079d      	lsls	r5, r3, #30
 8004646:	d508      	bpl.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004648:	496d      	ldr	r1, [pc, #436]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800464a:	68a5      	ldr	r5, [r4, #8]
 800464c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004650:	f022 020c 	bic.w	r2, r2, #12
 8004654:	432a      	orrs	r2, r5
 8004656:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465a:	0759      	lsls	r1, r3, #29
 800465c:	d508      	bpl.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800465e:	4968      	ldr	r1, [pc, #416]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004660:	68e5      	ldr	r5, [r4, #12]
 8004662:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004666:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800466a:	432a      	orrs	r2, r5
 800466c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004670:	071a      	lsls	r2, r3, #28
 8004672:	d508      	bpl.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004674:	4962      	ldr	r1, [pc, #392]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004676:	6925      	ldr	r5, [r4, #16]
 8004678:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800467c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004680:	432a      	orrs	r2, r5
 8004682:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004686:	069f      	lsls	r7, r3, #26
 8004688:	d508      	bpl.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800468a:	495d      	ldr	r1, [pc, #372]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800468c:	6965      	ldr	r5, [r4, #20]
 800468e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004692:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004696:	432a      	orrs	r2, r5
 8004698:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800469c:	065e      	lsls	r6, r3, #25
 800469e:	d508      	bpl.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046a0:	4957      	ldr	r1, [pc, #348]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80046a2:	69a5      	ldr	r5, [r4, #24]
 80046a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80046a8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80046ac:	432a      	orrs	r2, r5
 80046ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046b2:	061d      	lsls	r5, r3, #24
 80046b4:	d508      	bpl.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b6:	4952      	ldr	r1, [pc, #328]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80046b8:	69e5      	ldr	r5, [r4, #28]
 80046ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80046be:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80046c2:	432a      	orrs	r2, r5
 80046c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c8:	05d9      	lsls	r1, r3, #23
 80046ca:	d508      	bpl.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046cc:	494c      	ldr	r1, [pc, #304]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80046ce:	6a25      	ldr	r5, [r4, #32]
 80046d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80046d4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80046d8:	432a      	orrs	r2, r5
 80046da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046de:	059a      	lsls	r2, r3, #22
 80046e0:	d508      	bpl.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046e2:	4947      	ldr	r1, [pc, #284]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80046e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80046e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80046ea:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80046ee:	432a      	orrs	r2, r5
 80046f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046f4:	055f      	lsls	r7, r3, #21
 80046f6:	d50b      	bpl.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046f8:	4941      	ldr	r1, [pc, #260]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80046fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80046fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004700:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004704:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004706:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800470a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800470e:	d055      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004710:	051e      	lsls	r6, r3, #20
 8004712:	d50b      	bpl.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004714:	493a      	ldr	r1, [pc, #232]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004716:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004718:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800471c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004720:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004722:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004726:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800472a:	d04c      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800472c:	04dd      	lsls	r5, r3, #19
 800472e:	d50b      	bpl.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004730:	4933      	ldr	r1, [pc, #204]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004732:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8004734:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004738:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800473c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800473e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004742:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004746:	d043      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004748:	0499      	lsls	r1, r3, #18
 800474a:	d50b      	bpl.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474c:	492c      	ldr	r1, [pc, #176]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800474e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004750:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004754:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004758:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800475a:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004762:	d03a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004764:	045a      	lsls	r2, r3, #17
 8004766:	d50b      	bpl.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004768:	4925      	ldr	r1, [pc, #148]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800476a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800476c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004770:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004774:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004776:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800477a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800477e:	d031      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004780:	041b      	lsls	r3, r3, #16
 8004782:	d50b      	bpl.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004784:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004786:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004788:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800478c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004790:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004792:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004796:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800479a:	d028      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 800479c:	b002      	add	sp, #8
 800479e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80047a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047a8:	659a      	str	r2, [r3, #88]	; 0x58
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80047b4:	2701      	movs	r7, #1
 80047b6:	e6e9      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 80047b8:	2003      	movs	r0, #3
 80047ba:	e731      	b.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	68ca      	ldr	r2, [r1, #12]
 80047be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047c2:	60ca      	str	r2, [r1, #12]
 80047c4:	e7a4      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047c6:	68ca      	ldr	r2, [r1, #12]
 80047c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047cc:	60ca      	str	r2, [r1, #12]
 80047ce:	e7ad      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d0:	68ca      	ldr	r2, [r1, #12]
 80047d2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047d6:	60ca      	str	r2, [r1, #12]
 80047d8:	e7b6      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047da:	68ca      	ldr	r2, [r1, #12]
 80047dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047e0:	60ca      	str	r2, [r1, #12]
 80047e2:	e7bf      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e4:	68ca      	ldr	r2, [r1, #12]
 80047e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80047ea:	60ca      	str	r2, [r1, #12]
 80047ec:	e7c8      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ee:	68d3      	ldr	r3, [r2, #12]
 80047f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f4:	60d3      	str	r3, [r2, #12]
}
 80047f6:	b002      	add	sp, #8
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	4613      	mov	r3, r2
 80047fe:	e706      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004800:	40021000 	.word	0x40021000
 8004804:	40007000 	.word	0x40007000

08004808 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004808:	6a03      	ldr	r3, [r0, #32]
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004810:	6a03      	ldr	r3, [r0, #32]
{
 8004812:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004814:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004816:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004818:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800481a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800481e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004822:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004824:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004826:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800482a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800482c:	4d13      	ldr	r5, [pc, #76]	; (800487c <TIM_OC1_SetConfig+0x74>)
 800482e:	42a8      	cmp	r0, r5
 8004830:	d00f      	beq.n	8004852 <TIM_OC1_SetConfig+0x4a>
 8004832:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004836:	42a8      	cmp	r0, r5
 8004838:	d00b      	beq.n	8004852 <TIM_OC1_SetConfig+0x4a>
 800483a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800483e:	42a8      	cmp	r0, r5
 8004840:	d007      	beq.n	8004852 <TIM_OC1_SetConfig+0x4a>
 8004842:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004846:	42a8      	cmp	r0, r5
 8004848:	d003      	beq.n	8004852 <TIM_OC1_SetConfig+0x4a>
 800484a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800484e:	42a8      	cmp	r0, r5
 8004850:	d10d      	bne.n	800486e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004852:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004854:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004858:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800485a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800485e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004862:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004866:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800486a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004870:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004872:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004874:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8004876:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004878:	6203      	str	r3, [r0, #32]
}
 800487a:	4770      	bx	lr
 800487c:	40012c00 	.word	0x40012c00

08004880 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004880:	6a03      	ldr	r3, [r0, #32]
 8004882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004886:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004888:	6a03      	ldr	r3, [r0, #32]
{
 800488a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800488e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004890:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004892:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004896:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800489a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800489c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800489e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048a6:	4d15      	ldr	r5, [pc, #84]	; (80048fc <TIM_OC3_SetConfig+0x7c>)
 80048a8:	42a8      	cmp	r0, r5
 80048aa:	d010      	beq.n	80048ce <TIM_OC3_SetConfig+0x4e>
 80048ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80048b0:	42a8      	cmp	r0, r5
 80048b2:	d00c      	beq.n	80048ce <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b4:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80048b8:	42a8      	cmp	r0, r5
 80048ba:	d00f      	beq.n	80048dc <TIM_OC3_SetConfig+0x5c>
 80048bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048c0:	42a8      	cmp	r0, r5
 80048c2:	d00b      	beq.n	80048dc <TIM_OC3_SetConfig+0x5c>
 80048c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048c8:	42a8      	cmp	r0, r5
 80048ca:	d10f      	bne.n	80048ec <TIM_OC3_SetConfig+0x6c>
 80048cc:	e006      	b.n	80048dc <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80048d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048d4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80048d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048dc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048e0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048e4:	ea46 0c05 	orr.w	ip, r6, r5
 80048e8:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ec:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048ee:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80048f0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80048f2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80048f4:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80048f6:	6203      	str	r3, [r0, #32]
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	40012c00 	.word	0x40012c00

08004900 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004900:	6a03      	ldr	r3, [r0, #32]
 8004902:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004906:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004908:	6a03      	ldr	r3, [r0, #32]
{
 800490a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800490c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004910:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004912:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004916:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800491e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004924:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004928:	4d14      	ldr	r5, [pc, #80]	; (800497c <TIM_OC4_SetConfig+0x7c>)
 800492a:	42a8      	cmp	r0, r5
 800492c:	d010      	beq.n	8004950 <TIM_OC4_SetConfig+0x50>
 800492e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004932:	42a8      	cmp	r0, r5
 8004934:	d00c      	beq.n	8004950 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004936:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800493a:	42a8      	cmp	r0, r5
 800493c:	d00f      	beq.n	800495e <TIM_OC4_SetConfig+0x5e>
 800493e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004942:	42a8      	cmp	r0, r5
 8004944:	d00b      	beq.n	800495e <TIM_OC4_SetConfig+0x5e>
 8004946:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800494a:	42a8      	cmp	r0, r5
 800494c:	d10f      	bne.n	800496e <TIM_OC4_SetConfig+0x6e>
 800494e:	e006      	b.n	800495e <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004950:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8004952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004956:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800495a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800495e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004962:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004966:	ea46 0c05 	orr.w	ip, r6, r5
 800496a:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800496e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004970:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004972:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004974:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8004976:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004978:	6203      	str	r3, [r0, #32]
}
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00

08004980 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004980:	2800      	cmp	r0, #0
 8004982:	f000 8081 	beq.w	8004a88 <HAL_TIM_Base_Init+0x108>
{
 8004986:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004988:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800498c:	4604      	mov	r4, r0
 800498e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004992:	2b00      	cmp	r3, #0
 8004994:	d06d      	beq.n	8004a72 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004996:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	493c      	ldr	r1, [pc, #240]	; (8004a8c <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800499a:	2302      	movs	r3, #2
 800499c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a0:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80049a2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	d051      	beq.n	8004a4a <HAL_TIM_Base_Init+0xca>
 80049a6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80049aa:	d021      	beq.n	80049f0 <HAL_TIM_Base_Init+0x70>
 80049ac:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80049b0:	428a      	cmp	r2, r1
 80049b2:	d01d      	beq.n	80049f0 <HAL_TIM_Base_Init+0x70>
 80049b4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049b8:	428a      	cmp	r2, r1
 80049ba:	d019      	beq.n	80049f0 <HAL_TIM_Base_Init+0x70>
 80049bc:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 80049c0:	428a      	cmp	r2, r1
 80049c2:	d042      	beq.n	8004a4a <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c4:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 80049c8:	428a      	cmp	r2, r1
 80049ca:	d057      	beq.n	8004a7c <HAL_TIM_Base_Init+0xfc>
 80049cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049d0:	428a      	cmp	r2, r1
 80049d2:	d053      	beq.n	8004a7c <HAL_TIM_Base_Init+0xfc>
 80049d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049d8:	428a      	cmp	r2, r1
 80049da:	d04f      	beq.n	8004a7c <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049dc:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049de:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e4:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80049e6:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80049e8:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ea:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80049ec:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049ee:	e010      	b.n	8004a12 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 80049f0:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80049f8:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fe:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a00:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a06:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a08:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004a0a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004a0c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a0e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a10:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004a12:	2301      	movs	r3, #1
 8004a14:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a16:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a1e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a22:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a26:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a3a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004a3e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a46:	2000      	movs	r0, #0
}
 8004a48:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004a4a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a4c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a52:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a58:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5a:	69a1      	ldr	r1, [r4, #24]
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a60:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a64:	68e3      	ldr	r3, [r4, #12]
 8004a66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a6c:	6963      	ldr	r3, [r4, #20]
 8004a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004a70:	e7cf      	b.n	8004a12 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004a72:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a76:	f7fd ffaf 	bl	80029d8 <HAL_TIM_Base_MspInit>
 8004a7a:	e78c      	b.n	8004996 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a7c:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a7e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a84:	4303      	orrs	r3, r0
 8004a86:	e7e9      	b.n	8004a5c <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8004a88:	2001      	movs	r0, #1
}
 8004a8a:	4770      	bx	lr
 8004a8c:	40012c00 	.word	0x40012c00

08004a90 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004a90:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d122      	bne.n	8004ade <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a98:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9a:	4917      	ldr	r1, [pc, #92]	; (8004af8 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	d019      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d016      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_TIM_Base_Start_IT+0x6c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
 8004aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00f      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
 8004ac2:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
 8004aca:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8004ad8:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	4770      	bx	lr
    return HAL_ERROR;
 8004ade:	2001      	movs	r0, #1
 8004ae0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae2:	6899      	ldr	r1, [r3, #8]
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <HAL_TIM_Base_Start_IT+0x70>)
 8004ae6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae8:	2a06      	cmp	r2, #6
 8004aea:	d002      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x62>
 8004aec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004af0:	d1ef      	bne.n	8004ad2 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8004af2:	2000      	movs	r0, #0
}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	00010007 	.word	0x00010007

08004b04 <HAL_TIM_PWM_MspInit>:
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f000 8081 	beq.w	8004c10 <HAL_TIM_PWM_Init+0x108>
{
 8004b0e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b14:	4604      	mov	r4, r0
 8004b16:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06d      	beq.n	8004bfa <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1e:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b20:	493c      	ldr	r1, [pc, #240]	; (8004c14 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004b22:	2302      	movs	r3, #2
 8004b24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b28:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004b2a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b2c:	d051      	beq.n	8004bd2 <HAL_TIM_PWM_Init+0xca>
 8004b2e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b32:	d021      	beq.n	8004b78 <HAL_TIM_PWM_Init+0x70>
 8004b34:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8004b38:	428a      	cmp	r2, r1
 8004b3a:	d01d      	beq.n	8004b78 <HAL_TIM_PWM_Init+0x70>
 8004b3c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b40:	428a      	cmp	r2, r1
 8004b42:	d019      	beq.n	8004b78 <HAL_TIM_PWM_Init+0x70>
 8004b44:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8004b48:	428a      	cmp	r2, r1
 8004b4a:	d042      	beq.n	8004bd2 <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b4c:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8004b50:	428a      	cmp	r2, r1
 8004b52:	d057      	beq.n	8004c04 <HAL_TIM_PWM_Init+0xfc>
 8004b54:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b58:	428a      	cmp	r2, r1
 8004b5a:	d053      	beq.n	8004c04 <HAL_TIM_PWM_Init+0xfc>
 8004b5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b60:	428a      	cmp	r2, r1
 8004b62:	d04f      	beq.n	8004c04 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b64:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b66:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004b6e:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004b70:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b72:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b74:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b76:	e010      	b.n	8004b9a <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8004b78:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7a:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b80:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b86:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b8e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b90:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004b92:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004b94:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b96:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b98:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004ba6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004baa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004bae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004bb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004bbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004bc6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004bca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004bce:	2000      	movs	r0, #0
}
 8004bd0:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8004bd2:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd4:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bda:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be2:	69a1      	ldr	r1, [r4, #24]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004bea:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bec:	68e3      	ldr	r3, [r4, #12]
 8004bee:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bf0:	6863      	ldr	r3, [r4, #4]
 8004bf2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf4:	6963      	ldr	r3, [r4, #20]
 8004bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf8:	e7cf      	b.n	8004b9a <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8004bfa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004bfe:	f7ff ff81 	bl	8004b04 <HAL_TIM_PWM_MspInit>
 8004c02:	e78c      	b.n	8004b1e <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c04:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c06:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0c:	4303      	orrs	r3, r0
 8004c0e:	e7e9      	b.n	8004be4 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 8004c10:	2001      	movs	r0, #1
}
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00

08004c18 <HAL_TIM_PWM_Start>:
 8004c18:	2910      	cmp	r1, #16
 8004c1a:	d80a      	bhi.n	8004c32 <HAL_TIM_PWM_Start+0x1a>
 8004c1c:	e8df f001 	tbb	[pc, r1]
 8004c20:	09090955 	.word	0x09090955
 8004c24:	0909095b 	.word	0x0909095b
 8004c28:	09090963 	.word	0x09090963
 8004c2c:	09090968 	.word	0x09090968
 8004c30:	71          	.byte	0x71
 8004c31:	00          	.byte	0x00
 8004c32:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d14b      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xba>
 8004c3a:	2910      	cmp	r1, #16
 8004c3c:	d80a      	bhi.n	8004c54 <HAL_TIM_PWM_Start+0x3c>
 8004c3e:	e8df f001 	tbb	[pc, r1]
 8004c42:	0987      	.short	0x0987
 8004c44:	094e0909 	.word	0x094e0909
 8004c48:	09700909 	.word	0x09700909
 8004c4c:	096c0909 	.word	0x096c0909
 8004c50:	0909      	.short	0x0909
 8004c52:	68          	.byte	0x68
 8004c53:	00          	.byte	0x00
 8004c54:	2302      	movs	r3, #2
 8004c56:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8004c5a:	6803      	ldr	r3, [r0, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	6a18      	ldr	r0, [r3, #32]
 8004c60:	f001 011f 	and.w	r1, r1, #31
 8004c64:	fa02 f101 	lsl.w	r1, r2, r1
 8004c68:	ea20 0001 	bic.w	r0, r0, r1
 8004c6c:	6218      	str	r0, [r3, #32]
 8004c6e:	6a18      	ldr	r0, [r3, #32]
 8004c70:	4a39      	ldr	r2, [pc, #228]	; (8004d58 <HAL_TIM_PWM_Start+0x140>)
 8004c72:	4301      	orrs	r1, r0
 8004c74:	4293      	cmp	r3, r2
 8004c76:	6219      	str	r1, [r3, #32]
 8004c78:	d057      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x112>
 8004c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d061      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x12e>
 8004c82:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d05d      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x12e>
 8004c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d059      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x12e>
 8004c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d055      	beq.n	8004d46 <HAL_TIM_PWM_Start+0x12e>
 8004c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c9e:	d048      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x11a>
 8004ca0:	4a2e      	ldr	r2, [pc, #184]	; (8004d5c <HAL_TIM_PWM_Start+0x144>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d045      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x11a>
 8004ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d041      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x11a>
 8004cae:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d03d      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x11a>
 8004cb6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d039      	beq.n	8004d32 <HAL_TIM_PWM_Start+0x11a>
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	4770      	bx	lr
 8004cca:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d03e      	beq.n	8004d50 <HAL_TIM_PWM_Start+0x138>
 8004cd2:	2001      	movs	r0, #1
 8004cd4:	4770      	bx	lr
 8004cd6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d1f9      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0xba>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004ce4:	e7b9      	b.n	8004c5a <HAL_TIM_PWM_Start+0x42>
 8004ce6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d0a5      	beq.n	8004c3a <HAL_TIM_PWM_Start+0x22>
 8004cee:	e7f0      	b.n	8004cd2 <HAL_TIM_PWM_Start+0xba>
 8004cf0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	bf18      	it	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d09d      	beq.n	8004c3a <HAL_TIM_PWM_Start+0x22>
 8004cfe:	2001      	movs	r0, #1
 8004d00:	4770      	bx	lr
 8004d02:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8004d06:	3b01      	subs	r3, #1
 8004d08:	bf18      	it	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d094      	beq.n	8004c3a <HAL_TIM_PWM_Start+0x22>
 8004d10:	e7f5      	b.n	8004cfe <HAL_TIM_PWM_Start+0xe6>
 8004d12:	2302      	movs	r3, #2
 8004d14:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8004d18:	e79f      	b.n	8004c5a <HAL_TIM_PWM_Start+0x42>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004d20:	e79b      	b.n	8004c5a <HAL_TIM_PWM_Start+0x42>
 8004d22:	2302      	movs	r3, #2
 8004d24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004d28:	e797      	b.n	8004c5a <HAL_TIM_PWM_Start+0x42>
 8004d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
 8004d32:	6899      	ldr	r1, [r3, #8]
 8004d34:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <HAL_TIM_PWM_Start+0x148>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	2a06      	cmp	r2, #6
 8004d3a:	d002      	beq.n	8004d42 <HAL_TIM_PWM_Start+0x12a>
 8004d3c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004d40:	d1bd      	bne.n	8004cbe <HAL_TIM_PWM_Start+0xa6>
 8004d42:	2000      	movs	r0, #0
 8004d44:	4770      	bx	lr
 8004d46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4c:	645a      	str	r2, [r3, #68]	; 0x44
 8004d4e:	e7a4      	b.n	8004c9a <HAL_TIM_PWM_Start+0x82>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004d56:	e780      	b.n	8004c5a <HAL_TIM_PWM_Start+0x42>
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	00010007 	.word	0x00010007

08004d64 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004d64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	f000 8088 	beq.w	8004e7e <HAL_TIM_ConfigClockSource+0x11a>
 8004d6e:	4602      	mov	r2, r0
{
 8004d70:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d76:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004d80:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d82:	4b5e      	ldr	r3, [pc, #376]	; (8004efc <HAL_TIM_ConfigClockSource+0x198>)
 8004d84:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004d86:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004d88:	680b      	ldr	r3, [r1, #0]
 8004d8a:	2b70      	cmp	r3, #112	; 0x70
 8004d8c:	f000 80a5 	beq.w	8004eda <HAL_TIM_ConfigClockSource+0x176>
 8004d90:	d827      	bhi.n	8004de2 <HAL_TIM_ConfigClockSource+0x7e>
 8004d92:	2b50      	cmp	r3, #80	; 0x50
 8004d94:	d075      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x11e>
 8004d96:	d93d      	bls.n	8004e14 <HAL_TIM_ConfigClockSource+0xb0>
 8004d98:	2b60      	cmp	r3, #96	; 0x60
 8004d9a:	d11a      	bne.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9c:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d9e:	6848      	ldr	r0, [r1, #4]
 8004da0:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da2:	f023 0310 	bic.w	r3, r3, #16
 8004da6:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da8:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8004daa:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dac:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004db4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db8:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dbc:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8004dbe:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc0:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dc2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dca:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dd0:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004dd2:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004dd4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004dd6:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004dda:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004dde:	bc30      	pop	{r4, r5}
 8004de0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de6:	d067      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0x154>
 8004de8:	d938      	bls.n	8004e5c <HAL_TIM_ConfigClockSource+0xf8>
 8004dea:	4945      	ldr	r1, [pc, #276]	; (8004f00 <HAL_TIM_ConfigClockSource+0x19c>)
 8004dec:	428b      	cmp	r3, r1
 8004dee:	d006      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004df0:	d92d      	bls.n	8004e4e <HAL_TIM_ConfigClockSource+0xea>
 8004df2:	4944      	ldr	r1, [pc, #272]	; (8004f04 <HAL_TIM_ConfigClockSource+0x1a0>)
 8004df4:	428b      	cmp	r3, r1
 8004df6:	d002      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004df8:	3130      	adds	r1, #48	; 0x30
 8004dfa:	428b      	cmp	r3, r1
 8004dfc:	d1e9      	bne.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8004dfe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e00:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004e04:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e08:	4319      	orrs	r1, r3
 8004e0a:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004e10:	60a1      	str	r1, [r4, #8]
}
 8004e12:	e7de      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d126      	bne.n	8004e66 <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e18:	684b      	ldr	r3, [r1, #4]
 8004e1a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e1c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e1e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004e22:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e24:	6a23      	ldr	r3, [r4, #32]
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e32:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e36:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e38:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004e3a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e44:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004e48:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004e4a:	60a3      	str	r3, [r4, #8]
}
 8004e4c:	e7c1      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004e4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004e52:	d0d4      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004e54:	3910      	subs	r1, #16
 8004e56:	428b      	cmp	r3, r1
 8004e58:	d0d1      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004e5a:	e7ba      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8004e5c:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8004e60:	bf18      	it	ne
 8004e62:	2001      	movne	r0, #1
 8004e64:	e7b5      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8004e66:	d8b4      	bhi.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d0c8      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004e6c:	d903      	bls.n	8004e76 <HAL_TIM_ConfigClockSource+0x112>
 8004e6e:	2b30      	cmp	r3, #48	; 0x30
 8004e70:	d0c5      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
 8004e72:	2001      	movs	r0, #1
 8004e74:	e7ad      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8004e76:	f033 0110 	bics.w	r1, r3, #16
 8004e7a:	d1aa      	bne.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8004e7c:	e7bf      	b.n	8004dfe <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8004e7e:	2002      	movs	r0, #2
}
 8004e80:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	684b      	ldr	r3, [r1, #4]
 8004e84:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e86:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e88:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004e8c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	6a23      	ldr	r3, [r4, #32]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e9c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004ea0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004ea2:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004ea4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004eb4:	60a3      	str	r3, [r4, #8]
}
 8004eb6:	e78c      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eb8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004ebc:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ebe:	432b      	orrs	r3, r5
 8004ec0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec2:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ec6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004eca:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ecc:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004ed4:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ed6:	60a3      	str	r3, [r4, #8]
      break;
 8004ed8:	e77b      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eda:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004ede:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee0:	432b      	orrs	r3, r5
 8004ee2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004eec:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004eee:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004ef0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ef2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8004ef8:	60a3      	str	r3, [r4, #8]
      break;
 8004efa:	e76a      	b.n	8004dd2 <HAL_TIM_ConfigClockSource+0x6e>
 8004efc:	ffce0088 	.word	0xffce0088
 8004f00:	00100030 	.word	0x00100030
 8004f04:	00100040 	.word	0x00100040

08004f08 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f08:	6a03      	ldr	r3, [r0, #32]
 8004f0a:	f023 0310 	bic.w	r3, r3, #16
 8004f0e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004f10:	6a03      	ldr	r3, [r0, #32]
{
 8004f12:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004f14:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004f16:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f1a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f1e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f26:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004f28:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f30:	4d14      	ldr	r5, [pc, #80]	; (8004f84 <TIM_OC2_SetConfig+0x7c>)
 8004f32:	42a8      	cmp	r0, r5
 8004f34:	d010      	beq.n	8004f58 <TIM_OC2_SetConfig+0x50>
 8004f36:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f3a:	42a8      	cmp	r0, r5
 8004f3c:	d00c      	beq.n	8004f58 <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004f42:	42a8      	cmp	r0, r5
 8004f44:	d00f      	beq.n	8004f66 <TIM_OC2_SetConfig+0x5e>
 8004f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f4a:	42a8      	cmp	r0, r5
 8004f4c:	d00b      	beq.n	8004f66 <TIM_OC2_SetConfig+0x5e>
 8004f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f52:	42a8      	cmp	r0, r5
 8004f54:	d10f      	bne.n	8004f76 <TIM_OC2_SetConfig+0x6e>
 8004f56:	e006      	b.n	8004f66 <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f58:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f66:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f6a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f6e:	ea46 0c05 	orr.w	ip, r6, r5
 8004f72:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004f76:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004f78:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004f7a:	6182      	str	r2, [r0, #24]
}
 8004f7c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004f7e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004f80:	6203      	str	r3, [r0, #32]
}
 8004f82:	4770      	bx	lr
 8004f84:	40012c00 	.word	0x40012c00

08004f88 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004f88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	f000 80f7 	beq.w	8005180 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004f92:	2301      	movs	r3, #1
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4604      	mov	r4, r0
 8004f98:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004f9a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004f9e:	2a14      	cmp	r2, #20
 8004fa0:	d80c      	bhi.n	8004fbc <HAL_TIM_PWM_ConfigChannel+0x34>
 8004fa2:	e8df f002 	tbb	[pc, r2]
 8004fa6:	0b55      	.short	0x0b55
 8004fa8:	0b6a0b0b 	.word	0x0b6a0b0b
 8004fac:	0b800b0b 	.word	0x0b800b0b
 8004fb0:	0b950b0b 	.word	0x0b950b0b
 8004fb4:	0bab0b0b 	.word	0x0bab0b0b
 8004fb8:	0b0b      	.short	0x0b0b
 8004fba:	11          	.byte	0x11
 8004fbb:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004fbc:	2200      	movs	r2, #0
  switch (Channel)
 8004fbe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004fc0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fc8:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fca:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fcc:	6a13      	ldr	r3, [r2, #32]
 8004fce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fd2:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8004fd4:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004fd6:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004fd8:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fda:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004fde:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe2:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fe6:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fe8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fec:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff0:	4e65      	ldr	r6, [pc, #404]	; (8005188 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8004ff2:	42b2      	cmp	r2, r6
 8004ff4:	d00f      	beq.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8004ff6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004ffa:	42b2      	cmp	r2, r6
 8004ffc:	d00b      	beq.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8004ffe:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005002:	42b2      	cmp	r2, r6
 8005004:	d007      	beq.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005006:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800500a:	42b2      	cmp	r2, r6
 800500c:	d003      	beq.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x8e>
 800500e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005012:	42b2      	cmp	r2, r6
 8005014:	d104      	bne.n	8005020 <HAL_TIM_PWM_ConfigChannel+0x98>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005016:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005018:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800501c:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005020:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005022:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005024:	6869      	ldr	r1, [r5, #4]
 8005026:	64d1      	str	r1, [r2, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005028:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800502a:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800502c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800502e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005032:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005034:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005036:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800503a:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800503c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800503e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8005042:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005044:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005048:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800504c:	4618      	mov	r0, r3
 800504e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005050:	6800      	ldr	r0, [r0, #0]
 8005052:	f7ff fbd9 	bl	8004808 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005056:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005058:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800505a:	f043 0308 	orr.w	r3, r3, #8
 800505e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	6982      	ldr	r2, [r0, #24]
 8005062:	f022 0204 	bic.w	r2, r2, #4
 8005066:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005068:	6982      	ldr	r2, [r0, #24]
 800506a:	430a      	orrs	r2, r1
 800506c:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800506e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005070:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005072:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8005076:	4618      	mov	r0, r3
 8005078:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	f7ff ff44 	bl	8004f08 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005080:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005082:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005084:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005088:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800508a:	6982      	ldr	r2, [r0, #24]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005090:	6182      	str	r2, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005092:	6982      	ldr	r2, [r0, #24]
 8005094:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005098:	6182      	str	r2, [r0, #24]
  __HAL_UNLOCK(htim);
 800509a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800509c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800509e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	f7ff fbea 	bl	8004880 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050ac:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050ae:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b0:	f043 0308 	orr.w	r3, r3, #8
 80050b4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050b6:	69c2      	ldr	r2, [r0, #28]
 80050b8:	f022 0204 	bic.w	r2, r2, #4
 80050bc:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050be:	69c2      	ldr	r2, [r0, #28]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 80050c4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80050c8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050d0:	6800      	ldr	r0, [r0, #0]
 80050d2:	f7ff fc15 	bl	8004900 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050d6:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d8:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050de:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050e0:	69c2      	ldr	r2, [r0, #28]
 80050e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e6:	61c2      	str	r2, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050e8:	69c2      	ldr	r2, [r0, #28]
 80050ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80050ee:	61c2      	str	r2, [r0, #28]
  __HAL_UNLOCK(htim);
 80050f0:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050f2:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80050f4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050fc:	6802      	ldr	r2, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80050fe:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005100:	6a13      	ldr	r3, [r2, #32]
 8005102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005106:	6213      	str	r3, [r2, #32]
  tmpccer = TIMx->CCER;
 8005108:	6a13      	ldr	r3, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800510a:	6850      	ldr	r0, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 800510c:	6d11      	ldr	r1, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800510e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005112:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005116:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005118:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800511a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800511e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	4e19      	ldr	r6, [pc, #100]	; (8005188 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005124:	42b2      	cmp	r2, r6
 8005126:	d00f      	beq.n	8005148 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005128:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800512c:	42b2      	cmp	r2, r6
 800512e:	d00b      	beq.n	8005148 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005130:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005134:	42b2      	cmp	r2, r6
 8005136:	d007      	beq.n	8005148 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005138:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800513c:	42b2      	cmp	r2, r6
 800513e:	d003      	beq.n	8005148 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8005140:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005144:	42b2      	cmp	r2, r6
 8005146:	d104      	bne.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x1ca>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005148:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800514a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800514e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005152:	6050      	str	r0, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005154:	6511      	str	r1, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005156:	6869      	ldr	r1, [r5, #4]
 8005158:	6491      	str	r1, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 800515a:	6213      	str	r3, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800515c:	6d13      	ldr	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800515e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005166:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005168:	f021 0104 	bic.w	r1, r1, #4
 800516c:	6511      	str	r1, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800516e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005170:	4301      	orrs	r1, r0
 8005172:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005174:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8005178:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005180:	2302      	movs	r3, #2
}
 8005182:	4618      	mov	r0, r3
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800518c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d03e      	beq.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8005194:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005196:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005198:	4d1f      	ldr	r5, [pc, #124]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	2302      	movs	r3, #2
 800519c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a0:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80051a2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80051a4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a6:	d028      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80051a8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80051ac:	42aa      	cmp	r2, r5
 80051ae:	d024      	beq.n	80051fa <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80051b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051ba:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051bc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80051c0:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c2:	d00c      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80051ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d005      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80051d2:	42aa      	cmp	r2, r5
 80051d4:	d003      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80051d6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80051da:	429a      	cmp	r2, r3
 80051dc:	d104      	bne.n	80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e4:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80051e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80051ea:	2201      	movs	r2, #1
 80051ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80051f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80051f4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80051f6:	4618      	mov	r0, r3
}
 80051f8:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051fa:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005200:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005202:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005206:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800520c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 800520e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005210:	e7e5      	b.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8005212:	2002      	movs	r0, #2
}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40000400 	.word	0x40000400

08005220 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005220:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d045      	beq.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8005228:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800522a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800522e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005232:	4602      	mov	r2, r0
 8005234:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005236:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005238:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800523a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005240:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005244:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005246:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800524c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800524e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005254:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005256:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800525c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800525e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005260:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005264:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005266:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800526a:	4c13      	ldr	r4, [pc, #76]	; (80052b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 800526c:	42a0      	cmp	r0, r4
 800526e:	d00b      	beq.n	8005288 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005270:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005274:	42a0      	cmp	r0, r4
 8005276:	d007      	beq.n	8005288 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005278:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800527a:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800527c:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005280:	4608      	mov	r0, r1
}
 8005282:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005286:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005288:	69cc      	ldr	r4, [r1, #28]
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005290:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005292:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005296:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800529a:	6a0c      	ldr	r4, [r1, #32]
 800529c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052a0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80052aa:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80052ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052b0:	430b      	orrs	r3, r1
 80052b2:	e7e1      	b.n	8005278 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 80052b4:	2002      	movs	r0, #2
}
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	00000000 	.word	0x00000000

080052c0 <tan>:
 80052c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80052c2:	ec53 2b10 	vmov	r2, r3, d0
 80052c6:	4816      	ldr	r0, [pc, #88]	; (8005320 <tan+0x60>)
 80052c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052cc:	4281      	cmp	r1, r0
 80052ce:	dc07      	bgt.n	80052e0 <tan+0x20>
 80052d0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8005318 <tan+0x58>
 80052d4:	2001      	movs	r0, #1
 80052d6:	b005      	add	sp, #20
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	f000 bd7c 	b.w	8005dd8 <__kernel_tan>
 80052e0:	4810      	ldr	r0, [pc, #64]	; (8005324 <tan+0x64>)
 80052e2:	4281      	cmp	r1, r0
 80052e4:	dd09      	ble.n	80052fa <tan+0x3a>
 80052e6:	ee10 0a10 	vmov	r0, s0
 80052ea:	4619      	mov	r1, r3
 80052ec:	f7fa ff98 	bl	8000220 <__aeabi_dsub>
 80052f0:	ec41 0b10 	vmov	d0, r0, r1
 80052f4:	b005      	add	sp, #20
 80052f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80052fa:	4668      	mov	r0, sp
 80052fc:	f000 f814 	bl	8005328 <__ieee754_rem_pio2>
 8005300:	0040      	lsls	r0, r0, #1
 8005302:	f000 0002 	and.w	r0, r0, #2
 8005306:	ed9d 1b02 	vldr	d1, [sp, #8]
 800530a:	ed9d 0b00 	vldr	d0, [sp]
 800530e:	f1c0 0001 	rsb	r0, r0, #1
 8005312:	f000 fd61 	bl	8005dd8 <__kernel_tan>
 8005316:	e7ed      	b.n	80052f4 <tan+0x34>
	...
 8005320:	3fe921fb 	.word	0x3fe921fb
 8005324:	7fefffff 	.word	0x7fefffff

08005328 <__ieee754_rem_pio2>:
 8005328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800532c:	ed2d 8b02 	vpush	{d8}
 8005330:	ec55 4b10 	vmov	r4, r5, d0
 8005334:	4bca      	ldr	r3, [pc, #808]	; (8005660 <__ieee754_rem_pio2+0x338>)
 8005336:	b08b      	sub	sp, #44	; 0x2c
 8005338:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800533c:	4598      	cmp	r8, r3
 800533e:	4682      	mov	sl, r0
 8005340:	9502      	str	r5, [sp, #8]
 8005342:	dc08      	bgt.n	8005356 <__ieee754_rem_pio2+0x2e>
 8005344:	2200      	movs	r2, #0
 8005346:	2300      	movs	r3, #0
 8005348:	ed80 0b00 	vstr	d0, [r0]
 800534c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005350:	f04f 0b00 	mov.w	fp, #0
 8005354:	e028      	b.n	80053a8 <__ieee754_rem_pio2+0x80>
 8005356:	4bc3      	ldr	r3, [pc, #780]	; (8005664 <__ieee754_rem_pio2+0x33c>)
 8005358:	4598      	cmp	r8, r3
 800535a:	dc78      	bgt.n	800544e <__ieee754_rem_pio2+0x126>
 800535c:	9b02      	ldr	r3, [sp, #8]
 800535e:	4ec2      	ldr	r6, [pc, #776]	; (8005668 <__ieee754_rem_pio2+0x340>)
 8005360:	2b00      	cmp	r3, #0
 8005362:	ee10 0a10 	vmov	r0, s0
 8005366:	a3b0      	add	r3, pc, #704	; (adr r3, 8005628 <__ieee754_rem_pio2+0x300>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	4629      	mov	r1, r5
 800536e:	dd39      	ble.n	80053e4 <__ieee754_rem_pio2+0xbc>
 8005370:	f7fa ff56 	bl	8000220 <__aeabi_dsub>
 8005374:	45b0      	cmp	r8, r6
 8005376:	4604      	mov	r4, r0
 8005378:	460d      	mov	r5, r1
 800537a:	d01b      	beq.n	80053b4 <__ieee754_rem_pio2+0x8c>
 800537c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005630 <__ieee754_rem_pio2+0x308>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fa ff4d 	bl	8000220 <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	e9ca 2300 	strd	r2, r3, [sl]
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fa ff45 	bl	8000220 <__aeabi_dsub>
 8005396:	a3a6      	add	r3, pc, #664	; (adr r3, 8005630 <__ieee754_rem_pio2+0x308>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	f7fa ff40 	bl	8000220 <__aeabi_dsub>
 80053a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053a4:	f04f 0b01 	mov.w	fp, #1
 80053a8:	4658      	mov	r0, fp
 80053aa:	b00b      	add	sp, #44	; 0x2c
 80053ac:	ecbd 8b02 	vpop	{d8}
 80053b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8005638 <__ieee754_rem_pio2+0x310>)
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f7fa ff31 	bl	8000220 <__aeabi_dsub>
 80053be:	a3a0      	add	r3, pc, #640	; (adr r3, 8005640 <__ieee754_rem_pio2+0x318>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	4604      	mov	r4, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	f7fa ff2a 	bl	8000220 <__aeabi_dsub>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	e9ca 2300 	strd	r2, r3, [sl]
 80053d4:	4620      	mov	r0, r4
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7fa ff22 	bl	8000220 <__aeabi_dsub>
 80053dc:	a398      	add	r3, pc, #608	; (adr r3, 8005640 <__ieee754_rem_pio2+0x318>)
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	e7db      	b.n	800539c <__ieee754_rem_pio2+0x74>
 80053e4:	f7fa ff1e 	bl	8000224 <__adddf3>
 80053e8:	45b0      	cmp	r8, r6
 80053ea:	4604      	mov	r4, r0
 80053ec:	460d      	mov	r5, r1
 80053ee:	d016      	beq.n	800541e <__ieee754_rem_pio2+0xf6>
 80053f0:	a38f      	add	r3, pc, #572	; (adr r3, 8005630 <__ieee754_rem_pio2+0x308>)
 80053f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f6:	f7fa ff15 	bl	8000224 <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9ca 2300 	strd	r2, r3, [sl]
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fa ff0b 	bl	8000220 <__aeabi_dsub>
 800540a:	a389      	add	r3, pc, #548	; (adr r3, 8005630 <__ieee754_rem_pio2+0x308>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fa ff08 	bl	8000224 <__adddf3>
 8005414:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005418:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800541c:	e7c4      	b.n	80053a8 <__ieee754_rem_pio2+0x80>
 800541e:	a386      	add	r3, pc, #536	; (adr r3, 8005638 <__ieee754_rem_pio2+0x310>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f7fa fefe 	bl	8000224 <__adddf3>
 8005428:	a385      	add	r3, pc, #532	; (adr r3, 8005640 <__ieee754_rem_pio2+0x318>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	4604      	mov	r4, r0
 8005430:	460d      	mov	r5, r1
 8005432:	f7fa fef7 	bl	8000224 <__adddf3>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9ca 2300 	strd	r2, r3, [sl]
 800543e:	4620      	mov	r0, r4
 8005440:	4629      	mov	r1, r5
 8005442:	f7fa feed 	bl	8000220 <__aeabi_dsub>
 8005446:	a37e      	add	r3, pc, #504	; (adr r3, 8005640 <__ieee754_rem_pio2+0x318>)
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	e7e0      	b.n	8005410 <__ieee754_rem_pio2+0xe8>
 800544e:	4b87      	ldr	r3, [pc, #540]	; (800566c <__ieee754_rem_pio2+0x344>)
 8005450:	4598      	cmp	r8, r3
 8005452:	f300 80d8 	bgt.w	8005606 <__ieee754_rem_pio2+0x2de>
 8005456:	f000 fec9 	bl	80061ec <fabs>
 800545a:	ec55 4b10 	vmov	r4, r5, d0
 800545e:	ee10 0a10 	vmov	r0, s0
 8005462:	a379      	add	r3, pc, #484	; (adr r3, 8005648 <__ieee754_rem_pio2+0x320>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	4629      	mov	r1, r5
 800546a:	f7fb f891 	bl	8000590 <__aeabi_dmul>
 800546e:	4b80      	ldr	r3, [pc, #512]	; (8005670 <__ieee754_rem_pio2+0x348>)
 8005470:	2200      	movs	r2, #0
 8005472:	f7fa fed7 	bl	8000224 <__adddf3>
 8005476:	f7fb fb25 	bl	8000ac4 <__aeabi_d2iz>
 800547a:	4683      	mov	fp, r0
 800547c:	f7fb f81e 	bl	80004bc <__aeabi_i2d>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	ec43 2b18 	vmov	d8, r2, r3
 8005488:	a367      	add	r3, pc, #412	; (adr r3, 8005628 <__ieee754_rem_pio2+0x300>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	f7fb f87f 	bl	8000590 <__aeabi_dmul>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4620      	mov	r0, r4
 8005498:	4629      	mov	r1, r5
 800549a:	f7fa fec1 	bl	8000220 <__aeabi_dsub>
 800549e:	a364      	add	r3, pc, #400	; (adr r3, 8005630 <__ieee754_rem_pio2+0x308>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	ec51 0b18 	vmov	r0, r1, d8
 80054ac:	f7fb f870 	bl	8000590 <__aeabi_dmul>
 80054b0:	f1bb 0f1f 	cmp.w	fp, #31
 80054b4:	4604      	mov	r4, r0
 80054b6:	460d      	mov	r5, r1
 80054b8:	dc0d      	bgt.n	80054d6 <__ieee754_rem_pio2+0x1ae>
 80054ba:	4b6e      	ldr	r3, [pc, #440]	; (8005674 <__ieee754_rem_pio2+0x34c>)
 80054bc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80054c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c4:	4543      	cmp	r3, r8
 80054c6:	d006      	beq.n	80054d6 <__ieee754_rem_pio2+0x1ae>
 80054c8:	4622      	mov	r2, r4
 80054ca:	462b      	mov	r3, r5
 80054cc:	4630      	mov	r0, r6
 80054ce:	4639      	mov	r1, r7
 80054d0:	f7fa fea6 	bl	8000220 <__aeabi_dsub>
 80054d4:	e00e      	b.n	80054f4 <__ieee754_rem_pio2+0x1cc>
 80054d6:	462b      	mov	r3, r5
 80054d8:	4622      	mov	r2, r4
 80054da:	4630      	mov	r0, r6
 80054dc:	4639      	mov	r1, r7
 80054de:	f7fa fe9f 	bl	8000220 <__aeabi_dsub>
 80054e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	dc02      	bgt.n	80054fa <__ieee754_rem_pio2+0x1d2>
 80054f4:	e9ca 0100 	strd	r0, r1, [sl]
 80054f8:	e039      	b.n	800556e <__ieee754_rem_pio2+0x246>
 80054fa:	a34f      	add	r3, pc, #316	; (adr r3, 8005638 <__ieee754_rem_pio2+0x310>)
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	ec51 0b18 	vmov	r0, r1, d8
 8005504:	f7fb f844 	bl	8000590 <__aeabi_dmul>
 8005508:	4604      	mov	r4, r0
 800550a:	460d      	mov	r5, r1
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4630      	mov	r0, r6
 8005512:	4639      	mov	r1, r7
 8005514:	f7fa fe84 	bl	8000220 <__aeabi_dsub>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4680      	mov	r8, r0
 800551e:	4689      	mov	r9, r1
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fa fe7c 	bl	8000220 <__aeabi_dsub>
 8005528:	4622      	mov	r2, r4
 800552a:	462b      	mov	r3, r5
 800552c:	f7fa fe78 	bl	8000220 <__aeabi_dsub>
 8005530:	a343      	add	r3, pc, #268	; (adr r3, 8005640 <__ieee754_rem_pio2+0x318>)
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	4604      	mov	r4, r0
 8005538:	460d      	mov	r5, r1
 800553a:	ec51 0b18 	vmov	r0, r1, d8
 800553e:	f7fb f827 	bl	8000590 <__aeabi_dmul>
 8005542:	4622      	mov	r2, r4
 8005544:	462b      	mov	r3, r5
 8005546:	f7fa fe6b 	bl	8000220 <__aeabi_dsub>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	4604      	mov	r4, r0
 8005550:	460d      	mov	r5, r1
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fa fe63 	bl	8000220 <__aeabi_dsub>
 800555a:	9a03      	ldr	r2, [sp, #12]
 800555c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b31      	cmp	r3, #49	; 0x31
 8005564:	dc24      	bgt.n	80055b0 <__ieee754_rem_pio2+0x288>
 8005566:	e9ca 0100 	strd	r0, r1, [sl]
 800556a:	4646      	mov	r6, r8
 800556c:	464f      	mov	r7, r9
 800556e:	e9da 8900 	ldrd	r8, r9, [sl]
 8005572:	4630      	mov	r0, r6
 8005574:	4642      	mov	r2, r8
 8005576:	464b      	mov	r3, r9
 8005578:	4639      	mov	r1, r7
 800557a:	f7fa fe51 	bl	8000220 <__aeabi_dsub>
 800557e:	462b      	mov	r3, r5
 8005580:	4622      	mov	r2, r4
 8005582:	f7fa fe4d 	bl	8000220 <__aeabi_dsub>
 8005586:	9b02      	ldr	r3, [sp, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800558e:	f6bf af0b 	bge.w	80053a8 <__ieee754_rem_pio2+0x80>
 8005592:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005596:	f8ca 3004 	str.w	r3, [sl, #4]
 800559a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800559e:	f8ca 8000 	str.w	r8, [sl]
 80055a2:	f8ca 0008 	str.w	r0, [sl, #8]
 80055a6:	f8ca 300c 	str.w	r3, [sl, #12]
 80055aa:	f1cb 0b00 	rsb	fp, fp, #0
 80055ae:	e6fb      	b.n	80053a8 <__ieee754_rem_pio2+0x80>
 80055b0:	a327      	add	r3, pc, #156	; (adr r3, 8005650 <__ieee754_rem_pio2+0x328>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	ec51 0b18 	vmov	r0, r1, d8
 80055ba:	f7fa ffe9 	bl	8000590 <__aeabi_dmul>
 80055be:	4604      	mov	r4, r0
 80055c0:	460d      	mov	r5, r1
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fa fe29 	bl	8000220 <__aeabi_dsub>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4606      	mov	r6, r0
 80055d4:	460f      	mov	r7, r1
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	f7fa fe21 	bl	8000220 <__aeabi_dsub>
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	f7fa fe1d 	bl	8000220 <__aeabi_dsub>
 80055e6:	a31c      	add	r3, pc, #112	; (adr r3, 8005658 <__ieee754_rem_pio2+0x330>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	4604      	mov	r4, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	ec51 0b18 	vmov	r0, r1, d8
 80055f4:	f7fa ffcc 	bl	8000590 <__aeabi_dmul>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa fe10 	bl	8000220 <__aeabi_dsub>
 8005600:	4604      	mov	r4, r0
 8005602:	460d      	mov	r5, r1
 8005604:	e760      	b.n	80054c8 <__ieee754_rem_pio2+0x1a0>
 8005606:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <__ieee754_rem_pio2+0x350>)
 8005608:	4598      	cmp	r8, r3
 800560a:	dd37      	ble.n	800567c <__ieee754_rem_pio2+0x354>
 800560c:	ee10 2a10 	vmov	r2, s0
 8005610:	462b      	mov	r3, r5
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fa fe03 	bl	8000220 <__aeabi_dsub>
 800561a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800561e:	e9ca 0100 	strd	r0, r1, [sl]
 8005622:	e695      	b.n	8005350 <__ieee754_rem_pio2+0x28>
 8005624:	f3af 8000 	nop.w
 8005628:	54400000 	.word	0x54400000
 800562c:	3ff921fb 	.word	0x3ff921fb
 8005630:	1a626331 	.word	0x1a626331
 8005634:	3dd0b461 	.word	0x3dd0b461
 8005638:	1a600000 	.word	0x1a600000
 800563c:	3dd0b461 	.word	0x3dd0b461
 8005640:	2e037073 	.word	0x2e037073
 8005644:	3ba3198a 	.word	0x3ba3198a
 8005648:	6dc9c883 	.word	0x6dc9c883
 800564c:	3fe45f30 	.word	0x3fe45f30
 8005650:	2e000000 	.word	0x2e000000
 8005654:	3ba3198a 	.word	0x3ba3198a
 8005658:	252049c1 	.word	0x252049c1
 800565c:	397b839a 	.word	0x397b839a
 8005660:	3fe921fb 	.word	0x3fe921fb
 8005664:	4002d97b 	.word	0x4002d97b
 8005668:	3ff921fb 	.word	0x3ff921fb
 800566c:	413921fb 	.word	0x413921fb
 8005670:	3fe00000 	.word	0x3fe00000
 8005674:	08007d40 	.word	0x08007d40
 8005678:	7fefffff 	.word	0x7fefffff
 800567c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005680:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005684:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005688:	4620      	mov	r0, r4
 800568a:	460d      	mov	r5, r1
 800568c:	f7fb fa1a 	bl	8000ac4 <__aeabi_d2iz>
 8005690:	f7fa ff14 	bl	80004bc <__aeabi_i2d>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a0:	f7fa fdbe 	bl	8000220 <__aeabi_dsub>
 80056a4:	4b21      	ldr	r3, [pc, #132]	; (800572c <__ieee754_rem_pio2+0x404>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	f7fa ff72 	bl	8000590 <__aeabi_dmul>
 80056ac:	460d      	mov	r5, r1
 80056ae:	4604      	mov	r4, r0
 80056b0:	f7fb fa08 	bl	8000ac4 <__aeabi_d2iz>
 80056b4:	f7fa ff02 	bl	80004bc <__aeabi_i2d>
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	4620      	mov	r0, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056c4:	f7fa fdac 	bl	8000220 <__aeabi_dsub>
 80056c8:	4b18      	ldr	r3, [pc, #96]	; (800572c <__ieee754_rem_pio2+0x404>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	f7fa ff60 	bl	8000590 <__aeabi_dmul>
 80056d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80056d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80056d8:	2703      	movs	r7, #3
 80056da:	2400      	movs	r4, #0
 80056dc:	2500      	movs	r5, #0
 80056de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80056e2:	4622      	mov	r2, r4
 80056e4:	462b      	mov	r3, r5
 80056e6:	46b9      	mov	r9, r7
 80056e8:	3f01      	subs	r7, #1
 80056ea:	f7fb f9b9 	bl	8000a60 <__aeabi_dcmpeq>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d1f5      	bne.n	80056de <__ieee754_rem_pio2+0x3b6>
 80056f2:	4b0f      	ldr	r3, [pc, #60]	; (8005730 <__ieee754_rem_pio2+0x408>)
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2302      	movs	r3, #2
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	4632      	mov	r2, r6
 80056fc:	464b      	mov	r3, r9
 80056fe:	4651      	mov	r1, sl
 8005700:	a804      	add	r0, sp, #16
 8005702:	f000 f819 	bl	8005738 <__kernel_rem_pio2>
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	4683      	mov	fp, r0
 800570c:	f6bf ae4c 	bge.w	80053a8 <__ieee754_rem_pio2+0x80>
 8005710:	e9da 2100 	ldrd	r2, r1, [sl]
 8005714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005718:	e9ca 2300 	strd	r2, r3, [sl]
 800571c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005720:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005724:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005728:	e73f      	b.n	80055aa <__ieee754_rem_pio2+0x282>
 800572a:	bf00      	nop
 800572c:	41700000 	.word	0x41700000
 8005730:	08007dc0 	.word	0x08007dc0
 8005734:	00000000 	.word	0x00000000

08005738 <__kernel_rem_pio2>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	ed2d 8b02 	vpush	{d8}
 8005740:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005744:	f112 0f14 	cmn.w	r2, #20
 8005748:	9306      	str	r3, [sp, #24]
 800574a:	9104      	str	r1, [sp, #16]
 800574c:	4bc2      	ldr	r3, [pc, #776]	; (8005a58 <__kernel_rem_pio2+0x320>)
 800574e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005750:	9009      	str	r0, [sp, #36]	; 0x24
 8005752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	9b06      	ldr	r3, [sp, #24]
 800575a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800575e:	bfa8      	it	ge
 8005760:	1ed4      	subge	r4, r2, #3
 8005762:	9305      	str	r3, [sp, #20]
 8005764:	bfb2      	itee	lt
 8005766:	2400      	movlt	r4, #0
 8005768:	2318      	movge	r3, #24
 800576a:	fb94 f4f3 	sdivge	r4, r4, r3
 800576e:	f06f 0317 	mvn.w	r3, #23
 8005772:	fb04 3303 	mla	r3, r4, r3, r3
 8005776:	eb03 0a02 	add.w	sl, r3, r2
 800577a:	9b00      	ldr	r3, [sp, #0]
 800577c:	9a05      	ldr	r2, [sp, #20]
 800577e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005a48 <__kernel_rem_pio2+0x310>
 8005782:	eb03 0802 	add.w	r8, r3, r2
 8005786:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005788:	1aa7      	subs	r7, r4, r2
 800578a:	ae20      	add	r6, sp, #128	; 0x80
 800578c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005790:	2500      	movs	r5, #0
 8005792:	4545      	cmp	r5, r8
 8005794:	dd13      	ble.n	80057be <__kernel_rem_pio2+0x86>
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	aa20      	add	r2, sp, #128	; 0x80
 800579a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800579e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80057a2:	f04f 0800 	mov.w	r8, #0
 80057a6:	9b00      	ldr	r3, [sp, #0]
 80057a8:	4598      	cmp	r8, r3
 80057aa:	dc31      	bgt.n	8005810 <__kernel_rem_pio2+0xd8>
 80057ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005a48 <__kernel_rem_pio2+0x310>
 80057b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80057b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057b8:	462f      	mov	r7, r5
 80057ba:	2600      	movs	r6, #0
 80057bc:	e01b      	b.n	80057f6 <__kernel_rem_pio2+0xbe>
 80057be:	42ef      	cmn	r7, r5
 80057c0:	d407      	bmi.n	80057d2 <__kernel_rem_pio2+0x9a>
 80057c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057c6:	f7fa fe79 	bl	80004bc <__aeabi_i2d>
 80057ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80057ce:	3501      	adds	r5, #1
 80057d0:	e7df      	b.n	8005792 <__kernel_rem_pio2+0x5a>
 80057d2:	ec51 0b18 	vmov	r0, r1, d8
 80057d6:	e7f8      	b.n	80057ca <__kernel_rem_pio2+0x92>
 80057d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80057e0:	f7fa fed6 	bl	8000590 <__aeabi_dmul>
 80057e4:	4602      	mov	r2, r0
 80057e6:	460b      	mov	r3, r1
 80057e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ec:	f7fa fd1a 	bl	8000224 <__adddf3>
 80057f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f4:	3601      	adds	r6, #1
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	429e      	cmp	r6, r3
 80057fa:	f1a7 0708 	sub.w	r7, r7, #8
 80057fe:	ddeb      	ble.n	80057d8 <__kernel_rem_pio2+0xa0>
 8005800:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005804:	f108 0801 	add.w	r8, r8, #1
 8005808:	ecab 7b02 	vstmia	fp!, {d7}
 800580c:	3508      	adds	r5, #8
 800580e:	e7ca      	b.n	80057a6 <__kernel_rem_pio2+0x6e>
 8005810:	9b00      	ldr	r3, [sp, #0]
 8005812:	aa0c      	add	r2, sp, #48	; 0x30
 8005814:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005818:	930b      	str	r3, [sp, #44]	; 0x2c
 800581a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800581c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005820:	9c00      	ldr	r4, [sp, #0]
 8005822:	930a      	str	r3, [sp, #40]	; 0x28
 8005824:	00e3      	lsls	r3, r4, #3
 8005826:	9308      	str	r3, [sp, #32]
 8005828:	ab98      	add	r3, sp, #608	; 0x260
 800582a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800582e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005832:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005836:	ab70      	add	r3, sp, #448	; 0x1c0
 8005838:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800583c:	46c3      	mov	fp, r8
 800583e:	46a1      	mov	r9, r4
 8005840:	f1b9 0f00 	cmp.w	r9, #0
 8005844:	f1a5 0508 	sub.w	r5, r5, #8
 8005848:	dc77      	bgt.n	800593a <__kernel_rem_pio2+0x202>
 800584a:	ec47 6b10 	vmov	d0, r6, r7
 800584e:	4650      	mov	r0, sl
 8005850:	f000 fcd6 	bl	8006200 <scalbn>
 8005854:	ec57 6b10 	vmov	r6, r7, d0
 8005858:	2200      	movs	r2, #0
 800585a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800585e:	ee10 0a10 	vmov	r0, s0
 8005862:	4639      	mov	r1, r7
 8005864:	f7fa fe94 	bl	8000590 <__aeabi_dmul>
 8005868:	ec41 0b10 	vmov	d0, r0, r1
 800586c:	f000 fd48 	bl	8006300 <floor>
 8005870:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <__kernel_rem_pio2+0x324>)
 8005872:	ec51 0b10 	vmov	r0, r1, d0
 8005876:	2200      	movs	r2, #0
 8005878:	f7fa fe8a 	bl	8000590 <__aeabi_dmul>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4630      	mov	r0, r6
 8005882:	4639      	mov	r1, r7
 8005884:	f7fa fccc 	bl	8000220 <__aeabi_dsub>
 8005888:	460f      	mov	r7, r1
 800588a:	4606      	mov	r6, r0
 800588c:	f7fb f91a 	bl	8000ac4 <__aeabi_d2iz>
 8005890:	9002      	str	r0, [sp, #8]
 8005892:	f7fa fe13 	bl	80004bc <__aeabi_i2d>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4630      	mov	r0, r6
 800589c:	4639      	mov	r1, r7
 800589e:	f7fa fcbf 	bl	8000220 <__aeabi_dsub>
 80058a2:	f1ba 0f00 	cmp.w	sl, #0
 80058a6:	4606      	mov	r6, r0
 80058a8:	460f      	mov	r7, r1
 80058aa:	dd6d      	ble.n	8005988 <__kernel_rem_pio2+0x250>
 80058ac:	1e61      	subs	r1, r4, #1
 80058ae:	ab0c      	add	r3, sp, #48	; 0x30
 80058b0:	9d02      	ldr	r5, [sp, #8]
 80058b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058b6:	f1ca 0018 	rsb	r0, sl, #24
 80058ba:	fa43 f200 	asr.w	r2, r3, r0
 80058be:	4415      	add	r5, r2
 80058c0:	4082      	lsls	r2, r0
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	aa0c      	add	r2, sp, #48	; 0x30
 80058c6:	9502      	str	r5, [sp, #8]
 80058c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80058cc:	f1ca 0217 	rsb	r2, sl, #23
 80058d0:	fa43 fb02 	asr.w	fp, r3, r2
 80058d4:	f1bb 0f00 	cmp.w	fp, #0
 80058d8:	dd65      	ble.n	80059a6 <__kernel_rem_pio2+0x26e>
 80058da:	9b02      	ldr	r3, [sp, #8]
 80058dc:	2200      	movs	r2, #0
 80058de:	3301      	adds	r3, #1
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	4615      	mov	r5, r2
 80058e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80058e8:	4294      	cmp	r4, r2
 80058ea:	f300 809f 	bgt.w	8005a2c <__kernel_rem_pio2+0x2f4>
 80058ee:	f1ba 0f00 	cmp.w	sl, #0
 80058f2:	dd07      	ble.n	8005904 <__kernel_rem_pio2+0x1cc>
 80058f4:	f1ba 0f01 	cmp.w	sl, #1
 80058f8:	f000 80c1 	beq.w	8005a7e <__kernel_rem_pio2+0x346>
 80058fc:	f1ba 0f02 	cmp.w	sl, #2
 8005900:	f000 80c7 	beq.w	8005a92 <__kernel_rem_pio2+0x35a>
 8005904:	f1bb 0f02 	cmp.w	fp, #2
 8005908:	d14d      	bne.n	80059a6 <__kernel_rem_pio2+0x26e>
 800590a:	4632      	mov	r2, r6
 800590c:	463b      	mov	r3, r7
 800590e:	4954      	ldr	r1, [pc, #336]	; (8005a60 <__kernel_rem_pio2+0x328>)
 8005910:	2000      	movs	r0, #0
 8005912:	f7fa fc85 	bl	8000220 <__aeabi_dsub>
 8005916:	4606      	mov	r6, r0
 8005918:	460f      	mov	r7, r1
 800591a:	2d00      	cmp	r5, #0
 800591c:	d043      	beq.n	80059a6 <__kernel_rem_pio2+0x26e>
 800591e:	4650      	mov	r0, sl
 8005920:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005a50 <__kernel_rem_pio2+0x318>
 8005924:	f000 fc6c 	bl	8006200 <scalbn>
 8005928:	4630      	mov	r0, r6
 800592a:	4639      	mov	r1, r7
 800592c:	ec53 2b10 	vmov	r2, r3, d0
 8005930:	f7fa fc76 	bl	8000220 <__aeabi_dsub>
 8005934:	4606      	mov	r6, r0
 8005936:	460f      	mov	r7, r1
 8005938:	e035      	b.n	80059a6 <__kernel_rem_pio2+0x26e>
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <__kernel_rem_pio2+0x32c>)
 800593c:	2200      	movs	r2, #0
 800593e:	4630      	mov	r0, r6
 8005940:	4639      	mov	r1, r7
 8005942:	f7fa fe25 	bl	8000590 <__aeabi_dmul>
 8005946:	f7fb f8bd 	bl	8000ac4 <__aeabi_d2iz>
 800594a:	f7fa fdb7 	bl	80004bc <__aeabi_i2d>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	ec43 2b18 	vmov	d8, r2, r3
 8005956:	4b44      	ldr	r3, [pc, #272]	; (8005a68 <__kernel_rem_pio2+0x330>)
 8005958:	2200      	movs	r2, #0
 800595a:	f7fa fe19 	bl	8000590 <__aeabi_dmul>
 800595e:	4602      	mov	r2, r0
 8005960:	460b      	mov	r3, r1
 8005962:	4630      	mov	r0, r6
 8005964:	4639      	mov	r1, r7
 8005966:	f7fa fc5b 	bl	8000220 <__aeabi_dsub>
 800596a:	f7fb f8ab 	bl	8000ac4 <__aeabi_d2iz>
 800596e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005972:	f84b 0b04 	str.w	r0, [fp], #4
 8005976:	ec51 0b18 	vmov	r0, r1, d8
 800597a:	f7fa fc53 	bl	8000224 <__adddf3>
 800597e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005982:	4606      	mov	r6, r0
 8005984:	460f      	mov	r7, r1
 8005986:	e75b      	b.n	8005840 <__kernel_rem_pio2+0x108>
 8005988:	d106      	bne.n	8005998 <__kernel_rem_pio2+0x260>
 800598a:	1e63      	subs	r3, r4, #1
 800598c:	aa0c      	add	r2, sp, #48	; 0x30
 800598e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005992:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8005996:	e79d      	b.n	80058d4 <__kernel_rem_pio2+0x19c>
 8005998:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <__kernel_rem_pio2+0x334>)
 800599a:	2200      	movs	r2, #0
 800599c:	f7fb f87e 	bl	8000a9c <__aeabi_dcmpge>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d140      	bne.n	8005a26 <__kernel_rem_pio2+0x2ee>
 80059a4:	4683      	mov	fp, r0
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	4639      	mov	r1, r7
 80059ae:	f7fb f857 	bl	8000a60 <__aeabi_dcmpeq>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f000 80c1 	beq.w	8005b3a <__kernel_rem_pio2+0x402>
 80059b8:	1e65      	subs	r5, r4, #1
 80059ba:	462b      	mov	r3, r5
 80059bc:	2200      	movs	r2, #0
 80059be:	9900      	ldr	r1, [sp, #0]
 80059c0:	428b      	cmp	r3, r1
 80059c2:	da6d      	bge.n	8005aa0 <__kernel_rem_pio2+0x368>
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	f000 808a 	beq.w	8005ade <__kernel_rem_pio2+0x3a6>
 80059ca:	ab0c      	add	r3, sp, #48	; 0x30
 80059cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80059d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80ae 	beq.w	8005b36 <__kernel_rem_pio2+0x3fe>
 80059da:	4650      	mov	r0, sl
 80059dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005a50 <__kernel_rem_pio2+0x318>
 80059e0:	f000 fc0e 	bl	8006200 <scalbn>
 80059e4:	1c6b      	adds	r3, r5, #1
 80059e6:	00da      	lsls	r2, r3, #3
 80059e8:	9205      	str	r2, [sp, #20]
 80059ea:	ec57 6b10 	vmov	r6, r7, d0
 80059ee:	aa70      	add	r2, sp, #448	; 0x1c0
 80059f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005a64 <__kernel_rem_pio2+0x32c>
 80059f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80059f8:	462c      	mov	r4, r5
 80059fa:	f04f 0800 	mov.w	r8, #0
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	f280 80d4 	bge.w	8005bac <__kernel_rem_pio2+0x474>
 8005a04:	462c      	mov	r4, r5
 8005a06:	2c00      	cmp	r4, #0
 8005a08:	f2c0 8102 	blt.w	8005c10 <__kernel_rem_pio2+0x4d8>
 8005a0c:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <__kernel_rem_pio2+0x338>)
 8005a0e:	461e      	mov	r6, r3
 8005a10:	ab70      	add	r3, sp, #448	; 0x1c0
 8005a12:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005a16:	1b2b      	subs	r3, r5, r4
 8005a18:	f04f 0900 	mov.w	r9, #0
 8005a1c:	f04f 0a00 	mov.w	sl, #0
 8005a20:	2700      	movs	r7, #0
 8005a22:	9306      	str	r3, [sp, #24]
 8005a24:	e0e6      	b.n	8005bf4 <__kernel_rem_pio2+0x4bc>
 8005a26:	f04f 0b02 	mov.w	fp, #2
 8005a2a:	e756      	b.n	80058da <__kernel_rem_pio2+0x1a2>
 8005a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a30:	bb05      	cbnz	r5, 8005a74 <__kernel_rem_pio2+0x33c>
 8005a32:	b123      	cbz	r3, 8005a3e <__kernel_rem_pio2+0x306>
 8005a34:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005a38:	f8c8 3000 	str.w	r3, [r8]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	3201      	adds	r2, #1
 8005a40:	f108 0804 	add.w	r8, r8, #4
 8005a44:	461d      	mov	r5, r3
 8005a46:	e74f      	b.n	80058e8 <__kernel_rem_pio2+0x1b0>
	...
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	08007f08 	.word	0x08007f08
 8005a5c:	40200000 	.word	0x40200000
 8005a60:	3ff00000 	.word	0x3ff00000
 8005a64:	3e700000 	.word	0x3e700000
 8005a68:	41700000 	.word	0x41700000
 8005a6c:	3fe00000 	.word	0x3fe00000
 8005a70:	08007ec8 	.word	0x08007ec8
 8005a74:	1acb      	subs	r3, r1, r3
 8005a76:	f8c8 3000 	str.w	r3, [r8]
 8005a7a:	462b      	mov	r3, r5
 8005a7c:	e7df      	b.n	8005a3e <__kernel_rem_pio2+0x306>
 8005a7e:	1e62      	subs	r2, r4, #1
 8005a80:	ab0c      	add	r3, sp, #48	; 0x30
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a8a:	a90c      	add	r1, sp, #48	; 0x30
 8005a8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a90:	e738      	b.n	8005904 <__kernel_rem_pio2+0x1cc>
 8005a92:	1e62      	subs	r2, r4, #1
 8005a94:	ab0c      	add	r3, sp, #48	; 0x30
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a9e:	e7f4      	b.n	8005a8a <__kernel_rem_pio2+0x352>
 8005aa0:	a90c      	add	r1, sp, #48	; 0x30
 8005aa2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	e788      	b.n	80059be <__kernel_rem_pio2+0x286>
 8005aac:	3301      	adds	r3, #1
 8005aae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ab2:	2900      	cmp	r1, #0
 8005ab4:	d0fa      	beq.n	8005aac <__kernel_rem_pio2+0x374>
 8005ab6:	9a08      	ldr	r2, [sp, #32]
 8005ab8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005abc:	446a      	add	r2, sp
 8005abe:	3a98      	subs	r2, #152	; 0x98
 8005ac0:	9208      	str	r2, [sp, #32]
 8005ac2:	9a06      	ldr	r2, [sp, #24]
 8005ac4:	a920      	add	r1, sp, #128	; 0x80
 8005ac6:	18a2      	adds	r2, r4, r2
 8005ac8:	18e3      	adds	r3, r4, r3
 8005aca:	f104 0801 	add.w	r8, r4, #1
 8005ace:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	9b02      	ldr	r3, [sp, #8]
 8005ad6:	4543      	cmp	r3, r8
 8005ad8:	da04      	bge.n	8005ae4 <__kernel_rem_pio2+0x3ac>
 8005ada:	461c      	mov	r4, r3
 8005adc:	e6a2      	b.n	8005824 <__kernel_rem_pio2+0xec>
 8005ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e7e4      	b.n	8005aae <__kernel_rem_pio2+0x376>
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005aea:	f7fa fce7 	bl	80004bc <__aeabi_i2d>
 8005aee:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af4:	46ab      	mov	fp, r5
 8005af6:	461c      	mov	r4, r3
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	2600      	movs	r6, #0
 8005afe:	2700      	movs	r7, #0
 8005b00:	9b05      	ldr	r3, [sp, #20]
 8005b02:	4599      	cmp	r9, r3
 8005b04:	dd06      	ble.n	8005b14 <__kernel_rem_pio2+0x3dc>
 8005b06:	9b08      	ldr	r3, [sp, #32]
 8005b08:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005b0c:	f108 0801 	add.w	r8, r8, #1
 8005b10:	9308      	str	r3, [sp, #32]
 8005b12:	e7df      	b.n	8005ad4 <__kernel_rem_pio2+0x39c>
 8005b14:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005b18:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005b1c:	f7fa fd38 	bl	8000590 <__aeabi_dmul>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4630      	mov	r0, r6
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa fb7c 	bl	8000224 <__adddf3>
 8005b2c:	f109 0901 	add.w	r9, r9, #1
 8005b30:	4606      	mov	r6, r0
 8005b32:	460f      	mov	r7, r1
 8005b34:	e7e4      	b.n	8005b00 <__kernel_rem_pio2+0x3c8>
 8005b36:	3d01      	subs	r5, #1
 8005b38:	e747      	b.n	80059ca <__kernel_rem_pio2+0x292>
 8005b3a:	ec47 6b10 	vmov	d0, r6, r7
 8005b3e:	f1ca 0000 	rsb	r0, sl, #0
 8005b42:	f000 fb5d 	bl	8006200 <scalbn>
 8005b46:	ec57 6b10 	vmov	r6, r7, d0
 8005b4a:	4ba0      	ldr	r3, [pc, #640]	; (8005dcc <__kernel_rem_pio2+0x694>)
 8005b4c:	ee10 0a10 	vmov	r0, s0
 8005b50:	2200      	movs	r2, #0
 8005b52:	4639      	mov	r1, r7
 8005b54:	f7fa ffa2 	bl	8000a9c <__aeabi_dcmpge>
 8005b58:	b1f8      	cbz	r0, 8005b9a <__kernel_rem_pio2+0x462>
 8005b5a:	4b9d      	ldr	r3, [pc, #628]	; (8005dd0 <__kernel_rem_pio2+0x698>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fd15 	bl	8000590 <__aeabi_dmul>
 8005b66:	f7fa ffad 	bl	8000ac4 <__aeabi_d2iz>
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	f7fa fca6 	bl	80004bc <__aeabi_i2d>
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <__kernel_rem_pio2+0x694>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	f7fa fd0c 	bl	8000590 <__aeabi_dmul>
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f7fa fb4e 	bl	8000220 <__aeabi_dsub>
 8005b84:	f7fa ff9e 	bl	8000ac4 <__aeabi_d2iz>
 8005b88:	1c65      	adds	r5, r4, #1
 8005b8a:	ab0c      	add	r3, sp, #48	; 0x30
 8005b8c:	f10a 0a18 	add.w	sl, sl, #24
 8005b90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b94:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005b98:	e71f      	b.n	80059da <__kernel_rem_pio2+0x2a2>
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	4639      	mov	r1, r7
 8005b9e:	f7fa ff91 	bl	8000ac4 <__aeabi_d2iz>
 8005ba2:	ab0c      	add	r3, sp, #48	; 0x30
 8005ba4:	4625      	mov	r5, r4
 8005ba6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005baa:	e716      	b.n	80059da <__kernel_rem_pio2+0x2a2>
 8005bac:	ab0c      	add	r3, sp, #48	; 0x30
 8005bae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005bb2:	f7fa fc83 	bl	80004bc <__aeabi_i2d>
 8005bb6:	4632      	mov	r2, r6
 8005bb8:	463b      	mov	r3, r7
 8005bba:	f7fa fce9 	bl	8000590 <__aeabi_dmul>
 8005bbe:	4642      	mov	r2, r8
 8005bc0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	4630      	mov	r0, r6
 8005bc8:	4639      	mov	r1, r7
 8005bca:	f7fa fce1 	bl	8000590 <__aeabi_dmul>
 8005bce:	3c01      	subs	r4, #1
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	460f      	mov	r7, r1
 8005bd4:	e713      	b.n	80059fe <__kernel_rem_pio2+0x2c6>
 8005bd6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005bda:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8005bde:	f7fa fcd7 	bl	8000590 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4648      	mov	r0, r9
 8005be8:	4651      	mov	r1, sl
 8005bea:	f7fa fb1b 	bl	8000224 <__adddf3>
 8005bee:	3701      	adds	r7, #1
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	468a      	mov	sl, r1
 8005bf4:	9b00      	ldr	r3, [sp, #0]
 8005bf6:	429f      	cmp	r7, r3
 8005bf8:	dc02      	bgt.n	8005c00 <__kernel_rem_pio2+0x4c8>
 8005bfa:	9b06      	ldr	r3, [sp, #24]
 8005bfc:	429f      	cmp	r7, r3
 8005bfe:	ddea      	ble.n	8005bd6 <__kernel_rem_pio2+0x49e>
 8005c00:	9a06      	ldr	r2, [sp, #24]
 8005c02:	ab48      	add	r3, sp, #288	; 0x120
 8005c04:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005c08:	e9c6 9a00 	strd	r9, sl, [r6]
 8005c0c:	3c01      	subs	r4, #1
 8005c0e:	e6fa      	b.n	8005a06 <__kernel_rem_pio2+0x2ce>
 8005c10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	dc0b      	bgt.n	8005c2e <__kernel_rem_pio2+0x4f6>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	dc39      	bgt.n	8005c8e <__kernel_rem_pio2+0x556>
 8005c1a:	d05d      	beq.n	8005cd8 <__kernel_rem_pio2+0x5a0>
 8005c1c:	9b02      	ldr	r3, [sp, #8]
 8005c1e:	f003 0007 	and.w	r0, r3, #7
 8005c22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005c26:	ecbd 8b02 	vpop	{d8}
 8005c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d1f3      	bne.n	8005c1c <__kernel_rem_pio2+0x4e4>
 8005c34:	9b05      	ldr	r3, [sp, #20]
 8005c36:	9500      	str	r5, [sp, #0]
 8005c38:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8005c3c:	eb0d 0403 	add.w	r4, sp, r3
 8005c40:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005c44:	46a2      	mov	sl, r4
 8005c46:	9b00      	ldr	r3, [sp, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f1aa 0a08 	sub.w	sl, sl, #8
 8005c4e:	dc69      	bgt.n	8005d24 <__kernel_rem_pio2+0x5ec>
 8005c50:	46aa      	mov	sl, r5
 8005c52:	f1ba 0f01 	cmp.w	sl, #1
 8005c56:	f1a4 0408 	sub.w	r4, r4, #8
 8005c5a:	f300 8083 	bgt.w	8005d64 <__kernel_rem_pio2+0x62c>
 8005c5e:	9c05      	ldr	r4, [sp, #20]
 8005c60:	ab48      	add	r3, sp, #288	; 0x120
 8005c62:	441c      	add	r4, r3
 8005c64:	2000      	movs	r0, #0
 8005c66:	2100      	movs	r1, #0
 8005c68:	2d01      	cmp	r5, #1
 8005c6a:	f300 809a 	bgt.w	8005da2 <__kernel_rem_pio2+0x66a>
 8005c6e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005c72:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005c76:	f1bb 0f00 	cmp.w	fp, #0
 8005c7a:	f040 8098 	bne.w	8005dae <__kernel_rem_pio2+0x676>
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	e9c3 7800 	strd	r7, r8, [r3]
 8005c84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c8c:	e7c6      	b.n	8005c1c <__kernel_rem_pio2+0x4e4>
 8005c8e:	9e05      	ldr	r6, [sp, #20]
 8005c90:	ab48      	add	r3, sp, #288	; 0x120
 8005c92:	441e      	add	r6, r3
 8005c94:	462c      	mov	r4, r5
 8005c96:	2000      	movs	r0, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	da33      	bge.n	8005d06 <__kernel_rem_pio2+0x5ce>
 8005c9e:	f1bb 0f00 	cmp.w	fp, #0
 8005ca2:	d036      	beq.n	8005d12 <__kernel_rem_pio2+0x5da>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005caa:	9c04      	ldr	r4, [sp, #16]
 8005cac:	e9c4 2300 	strd	r2, r3, [r4]
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005cb8:	f7fa fab2 	bl	8000220 <__aeabi_dsub>
 8005cbc:	ae4a      	add	r6, sp, #296	; 0x128
 8005cbe:	2401      	movs	r4, #1
 8005cc0:	42a5      	cmp	r5, r4
 8005cc2:	da29      	bge.n	8005d18 <__kernel_rem_pio2+0x5e0>
 8005cc4:	f1bb 0f00 	cmp.w	fp, #0
 8005cc8:	d002      	beq.n	8005cd0 <__kernel_rem_pio2+0x598>
 8005cca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cce:	4619      	mov	r1, r3
 8005cd0:	9b04      	ldr	r3, [sp, #16]
 8005cd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cd6:	e7a1      	b.n	8005c1c <__kernel_rem_pio2+0x4e4>
 8005cd8:	9c05      	ldr	r4, [sp, #20]
 8005cda:	ab48      	add	r3, sp, #288	; 0x120
 8005cdc:	441c      	add	r4, r3
 8005cde:	2000      	movs	r0, #0
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	da09      	bge.n	8005cfa <__kernel_rem_pio2+0x5c2>
 8005ce6:	f1bb 0f00 	cmp.w	fp, #0
 8005cea:	d002      	beq.n	8005cf2 <__kernel_rem_pio2+0x5ba>
 8005cec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	9b04      	ldr	r3, [sp, #16]
 8005cf4:	e9c3 0100 	strd	r0, r1, [r3]
 8005cf8:	e790      	b.n	8005c1c <__kernel_rem_pio2+0x4e4>
 8005cfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cfe:	f7fa fa91 	bl	8000224 <__adddf3>
 8005d02:	3d01      	subs	r5, #1
 8005d04:	e7ed      	b.n	8005ce2 <__kernel_rem_pio2+0x5aa>
 8005d06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005d0a:	f7fa fa8b 	bl	8000224 <__adddf3>
 8005d0e:	3c01      	subs	r4, #1
 8005d10:	e7c3      	b.n	8005c9a <__kernel_rem_pio2+0x562>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	e7c8      	b.n	8005caa <__kernel_rem_pio2+0x572>
 8005d18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005d1c:	f7fa fa82 	bl	8000224 <__adddf3>
 8005d20:	3401      	adds	r4, #1
 8005d22:	e7cd      	b.n	8005cc0 <__kernel_rem_pio2+0x588>
 8005d24:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005d2c:	9b00      	ldr	r3, [sp, #0]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	4632      	mov	r2, r6
 8005d34:	463b      	mov	r3, r7
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fa73 	bl	8000224 <__adddf3>
 8005d3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4640      	mov	r0, r8
 8005d48:	4649      	mov	r1, r9
 8005d4a:	f7fa fa69 	bl	8000220 <__aeabi_dsub>
 8005d4e:	4632      	mov	r2, r6
 8005d50:	463b      	mov	r3, r7
 8005d52:	f7fa fa67 	bl	8000224 <__adddf3>
 8005d56:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005d5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d5e:	ed8a 7b00 	vstr	d7, [sl]
 8005d62:	e770      	b.n	8005c46 <__kernel_rem_pio2+0x50e>
 8005d64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005d68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4632      	mov	r2, r6
 8005d70:	463b      	mov	r3, r7
 8005d72:	4649      	mov	r1, r9
 8005d74:	f7fa fa56 	bl	8000224 <__adddf3>
 8005d78:	e9cd 0100 	strd	r0, r1, [sp]
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4640      	mov	r0, r8
 8005d82:	4649      	mov	r1, r9
 8005d84:	f7fa fa4c 	bl	8000220 <__aeabi_dsub>
 8005d88:	4632      	mov	r2, r6
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	f7fa fa4a 	bl	8000224 <__adddf3>
 8005d90:	ed9d 7b00 	vldr	d7, [sp]
 8005d94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d98:	ed84 7b00 	vstr	d7, [r4]
 8005d9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005da0:	e757      	b.n	8005c52 <__kernel_rem_pio2+0x51a>
 8005da2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005da6:	f7fa fa3d 	bl	8000224 <__adddf3>
 8005daa:	3d01      	subs	r5, #1
 8005dac:	e75c      	b.n	8005c68 <__kernel_rem_pio2+0x530>
 8005dae:	9b04      	ldr	r3, [sp, #16]
 8005db0:	9a04      	ldr	r2, [sp, #16]
 8005db2:	601f      	str	r7, [r3, #0]
 8005db4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005db8:	605c      	str	r4, [r3, #4]
 8005dba:	609d      	str	r5, [r3, #8]
 8005dbc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005dc0:	60d3      	str	r3, [r2, #12]
 8005dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dc6:	6110      	str	r0, [r2, #16]
 8005dc8:	6153      	str	r3, [r2, #20]
 8005dca:	e727      	b.n	8005c1c <__kernel_rem_pio2+0x4e4>
 8005dcc:	41700000 	.word	0x41700000
 8005dd0:	3e700000 	.word	0x3e700000
 8005dd4:	00000000 	.word	0x00000000

08005dd8 <__kernel_tan>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	ed2d 8b06 	vpush	{d8-d10}
 8005de0:	ec5b ab10 	vmov	sl, fp, d0
 8005de4:	4be0      	ldr	r3, [pc, #896]	; (8006168 <__kernel_tan+0x390>)
 8005de6:	b083      	sub	sp, #12
 8005de8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8005dec:	429f      	cmp	r7, r3
 8005dee:	ec59 8b11 	vmov	r8, r9, d1
 8005df2:	4606      	mov	r6, r0
 8005df4:	f8cd b000 	str.w	fp, [sp]
 8005df8:	dc61      	bgt.n	8005ebe <__kernel_tan+0xe6>
 8005dfa:	ee10 0a10 	vmov	r0, s0
 8005dfe:	4659      	mov	r1, fp
 8005e00:	f7fa fe60 	bl	8000ac4 <__aeabi_d2iz>
 8005e04:	4605      	mov	r5, r0
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f040 8083 	bne.w	8005f12 <__kernel_tan+0x13a>
 8005e0c:	1c73      	adds	r3, r6, #1
 8005e0e:	4652      	mov	r2, sl
 8005e10:	4313      	orrs	r3, r2
 8005e12:	433b      	orrs	r3, r7
 8005e14:	d112      	bne.n	8005e3c <__kernel_tan+0x64>
 8005e16:	ec4b ab10 	vmov	d0, sl, fp
 8005e1a:	f000 f9e7 	bl	80061ec <fabs>
 8005e1e:	49d3      	ldr	r1, [pc, #844]	; (800616c <__kernel_tan+0x394>)
 8005e20:	ec53 2b10 	vmov	r2, r3, d0
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fa fcdd 	bl	80007e4 <__aeabi_ddiv>
 8005e2a:	4682      	mov	sl, r0
 8005e2c:	468b      	mov	fp, r1
 8005e2e:	ec4b ab10 	vmov	d0, sl, fp
 8005e32:	b003      	add	sp, #12
 8005e34:	ecbd 8b06 	vpop	{d8-d10}
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	2e01      	cmp	r6, #1
 8005e3e:	d0f6      	beq.n	8005e2e <__kernel_tan+0x56>
 8005e40:	4642      	mov	r2, r8
 8005e42:	464b      	mov	r3, r9
 8005e44:	4650      	mov	r0, sl
 8005e46:	4659      	mov	r1, fp
 8005e48:	f7fa f9ec 	bl	8000224 <__adddf3>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	460f      	mov	r7, r1
 8005e52:	2000      	movs	r0, #0
 8005e54:	49c6      	ldr	r1, [pc, #792]	; (8006170 <__kernel_tan+0x398>)
 8005e56:	f7fa fcc5 	bl	80007e4 <__aeabi_ddiv>
 8005e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8005e5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e62:	462e      	mov	r6, r5
 8005e64:	4652      	mov	r2, sl
 8005e66:	462c      	mov	r4, r5
 8005e68:	4630      	mov	r0, r6
 8005e6a:	461d      	mov	r5, r3
 8005e6c:	4639      	mov	r1, r7
 8005e6e:	465b      	mov	r3, fp
 8005e70:	f7fa f9d6 	bl	8000220 <__aeabi_dsub>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	f7fa f9d0 	bl	8000220 <__aeabi_dsub>
 8005e80:	4632      	mov	r2, r6
 8005e82:	462b      	mov	r3, r5
 8005e84:	f7fa fb84 	bl	8000590 <__aeabi_dmul>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	4689      	mov	r9, r1
 8005e8e:	462b      	mov	r3, r5
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa fb7c 	bl	8000590 <__aeabi_dmul>
 8005e98:	4bb4      	ldr	r3, [pc, #720]	; (800616c <__kernel_tan+0x394>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f7fa f9c2 	bl	8000224 <__adddf3>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4640      	mov	r0, r8
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	f7fa f9bc 	bl	8000224 <__adddf3>
 8005eac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eb0:	f7fa fb6e 	bl	8000590 <__aeabi_dmul>
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	462b      	mov	r3, r5
 8005eb8:	f7fa f9b4 	bl	8000224 <__adddf3>
 8005ebc:	e7b5      	b.n	8005e2a <__kernel_tan+0x52>
 8005ebe:	4bad      	ldr	r3, [pc, #692]	; (8006174 <__kernel_tan+0x39c>)
 8005ec0:	429f      	cmp	r7, r3
 8005ec2:	dd26      	ble.n	8005f12 <__kernel_tan+0x13a>
 8005ec4:	9b00      	ldr	r3, [sp, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da09      	bge.n	8005ede <__kernel_tan+0x106>
 8005eca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ece:	469b      	mov	fp, r3
 8005ed0:	ee10 aa10 	vmov	sl, s0
 8005ed4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ed8:	ee11 8a10 	vmov	r8, s2
 8005edc:	4699      	mov	r9, r3
 8005ede:	4652      	mov	r2, sl
 8005ee0:	465b      	mov	r3, fp
 8005ee2:	a183      	add	r1, pc, #524	; (adr r1, 80060f0 <__kernel_tan+0x318>)
 8005ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ee8:	f7fa f99a 	bl	8000220 <__aeabi_dsub>
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	460d      	mov	r5, r1
 8005ef4:	a180      	add	r1, pc, #512	; (adr r1, 80060f8 <__kernel_tan+0x320>)
 8005ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005efa:	f7fa f991 	bl	8000220 <__aeabi_dsub>
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	f7fa f98f 	bl	8000224 <__adddf3>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	4682      	mov	sl, r0
 8005f0c:	468b      	mov	fp, r1
 8005f0e:	f04f 0900 	mov.w	r9, #0
 8005f12:	4652      	mov	r2, sl
 8005f14:	465b      	mov	r3, fp
 8005f16:	4650      	mov	r0, sl
 8005f18:	4659      	mov	r1, fp
 8005f1a:	f7fa fb39 	bl	8000590 <__aeabi_dmul>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	ec43 2b18 	vmov	d8, r2, r3
 8005f26:	f7fa fb33 	bl	8000590 <__aeabi_dmul>
 8005f2a:	ec53 2b18 	vmov	r2, r3, d8
 8005f2e:	4604      	mov	r4, r0
 8005f30:	460d      	mov	r5, r1
 8005f32:	4650      	mov	r0, sl
 8005f34:	4659      	mov	r1, fp
 8005f36:	f7fa fb2b 	bl	8000590 <__aeabi_dmul>
 8005f3a:	a371      	add	r3, pc, #452	; (adr r3, 8006100 <__kernel_tan+0x328>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	ec41 0b19 	vmov	d9, r0, r1
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	f7fa fb22 	bl	8000590 <__aeabi_dmul>
 8005f4c:	a36e      	add	r3, pc, #440	; (adr r3, 8006108 <__kernel_tan+0x330>)
 8005f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f52:	f7fa f967 	bl	8000224 <__adddf3>
 8005f56:	4622      	mov	r2, r4
 8005f58:	462b      	mov	r3, r5
 8005f5a:	f7fa fb19 	bl	8000590 <__aeabi_dmul>
 8005f5e:	a36c      	add	r3, pc, #432	; (adr r3, 8006110 <__kernel_tan+0x338>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	f7fa f95e 	bl	8000224 <__adddf3>
 8005f68:	4622      	mov	r2, r4
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	f7fa fb10 	bl	8000590 <__aeabi_dmul>
 8005f70:	a369      	add	r3, pc, #420	; (adr r3, 8006118 <__kernel_tan+0x340>)
 8005f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f76:	f7fa f955 	bl	8000224 <__adddf3>
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	462b      	mov	r3, r5
 8005f7e:	f7fa fb07 	bl	8000590 <__aeabi_dmul>
 8005f82:	a367      	add	r3, pc, #412	; (adr r3, 8006120 <__kernel_tan+0x348>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f94c 	bl	8000224 <__adddf3>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa fafe 	bl	8000590 <__aeabi_dmul>
 8005f94:	a364      	add	r3, pc, #400	; (adr r3, 8006128 <__kernel_tan+0x350>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f943 	bl	8000224 <__adddf3>
 8005f9e:	ec53 2b18 	vmov	r2, r3, d8
 8005fa2:	f7fa faf5 	bl	8000590 <__aeabi_dmul>
 8005fa6:	a362      	add	r3, pc, #392	; (adr r3, 8006130 <__kernel_tan+0x358>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	ec41 0b1a 	vmov	d10, r0, r1
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa faec 	bl	8000590 <__aeabi_dmul>
 8005fb8:	a35f      	add	r3, pc, #380	; (adr r3, 8006138 <__kernel_tan+0x360>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f7fa f931 	bl	8000224 <__adddf3>
 8005fc2:	4622      	mov	r2, r4
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	f7fa fae3 	bl	8000590 <__aeabi_dmul>
 8005fca:	a35d      	add	r3, pc, #372	; (adr r3, 8006140 <__kernel_tan+0x368>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f7fa f928 	bl	8000224 <__adddf3>
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	f7fa fada 	bl	8000590 <__aeabi_dmul>
 8005fdc:	a35a      	add	r3, pc, #360	; (adr r3, 8006148 <__kernel_tan+0x370>)
 8005fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe2:	f7fa f91f 	bl	8000224 <__adddf3>
 8005fe6:	4622      	mov	r2, r4
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f7fa fad1 	bl	8000590 <__aeabi_dmul>
 8005fee:	a358      	add	r3, pc, #352	; (adr r3, 8006150 <__kernel_tan+0x378>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa f916 	bl	8000224 <__adddf3>
 8005ff8:	4622      	mov	r2, r4
 8005ffa:	462b      	mov	r3, r5
 8005ffc:	f7fa fac8 	bl	8000590 <__aeabi_dmul>
 8006000:	a355      	add	r3, pc, #340	; (adr r3, 8006158 <__kernel_tan+0x380>)
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f7fa f90d 	bl	8000224 <__adddf3>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	ec51 0b1a 	vmov	r0, r1, d10
 8006012:	f7fa f907 	bl	8000224 <__adddf3>
 8006016:	ec53 2b19 	vmov	r2, r3, d9
 800601a:	f7fa fab9 	bl	8000590 <__aeabi_dmul>
 800601e:	4642      	mov	r2, r8
 8006020:	464b      	mov	r3, r9
 8006022:	f7fa f8ff 	bl	8000224 <__adddf3>
 8006026:	ec53 2b18 	vmov	r2, r3, d8
 800602a:	f7fa fab1 	bl	8000590 <__aeabi_dmul>
 800602e:	4642      	mov	r2, r8
 8006030:	464b      	mov	r3, r9
 8006032:	f7fa f8f7 	bl	8000224 <__adddf3>
 8006036:	a34a      	add	r3, pc, #296	; (adr r3, 8006160 <__kernel_tan+0x388>)
 8006038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603c:	4604      	mov	r4, r0
 800603e:	460d      	mov	r5, r1
 8006040:	ec51 0b19 	vmov	r0, r1, d9
 8006044:	f7fa faa4 	bl	8000590 <__aeabi_dmul>
 8006048:	4622      	mov	r2, r4
 800604a:	462b      	mov	r3, r5
 800604c:	f7fa f8ea 	bl	8000224 <__adddf3>
 8006050:	460b      	mov	r3, r1
 8006052:	ec41 0b18 	vmov	d8, r0, r1
 8006056:	4602      	mov	r2, r0
 8006058:	4659      	mov	r1, fp
 800605a:	4650      	mov	r0, sl
 800605c:	f7fa f8e2 	bl	8000224 <__adddf3>
 8006060:	4b44      	ldr	r3, [pc, #272]	; (8006174 <__kernel_tan+0x39c>)
 8006062:	429f      	cmp	r7, r3
 8006064:	4604      	mov	r4, r0
 8006066:	460d      	mov	r5, r1
 8006068:	f340 8086 	ble.w	8006178 <__kernel_tan+0x3a0>
 800606c:	4630      	mov	r0, r6
 800606e:	f7fa fa25 	bl	80004bc <__aeabi_i2d>
 8006072:	4622      	mov	r2, r4
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	462b      	mov	r3, r5
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa fa87 	bl	8000590 <__aeabi_dmul>
 8006082:	4642      	mov	r2, r8
 8006084:	4606      	mov	r6, r0
 8006086:	460f      	mov	r7, r1
 8006088:	464b      	mov	r3, r9
 800608a:	4620      	mov	r0, r4
 800608c:	4629      	mov	r1, r5
 800608e:	f7fa f8c9 	bl	8000224 <__adddf3>
 8006092:	4602      	mov	r2, r0
 8006094:	460b      	mov	r3, r1
 8006096:	4630      	mov	r0, r6
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa fba3 	bl	80007e4 <__aeabi_ddiv>
 800609e:	ec53 2b18 	vmov	r2, r3, d8
 80060a2:	f7fa f8bd 	bl	8000220 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4650      	mov	r0, sl
 80060ac:	4659      	mov	r1, fp
 80060ae:	f7fa f8b7 	bl	8000220 <__aeabi_dsub>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	f7fa f8b5 	bl	8000224 <__adddf3>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4640      	mov	r0, r8
 80060c0:	4649      	mov	r1, r9
 80060c2:	f7fa f8ad 	bl	8000220 <__aeabi_dsub>
 80060c6:	9b00      	ldr	r3, [sp, #0]
 80060c8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80060cc:	f00a 0a02 	and.w	sl, sl, #2
 80060d0:	4604      	mov	r4, r0
 80060d2:	f1ca 0001 	rsb	r0, sl, #1
 80060d6:	460d      	mov	r5, r1
 80060d8:	f7fa f9f0 	bl	80004bc <__aeabi_i2d>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4620      	mov	r0, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	f7fa fa54 	bl	8000590 <__aeabi_dmul>
 80060e8:	e69f      	b.n	8005e2a <__kernel_tan+0x52>
 80060ea:	bf00      	nop
 80060ec:	f3af 8000 	nop.w
 80060f0:	54442d18 	.word	0x54442d18
 80060f4:	3fe921fb 	.word	0x3fe921fb
 80060f8:	33145c07 	.word	0x33145c07
 80060fc:	3c81a626 	.word	0x3c81a626
 8006100:	74bf7ad4 	.word	0x74bf7ad4
 8006104:	3efb2a70 	.word	0x3efb2a70
 8006108:	32f0a7e9 	.word	0x32f0a7e9
 800610c:	3f12b80f 	.word	0x3f12b80f
 8006110:	1a8d1068 	.word	0x1a8d1068
 8006114:	3f3026f7 	.word	0x3f3026f7
 8006118:	fee08315 	.word	0xfee08315
 800611c:	3f57dbc8 	.word	0x3f57dbc8
 8006120:	e96e8493 	.word	0xe96e8493
 8006124:	3f8226e3 	.word	0x3f8226e3
 8006128:	1bb341fe 	.word	0x1bb341fe
 800612c:	3faba1ba 	.word	0x3faba1ba
 8006130:	db605373 	.word	0xdb605373
 8006134:	bef375cb 	.word	0xbef375cb
 8006138:	a03792a6 	.word	0xa03792a6
 800613c:	3f147e88 	.word	0x3f147e88
 8006140:	f2f26501 	.word	0xf2f26501
 8006144:	3f4344d8 	.word	0x3f4344d8
 8006148:	c9560328 	.word	0xc9560328
 800614c:	3f6d6d22 	.word	0x3f6d6d22
 8006150:	8406d637 	.word	0x8406d637
 8006154:	3f9664f4 	.word	0x3f9664f4
 8006158:	1110fe7a 	.word	0x1110fe7a
 800615c:	3fc11111 	.word	0x3fc11111
 8006160:	55555563 	.word	0x55555563
 8006164:	3fd55555 	.word	0x3fd55555
 8006168:	3e2fffff 	.word	0x3e2fffff
 800616c:	3ff00000 	.word	0x3ff00000
 8006170:	bff00000 	.word	0xbff00000
 8006174:	3fe59427 	.word	0x3fe59427
 8006178:	2e01      	cmp	r6, #1
 800617a:	d02f      	beq.n	80061dc <__kernel_tan+0x404>
 800617c:	460f      	mov	r7, r1
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4689      	mov	r9, r1
 8006184:	2000      	movs	r0, #0
 8006186:	4917      	ldr	r1, [pc, #92]	; (80061e4 <__kernel_tan+0x40c>)
 8006188:	f7fa fb2c 	bl	80007e4 <__aeabi_ddiv>
 800618c:	2600      	movs	r6, #0
 800618e:	e9cd 0100 	strd	r0, r1, [sp]
 8006192:	4652      	mov	r2, sl
 8006194:	465b      	mov	r3, fp
 8006196:	4630      	mov	r0, r6
 8006198:	4639      	mov	r1, r7
 800619a:	f7fa f841 	bl	8000220 <__aeabi_dsub>
 800619e:	e9dd 4500 	ldrd	r4, r5, [sp]
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	ec51 0b18 	vmov	r0, r1, d8
 80061aa:	f7fa f839 	bl	8000220 <__aeabi_dsub>
 80061ae:	4632      	mov	r2, r6
 80061b0:	462b      	mov	r3, r5
 80061b2:	f7fa f9ed 	bl	8000590 <__aeabi_dmul>
 80061b6:	46b0      	mov	r8, r6
 80061b8:	460f      	mov	r7, r1
 80061ba:	4642      	mov	r2, r8
 80061bc:	462b      	mov	r3, r5
 80061be:	4634      	mov	r4, r6
 80061c0:	4649      	mov	r1, r9
 80061c2:	4606      	mov	r6, r0
 80061c4:	4640      	mov	r0, r8
 80061c6:	f7fa f9e3 	bl	8000590 <__aeabi_dmul>
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <__kernel_tan+0x410>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	f7fa f829 	bl	8000224 <__adddf3>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4630      	mov	r0, r6
 80061d8:	4639      	mov	r1, r7
 80061da:	e665      	b.n	8005ea8 <__kernel_tan+0xd0>
 80061dc:	4682      	mov	sl, r0
 80061de:	468b      	mov	fp, r1
 80061e0:	e625      	b.n	8005e2e <__kernel_tan+0x56>
 80061e2:	bf00      	nop
 80061e4:	bff00000 	.word	0xbff00000
 80061e8:	3ff00000 	.word	0x3ff00000

080061ec <fabs>:
 80061ec:	ec51 0b10 	vmov	r0, r1, d0
 80061f0:	ee10 2a10 	vmov	r2, s0
 80061f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80061f8:	ec43 2b10 	vmov	d0, r2, r3
 80061fc:	4770      	bx	lr
	...

08006200 <scalbn>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	ec55 4b10 	vmov	r4, r5, d0
 8006206:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800620a:	4606      	mov	r6, r0
 800620c:	462b      	mov	r3, r5
 800620e:	b999      	cbnz	r1, 8006238 <scalbn+0x38>
 8006210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006214:	4323      	orrs	r3, r4
 8006216:	d03f      	beq.n	8006298 <scalbn+0x98>
 8006218:	4b35      	ldr	r3, [pc, #212]	; (80062f0 <scalbn+0xf0>)
 800621a:	4629      	mov	r1, r5
 800621c:	ee10 0a10 	vmov	r0, s0
 8006220:	2200      	movs	r2, #0
 8006222:	f7fa f9b5 	bl	8000590 <__aeabi_dmul>
 8006226:	4b33      	ldr	r3, [pc, #204]	; (80062f4 <scalbn+0xf4>)
 8006228:	429e      	cmp	r6, r3
 800622a:	4604      	mov	r4, r0
 800622c:	460d      	mov	r5, r1
 800622e:	da10      	bge.n	8006252 <scalbn+0x52>
 8006230:	a327      	add	r3, pc, #156	; (adr r3, 80062d0 <scalbn+0xd0>)
 8006232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006236:	e01f      	b.n	8006278 <scalbn+0x78>
 8006238:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800623c:	4291      	cmp	r1, r2
 800623e:	d10c      	bne.n	800625a <scalbn+0x5a>
 8006240:	ee10 2a10 	vmov	r2, s0
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7f9 ffec 	bl	8000224 <__adddf3>
 800624c:	4604      	mov	r4, r0
 800624e:	460d      	mov	r5, r1
 8006250:	e022      	b.n	8006298 <scalbn+0x98>
 8006252:	460b      	mov	r3, r1
 8006254:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006258:	3936      	subs	r1, #54	; 0x36
 800625a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800625e:	4296      	cmp	r6, r2
 8006260:	dd0d      	ble.n	800627e <scalbn+0x7e>
 8006262:	2d00      	cmp	r5, #0
 8006264:	a11c      	add	r1, pc, #112	; (adr r1, 80062d8 <scalbn+0xd8>)
 8006266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800626a:	da02      	bge.n	8006272 <scalbn+0x72>
 800626c:	a11c      	add	r1, pc, #112	; (adr r1, 80062e0 <scalbn+0xe0>)
 800626e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006272:	a319      	add	r3, pc, #100	; (adr r3, 80062d8 <scalbn+0xd8>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fa f98a 	bl	8000590 <__aeabi_dmul>
 800627c:	e7e6      	b.n	800624c <scalbn+0x4c>
 800627e:	1872      	adds	r2, r6, r1
 8006280:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006284:	428a      	cmp	r2, r1
 8006286:	dcec      	bgt.n	8006262 <scalbn+0x62>
 8006288:	2a00      	cmp	r2, #0
 800628a:	dd08      	ble.n	800629e <scalbn+0x9e>
 800628c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006290:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006294:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006298:	ec45 4b10 	vmov	d0, r4, r5
 800629c:	bd70      	pop	{r4, r5, r6, pc}
 800629e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80062a2:	da08      	bge.n	80062b6 <scalbn+0xb6>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	a10a      	add	r1, pc, #40	; (adr r1, 80062d0 <scalbn+0xd0>)
 80062a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ac:	dac0      	bge.n	8006230 <scalbn+0x30>
 80062ae:	a10e      	add	r1, pc, #56	; (adr r1, 80062e8 <scalbn+0xe8>)
 80062b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062b4:	e7bc      	b.n	8006230 <scalbn+0x30>
 80062b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062ba:	3236      	adds	r2, #54	; 0x36
 80062bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80062c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80062c4:	4620      	mov	r0, r4
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <scalbn+0xf8>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	e7d5      	b.n	8006278 <scalbn+0x78>
 80062cc:	f3af 8000 	nop.w
 80062d0:	c2f8f359 	.word	0xc2f8f359
 80062d4:	01a56e1f 	.word	0x01a56e1f
 80062d8:	8800759c 	.word	0x8800759c
 80062dc:	7e37e43c 	.word	0x7e37e43c
 80062e0:	8800759c 	.word	0x8800759c
 80062e4:	fe37e43c 	.word	0xfe37e43c
 80062e8:	c2f8f359 	.word	0xc2f8f359
 80062ec:	81a56e1f 	.word	0x81a56e1f
 80062f0:	43500000 	.word	0x43500000
 80062f4:	ffff3cb0 	.word	0xffff3cb0
 80062f8:	3c900000 	.word	0x3c900000
 80062fc:	00000000 	.word	0x00000000

08006300 <floor>:
 8006300:	ec51 0b10 	vmov	r0, r1, d0
 8006304:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006310:	2e13      	cmp	r6, #19
 8006312:	ee10 5a10 	vmov	r5, s0
 8006316:	ee10 8a10 	vmov	r8, s0
 800631a:	460c      	mov	r4, r1
 800631c:	dc31      	bgt.n	8006382 <floor+0x82>
 800631e:	2e00      	cmp	r6, #0
 8006320:	da14      	bge.n	800634c <floor+0x4c>
 8006322:	a333      	add	r3, pc, #204	; (adr r3, 80063f0 <floor+0xf0>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f7f9 ff7c 	bl	8000224 <__adddf3>
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	f7fa fbbe 	bl	8000ab0 <__aeabi_dcmpgt>
 8006334:	b138      	cbz	r0, 8006346 <floor+0x46>
 8006336:	2c00      	cmp	r4, #0
 8006338:	da53      	bge.n	80063e2 <floor+0xe2>
 800633a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800633e:	4325      	orrs	r5, r4
 8006340:	d052      	beq.n	80063e8 <floor+0xe8>
 8006342:	4c2d      	ldr	r4, [pc, #180]	; (80063f8 <floor+0xf8>)
 8006344:	2500      	movs	r5, #0
 8006346:	4621      	mov	r1, r4
 8006348:	4628      	mov	r0, r5
 800634a:	e024      	b.n	8006396 <floor+0x96>
 800634c:	4f2b      	ldr	r7, [pc, #172]	; (80063fc <floor+0xfc>)
 800634e:	4137      	asrs	r7, r6
 8006350:	ea01 0307 	and.w	r3, r1, r7
 8006354:	4303      	orrs	r3, r0
 8006356:	d01e      	beq.n	8006396 <floor+0x96>
 8006358:	a325      	add	r3, pc, #148	; (adr r3, 80063f0 <floor+0xf0>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	f7f9 ff61 	bl	8000224 <__adddf3>
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	f7fa fba3 	bl	8000ab0 <__aeabi_dcmpgt>
 800636a:	2800      	cmp	r0, #0
 800636c:	d0eb      	beq.n	8006346 <floor+0x46>
 800636e:	2c00      	cmp	r4, #0
 8006370:	bfbe      	ittt	lt
 8006372:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006376:	4133      	asrlt	r3, r6
 8006378:	18e4      	addlt	r4, r4, r3
 800637a:	ea24 0407 	bic.w	r4, r4, r7
 800637e:	2500      	movs	r5, #0
 8006380:	e7e1      	b.n	8006346 <floor+0x46>
 8006382:	2e33      	cmp	r6, #51	; 0x33
 8006384:	dd0b      	ble.n	800639e <floor+0x9e>
 8006386:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800638a:	d104      	bne.n	8006396 <floor+0x96>
 800638c:	ee10 2a10 	vmov	r2, s0
 8006390:	460b      	mov	r3, r1
 8006392:	f7f9 ff47 	bl	8000224 <__adddf3>
 8006396:	ec41 0b10 	vmov	d0, r0, r1
 800639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800639e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80063a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80063a6:	40df      	lsrs	r7, r3
 80063a8:	4238      	tst	r0, r7
 80063aa:	d0f4      	beq.n	8006396 <floor+0x96>
 80063ac:	a310      	add	r3, pc, #64	; (adr r3, 80063f0 <floor+0xf0>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f7f9 ff37 	bl	8000224 <__adddf3>
 80063b6:	2200      	movs	r2, #0
 80063b8:	2300      	movs	r3, #0
 80063ba:	f7fa fb79 	bl	8000ab0 <__aeabi_dcmpgt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	d0c1      	beq.n	8006346 <floor+0x46>
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	da0a      	bge.n	80063dc <floor+0xdc>
 80063c6:	2e14      	cmp	r6, #20
 80063c8:	d101      	bne.n	80063ce <floor+0xce>
 80063ca:	3401      	adds	r4, #1
 80063cc:	e006      	b.n	80063dc <floor+0xdc>
 80063ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80063d2:	2301      	movs	r3, #1
 80063d4:	40b3      	lsls	r3, r6
 80063d6:	441d      	add	r5, r3
 80063d8:	45a8      	cmp	r8, r5
 80063da:	d8f6      	bhi.n	80063ca <floor+0xca>
 80063dc:	ea25 0507 	bic.w	r5, r5, r7
 80063e0:	e7b1      	b.n	8006346 <floor+0x46>
 80063e2:	2500      	movs	r5, #0
 80063e4:	462c      	mov	r4, r5
 80063e6:	e7ae      	b.n	8006346 <floor+0x46>
 80063e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80063ec:	e7ab      	b.n	8006346 <floor+0x46>
 80063ee:	bf00      	nop
 80063f0:	8800759c 	.word	0x8800759c
 80063f4:	7e37e43c 	.word	0x7e37e43c
 80063f8:	bff00000 	.word	0xbff00000
 80063fc:	000fffff 	.word	0x000fffff

08006400 <memset>:
 8006400:	4402      	add	r2, r0
 8006402:	4603      	mov	r3, r0
 8006404:	4293      	cmp	r3, r2
 8006406:	d100      	bne.n	800640a <memset+0xa>
 8006408:	4770      	bx	lr
 800640a:	f803 1b01 	strb.w	r1, [r3], #1
 800640e:	e7f9      	b.n	8006404 <memset+0x4>

08006410 <__errno>:
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <__errno+0x8>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20000058 	.word	0x20000058

0800641c <__libc_init_array>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4d0d      	ldr	r5, [pc, #52]	; (8006454 <__libc_init_array+0x38>)
 8006420:	4c0d      	ldr	r4, [pc, #52]	; (8006458 <__libc_init_array+0x3c>)
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	2600      	movs	r6, #0
 8006428:	42a6      	cmp	r6, r4
 800642a:	d109      	bne.n	8006440 <__libc_init_array+0x24>
 800642c:	4d0b      	ldr	r5, [pc, #44]	; (800645c <__libc_init_array+0x40>)
 800642e:	4c0c      	ldr	r4, [pc, #48]	; (8006460 <__libc_init_array+0x44>)
 8006430:	f000 f872 	bl	8006518 <_init>
 8006434:	1b64      	subs	r4, r4, r5
 8006436:	10a4      	asrs	r4, r4, #2
 8006438:	2600      	movs	r6, #0
 800643a:	42a6      	cmp	r6, r4
 800643c:	d105      	bne.n	800644a <__libc_init_array+0x2e>
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	f855 3b04 	ldr.w	r3, [r5], #4
 8006444:	4798      	blx	r3
 8006446:	3601      	adds	r6, #1
 8006448:	e7ee      	b.n	8006428 <__libc_init_array+0xc>
 800644a:	f855 3b04 	ldr.w	r3, [r5], #4
 800644e:	4798      	blx	r3
 8006450:	3601      	adds	r6, #1
 8006452:	e7f2      	b.n	800643a <__libc_init_array+0x1e>
 8006454:	08008014 	.word	0x08008014
 8006458:	08008014 	.word	0x08008014
 800645c:	08008014 	.word	0x08008014
 8006460:	08008018 	.word	0x08008018

08006464 <abort>:
 8006464:	b508      	push	{r3, lr}
 8006466:	2006      	movs	r0, #6
 8006468:	f000 f82c 	bl	80064c4 <raise>
 800646c:	2001      	movs	r0, #1
 800646e:	f7fc f983 	bl	8002778 <_exit>

08006472 <_raise_r>:
 8006472:	291f      	cmp	r1, #31
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	d904      	bls.n	8006486 <_raise_r+0x14>
 800647c:	2316      	movs	r3, #22
 800647e:	6003      	str	r3, [r0, #0]
 8006480:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006488:	b112      	cbz	r2, 8006490 <_raise_r+0x1e>
 800648a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800648e:	b94b      	cbnz	r3, 80064a4 <_raise_r+0x32>
 8006490:	4620      	mov	r0, r4
 8006492:	f000 f831 	bl	80064f8 <_getpid_r>
 8006496:	462a      	mov	r2, r5
 8006498:	4601      	mov	r1, r0
 800649a:	4620      	mov	r0, r4
 800649c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064a0:	f000 b818 	b.w	80064d4 <_kill_r>
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d00a      	beq.n	80064be <_raise_r+0x4c>
 80064a8:	1c59      	adds	r1, r3, #1
 80064aa:	d103      	bne.n	80064b4 <_raise_r+0x42>
 80064ac:	2316      	movs	r3, #22
 80064ae:	6003      	str	r3, [r0, #0]
 80064b0:	2001      	movs	r0, #1
 80064b2:	e7e7      	b.n	8006484 <_raise_r+0x12>
 80064b4:	2400      	movs	r4, #0
 80064b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80064ba:	4628      	mov	r0, r5
 80064bc:	4798      	blx	r3
 80064be:	2000      	movs	r0, #0
 80064c0:	e7e0      	b.n	8006484 <_raise_r+0x12>
	...

080064c4 <raise>:
 80064c4:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <raise+0xc>)
 80064c6:	4601      	mov	r1, r0
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	f7ff bfd2 	b.w	8006472 <_raise_r>
 80064ce:	bf00      	nop
 80064d0:	20000058 	.word	0x20000058

080064d4 <_kill_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_kill_r+0x20>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f7fc f941 	bl	8002768 <_kill>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d102      	bne.n	80064f0 <_kill_r+0x1c>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b103      	cbz	r3, 80064f0 <_kill_r+0x1c>
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	bf00      	nop
 80064f4:	200077c4 	.word	0x200077c4

080064f8 <_getpid_r>:
 80064f8:	f7fc b934 	b.w	8002764 <_getpid>

080064fc <memcpy>:
 80064fc:	440a      	add	r2, r1
 80064fe:	4291      	cmp	r1, r2
 8006500:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006504:	d100      	bne.n	8006508 <memcpy+0xc>
 8006506:	4770      	bx	lr
 8006508:	b510      	push	{r4, lr}
 800650a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006512:	4291      	cmp	r1, r2
 8006514:	d1f9      	bne.n	800650a <memcpy+0xe>
 8006516:	bd10      	pop	{r4, pc}

08006518 <_init>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	bf00      	nop
 800651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651e:	bc08      	pop	{r3}
 8006520:	469e      	mov	lr, r3
 8006522:	4770      	bx	lr

08006524 <_fini>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr
