
Reverb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e48  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ccmram       00000290  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001810  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08004ac0  08004ac0  00020028  2**0
                  CONTENTS
  5 .ARM          00000000  08004ac0  08004ac0  00020028  2**0
                  CONTENTS
  6 .preinit_array 00000000  08004ac0  08004ac0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000028  20000000  08004ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007954  20000028  08004af0  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000404  2000797c  08004af0  0002797c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc93  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d15  00000000  00000000  0003fceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ccba  00000000  00000000  00043a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f08  00000000  00000000  000506c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001709  00000000  00000000  000515c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000036cc  00000000  00000000  00052cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e944  00000000  00000000  0005639d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d48a4  00000000  00000000  00074ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00149585  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002de4  00000000  00000000  001495c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000066  00000000  00000000  0014c3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003008 	.word	0x08003008

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	08003008 	.word	0x08003008

08000218 <svf_init>:

void svf_init(svf_typedef *svf, float _freq, float _q) {
	svf->freq = _freq;

	svf->a = (6.28f * _freq) / SAMPLE_RATE;
	if (svf->a > 1.0f) {
 8000218:	eddf 7a10 	vldr	s15, [pc, #64]	; 800025c <svf_init+0x44>
	svf->freq = _freq;
 800021c:	ed80 0a05 	vstr	s0, [r0, #20]
	if (svf->a > 1.0f) {
 8000220:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	svf->a = (6.28f * _freq) / SAMPLE_RATE;
 8000228:	bfdc      	itt	le
 800022a:	eddf 7a0d 	vldrle	s15, [pc, #52]	; 8000260 <svf_init+0x48>
 800022e:	ee20 0a27 	vmulle.f32	s0, s0, s15
	}

	if (_q < 0.500f) {
		_q = 0.500f;
	}
	svf->q = 1.0f / _q;
 8000232:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000236:	eef4 0ae7 	vcmpe.f32	s1, s15
		svf->a = 1.0f;
 800023a:	bfc8      	it	gt
 800023c:	eeb7 0a00 	vmovgt.f32	s0, #112	; 0x3f800000  1.0
	svf->q = 1.0f / _q;
 8000240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000244:	bfb8      	it	lt
 8000246:	eef0 0a67 	vmovlt.f32	s1, s15
 800024a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800024e:	eec7 7a20 	vdiv.f32	s15, s14, s1
 8000252:	ed80 0a06 	vstr	s0, [r0, #24]
 8000256:	edc0 7a07 	vstr	s15, [r0, #28]
}
 800025a:	4770      	bx	lr
 800025c:	459f3c54 	.word	0x459f3c54
 8000260:	394dc876 	.word	0x394dc876

08000264 <svf_tick>:

void svf_tick(svf_typedef *svf, float _input) {
	svf->low = svf->delay2 + svf->a * svf->delay1;
 8000264:	edd0 7a03 	vldr	s15, [r0, #12]
 8000268:	edd0 6a06 	vldr	s13, [r0, #24]
 800026c:	ed90 7a04 	vldr	s14, [r0, #16]
 8000270:	ed90 6a07 	vldr	s12, [r0, #28]
 8000274:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8000278:	eea7 0ac6 	vfms.f32	s0, s15, s12
 800027c:	ed80 7a00 	vstr	s14, [r0]
	svf->high = _input - svf->low - (svf->q * svf->delay1);
 8000280:	ee30 0a47 	vsub.f32	s0, s0, s14
	svf->band = (svf->a * svf->high) + svf->delay1;

	svf->delay1 = svf->band;
	svf->delay2 = svf->low;
 8000284:	ed80 7a04 	vstr	s14, [r0, #16]
	svf->band = (svf->a * svf->high) + svf->delay1;
 8000288:	eee6 7a80 	vfma.f32	s15, s13, s0
	svf->high = _input - svf->low - (svf->q * svf->delay1);
 800028c:	ed80 0a01 	vstr	s0, [r0, #4]
	svf->band = (svf->a * svf->high) + svf->delay1;
 8000290:	edc0 7a02 	vstr	s15, [r0, #8]
	svf->delay1 = svf->band;
 8000294:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <svf_set_a_direct>:
		svf->a = 1.0f;
	}
}

void svf_set_a_direct(svf_typedef *svf, float _a) {
	svf->a = _a;
 800029c:	ed80 0a06 	vstr	s0, [r0, #24]
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop

080002a4 <svf_get_low>:
	svf->q = 1.0f / _q;
}

float svf_get_low(svf_typedef *svf) {
	return svf->low;
}
 80002a4:	ed90 0a00 	vldr	s0, [r0]
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop

080002ac <svf_get_high>:

float svf_get_high(svf_typedef *svf) {
	return svf->high;
}
 80002ac:	ed90 0a01 	vldr	s0, [r0, #4]
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <lfo_tick>:

#include "lfo.h"
#include "big_sine_wave.h"

uint32_t lfo_tick(volatile lfo_t *lfo, float _frequency, int16_t _mod) {
	lfo->phase_increment = PHINC_SCALE * _frequency;
 80002b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000308 <lfo_tick+0x54>
	lfo->phase_index += lfo->phase_increment;
	lfo->raw = sine_10b[((lfo->phase_index >> 22) + _mod) & 1023];
 80002b8:	4a14      	ldr	r2, [pc, #80]	; (800030c <lfo_tick+0x58>)
	lfo->phase_increment = PHINC_SCALE * _frequency;
 80002ba:	ee20 0a27 	vmul.f32	s0, s0, s15
uint32_t lfo_tick(volatile lfo_t *lfo, float _frequency, int16_t _mod) {
 80002be:	b410      	push	{r4}
	lfo->phase_increment = PHINC_SCALE * _frequency;
 80002c0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80002c4:	ed80 0a02 	vstr	s0, [r0, #8]
	lfo->phase_index += lfo->phase_increment;
 80002c8:	6884      	ldr	r4, [r0, #8]
 80002ca:	68c3      	ldr	r3, [r0, #12]
 80002cc:	4423      	add	r3, r4
 80002ce:	60c3      	str	r3, [r0, #12]
	lfo->raw = sine_10b[((lfo->phase_index >> 22) + _mod) & 1023];
 80002d0:	68c3      	ldr	r3, [r0, #12]
	lfo->out = (lfo->raw - 512) * 0.001953125f;
	return lfo->out;
}
 80002d2:	f85d 4b04 	ldr.w	r4, [sp], #4
	lfo->raw = sine_10b[((lfo->phase_index >> 22) + _mod) & 1023];
 80002d6:	eb01 5193 	add.w	r1, r1, r3, lsr #22
 80002da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80002de:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80002e2:	8003      	strh	r3, [r0, #0]
	lfo->out = (lfo->raw - 512) * 0.001953125f;
 80002e4:	8803      	ldrh	r3, [r0, #0]
 80002e6:	b29b      	uxth	r3, r3
 80002e8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80002ec:	ee07 3a90 	vmov	s15, r3
 80002f0:	eefa 7aeb 	vcvt.f32.s32	s15, s15, #9
 80002f4:	edc0 7a01 	vstr	s15, [r0, #4]
	return lfo->out;
 80002f8:	edd0 7a01 	vldr	s15, [r0, #4]
}
 80002fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000300:	ee17 0a90 	vmov	r0, s15
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	479d4992 	.word	0x479d4992
 800030c:	080042b0 	.word	0x080042b0

08000310 <shared_delay_tick>:
	ap->write = j;
	return output;
}

void shared_delay_tick(shared_delay_t *d) {
	d->write = d->index;
 8000310:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8000314:	80c3      	strh	r3, [r0, #6]
	d->index--;
 8000316:	3b01      	subs	r3, #1
 8000318:	b21a      	sxth	r2, r3
	if (d->index < 0) {
 800031a:	2a00      	cmp	r2, #0
	d->index--;
 800031c:	8102      	strh	r2, [r0, #8]
 800031e:	b29b      	uxth	r3, r3
	if (d->index < 0) {
 8000320:	da02      	bge.n	8000328 <shared_delay_tick+0x18>
		d->index += d->bufsize;
 8000322:	8882      	ldrh	r2, [r0, #4]
 8000324:	4413      	add	r3, r2
 8000326:	8103      	strh	r3, [r0, #8]
	}
}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop

0800032c <shared_delay_init>:

void shared_delay_init(shared_delay_t *d, int16_t *_buf, uint16_t _bufsize) {
	d->buf = _buf;
	d->bufsize = _bufsize;
	d->ms_scale = SAMPLE_RATE / 1000.0f;
 800032c:	f04f 4c84 	mov.w	ip, #1107296256	; 0x42000000
	d->d1 = 0.0f;
 8000330:	2300      	movs	r3, #0
	d->buf = _buf;
 8000332:	6001      	str	r1, [r0, #0]
	d->bufsize = _bufsize;
 8000334:	8082      	strh	r2, [r0, #4]
	d->ms_scale = SAMPLE_RATE / 1000.0f;
 8000336:	f8c0 c00c 	str.w	ip, [r0, #12]
	d->d1 = 0.0f;
 800033a:	6103      	str	r3, [r0, #16]
}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000340:	b510      	push	{r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000342:	2400      	movs	r4, #0
{
 8000344:	b08c      	sub	sp, #48	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	2220      	movs	r2, #32
 8000348:	4621      	mov	r1, r4
 800034a:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 800034c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000350:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000352:	f002 fe2d 	bl	8002fb0 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000356:	4822      	ldr	r0, [pc, #136]	; (80003e0 <MX_ADC1_Init+0xa0>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800035c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8000360:	e9c0 1200 	strd	r1, r2, [r0]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000364:	2208      	movs	r2, #8
 8000366:	6082      	str	r2, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000368:	2204      	movs	r2, #4
 800036a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800036e:	f44f 6290 	mov.w	r2, #1152	; 0x480
  hadc1.Init.NbrOfConversion = 1;
 8000372:	2301      	movs	r3, #1
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000374:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000376:	8384      	strh	r4, [r0, #28]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000378:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.GainCompensation = 0;
 800037c:	e9c0 4403 	strd	r4, r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000380:	6203      	str	r3, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000382:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000386:	6302      	str	r2, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000388:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800038c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800038e:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000392:	f000 fdf9 	bl	8000f88 <HAL_ADC_Init>
 8000396:	b9c0      	cbnz	r0, 80003ca <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000398:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800039a:	4811      	ldr	r0, [pc, #68]	; (80003e0 <MX_ADC1_Init+0xa0>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800039c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800039e:	a901      	add	r1, sp, #4
 80003a0:	f001 fa5e 	bl	8001860 <HAL_ADCEx_MultiModeConfigChannel>
 80003a4:	b9c0      	cbnz	r0, 80003d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80003a6:	4a0f      	ldr	r2, [pc, #60]	; (80003e4 <MX_ADC1_Init+0xa4>)
 80003a8:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80003ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003b0:	247f      	movs	r4, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b2:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 80003b4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b6:	480a      	ldr	r0, [pc, #40]	; (80003e0 <MX_ADC1_Init+0xa0>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003b8:	9407      	str	r4, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ba:	a904      	add	r1, sp, #16
  sConfig.Offset = 0;
 80003bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c0:	f000 ff34 	bl	800122c <HAL_ADC_ConfigChannel>
 80003c4:	b920      	cbnz	r0, 80003d0 <MX_ADC1_Init+0x90>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003c6:	b00c      	add	sp, #48	; 0x30
 80003c8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003ca:	f000 facf 	bl	800096c <Error_Handler>
 80003ce:	e7e3      	b.n	8000398 <MX_ADC1_Init+0x58>
    Error_Handler();
 80003d0:	f000 facc 	bl	800096c <Error_Handler>
}
 80003d4:	b00c      	add	sp, #48	; 0x30
 80003d6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003d8:	f000 fac8 	bl	800096c <Error_Handler>
 80003dc:	e7e3      	b.n	80003a6 <MX_ADC1_Init+0x66>
 80003de:	bf00      	nop
 80003e0:	200000bc 	.word	0x200000bc
 80003e4:	0c900008 	.word	0x0c900008

080003e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80003e8:	b510      	push	{r4, lr}
 80003ea:	b088      	sub	sp, #32

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003ec:	2220      	movs	r2, #32
 80003ee:	2100      	movs	r1, #0
 80003f0:	4668      	mov	r0, sp
 80003f2:	f002 fddd 	bl	8002fb0 <memset>

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003f6:	4c1c      	ldr	r4, [pc, #112]	; (8000468 <MX_ADC2_Init+0x80>)
  hadc2.Instance = ADC2;
 80003f8:	481c      	ldr	r0, [pc, #112]	; (800046c <MX_ADC2_Init+0x84>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80003fe:	e9c0 4100 	strd	r4, r1, [r0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000402:	2104      	movs	r1, #4
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000404:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000406:	6181      	str	r1, [r0, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000408:	f44f 61ac 	mov.w	r1, #1376	; 0x560
  hadc2.Init.NbrOfConversion = 1;
 800040c:	2201      	movs	r2, #1
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800040e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000410:	8383      	strh	r3, [r0, #28]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000416:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800041a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hadc2.Init.NbrOfConversion = 1;
 800041e:	6202      	str	r2, [r0, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000420:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000424:	6301      	str	r1, [r0, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000426:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800042c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000430:	f000 fdaa 	bl	8000f88 <HAL_ADC_Init>
 8000434:	b988      	cbnz	r0, 800045a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000436:	4a0e      	ldr	r2, [pc, #56]	; (8000470 <MX_ADC2_Init+0x88>)
 8000438:	9200      	str	r2, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043a:	2306      	movs	r3, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800043c:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000440:	247f      	movs	r4, #127	; 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000442:	2204      	movs	r2, #4
  sConfig.Offset = 0;
 8000444:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <MX_ADC2_Init+0x84>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000448:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800044a:	4669      	mov	r1, sp
  sConfig.Offset = 0;
 800044c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000450:	f000 feec 	bl	800122c <HAL_ADC_ConfigChannel>
 8000454:	b920      	cbnz	r0, 8000460 <MX_ADC2_Init+0x78>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000456:	b008      	add	sp, #32
 8000458:	bd10      	pop	{r4, pc}
    Error_Handler();
 800045a:	f000 fa87 	bl	800096c <Error_Handler>
 800045e:	e7ea      	b.n	8000436 <MX_ADC2_Init+0x4e>
    Error_Handler();
 8000460:	f000 fa84 	bl	800096c <Error_Handler>
}
 8000464:	b008      	add	sp, #32
 8000466:	bd10      	pop	{r4, pc}
 8000468:	50000100 	.word	0x50000100
 800046c:	20000050 	.word	0x20000050
 8000470:	04300002 	.word	0x04300002

08000474 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4604      	mov	r4, r0
 8000478:	b09a      	sub	sp, #104	; 0x68

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	2244      	movs	r2, #68	; 0x44
 800047e:	a809      	add	r0, sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000484:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000488:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800048a:	f002 fd91 	bl	8002fb0 <memset>
  if(adcHandle->Instance==ADC1)
 800048e:	6823      	ldr	r3, [r4, #0]
 8000490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000494:	d004      	beq.n	80004a0 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000496:	4a50      	ldr	r2, [pc, #320]	; (80005d8 <HAL_ADC_MspInit+0x164>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d04c      	beq.n	8000536 <HAL_ADC_MspInit+0xc2>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800049c:	b01a      	add	sp, #104	; 0x68
 800049e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80004a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a8:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004aa:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80004ac:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ae:	f002 fa55 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	f040 808a 	bne.w	80005cc <HAL_ADC_MspInit+0x158>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004b8:	4a48      	ldr	r2, [pc, #288]	; (80005dc <HAL_ADC_MspInit+0x168>)
 80004ba:	6813      	ldr	r3, [r2, #0]
 80004bc:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004be:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004c2:	d109      	bne.n	80004d8 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004c4:	4b46      	ldr	r3, [pc, #280]	; (80005e0 <HAL_ADC_MspInit+0x16c>)
 80004c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80004cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80004ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d4:	9300      	str	r3, [sp, #0]
 80004d6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b41      	ldr	r3, [pc, #260]	; (80005e0 <HAL_ADC_MspInit+0x16c>)
    hdma_adc1.Instance = DMA1_Channel2;
 80004da:	4d42      	ldr	r5, [pc, #264]	; (80005e4 <HAL_ADC_MspInit+0x170>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004de:	f042 0201 	orr.w	r2, r2, #1
 80004e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004ee:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004f4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fc:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f001 fd20 	bl	8001f44 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000504:	4a38      	ldr	r2, [pc, #224]	; (80005e8 <HAL_ADC_MspInit+0x174>)
 8000506:	2305      	movs	r3, #5
 8000508:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800050c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000510:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000514:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000516:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000518:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800051a:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800051e:	e9c5 6204 	strd	r6, r2, [r5, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000522:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000526:	f001 fbcf 	bl	8001cc8 <HAL_DMA_Init>
 800052a:	2800      	cmp	r0, #0
 800052c:	d14b      	bne.n	80005c6 <HAL_ADC_MspInit+0x152>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800052e:	6565      	str	r5, [r4, #84]	; 0x54
 8000530:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8000532:	b01a      	add	sp, #104	; 0x68
 8000534:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000536:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800053a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053e:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000540:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000542:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	f002 fa0a 	bl	800295c <HAL_RCCEx_PeriphCLKConfig>
 8000548:	2800      	cmp	r0, #0
 800054a:	d142      	bne.n	80005d2 <HAL_ADC_MspInit+0x15e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800054c:	4a23      	ldr	r2, [pc, #140]	; (80005dc <HAL_ADC_MspInit+0x168>)
 800054e:	6813      	ldr	r3, [r2, #0]
 8000550:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000552:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000554:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000556:	d109      	bne.n	800056c <HAL_ADC_MspInit+0xf8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000558:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <HAL_ADC_MspInit+0x16c>)
 800055a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000560:	64da      	str	r2, [r3, #76]	; 0x4c
 8000562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000568:	9302      	str	r3, [sp, #8]
 800056a:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <HAL_ADC_MspInit+0x16c>)
    hdma_adc2.Instance = DMA1_Channel1;
 800056e:	4d1f      	ldr	r5, [pc, #124]	; (80005ec <HAL_ADC_MspInit+0x178>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000572:	f042 0201 	orr.w	r2, r2, #1
 8000576:	64da      	str	r2, [r3, #76]	; 0x4c
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000582:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	a904      	add	r1, sp, #16
 8000586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800058a:	2303      	movs	r3, #3
 800058c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	9606      	str	r6, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f001 fcd6 	bl	8001f44 <HAL_GPIO_Init>
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_ADC_MspInit+0x17c>)
 800059a:	2324      	movs	r3, #36	; 0x24
 800059c:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a4:	e9c5 6304 	strd	r6, r3, [r5, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80005ac:	2220      	movs	r2, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80005ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80005b2:	4628      	mov	r0, r5
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b4:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80005b8:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80005bc:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80005be:	f001 fb83 	bl	8001cc8 <HAL_DMA_Init>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d0b3      	beq.n	800052e <HAL_ADC_MspInit+0xba>
      Error_Handler();
 80005c6:	f000 f9d1 	bl	800096c <Error_Handler>
 80005ca:	e7b0      	b.n	800052e <HAL_ADC_MspInit+0xba>
      Error_Handler();
 80005cc:	f000 f9ce 	bl	800096c <Error_Handler>
 80005d0:	e772      	b.n	80004b8 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 80005d2:	f000 f9cb 	bl	800096c <Error_Handler>
 80005d6:	e7b9      	b.n	800054c <HAL_ADC_MspInit+0xd8>
 80005d8:	50000100 	.word	0x50000100
 80005dc:	20000044 	.word	0x20000044
 80005e0:	40021000 	.word	0x40021000
 80005e4:	2000012c 	.word	0x2000012c
 80005e8:	4002001c 	.word	0x4002001c
 80005ec:	20000194 	.word	0x20000194
 80005f0:	40020008 	.word	0x40020008

080005f4 <ADC1_Start>:
}

/* USER CODE BEGIN 1 */

void ADC1_Start() {
	HAL_ADC_Start_DMA(&hadc1, &ADC1_raw_data, 1);
 80005f4:	4902      	ldr	r1, [pc, #8]	; (8000600 <ADC1_Start+0xc>)
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <ADC1_Start+0x10>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	f001 b8b9 	b.w	8001770 <HAL_ADC_Start_DMA>
 80005fe:	bf00      	nop
 8000600:	20000128 	.word	0x20000128
 8000604:	200000bc 	.word	0x200000bc

08000608 <ADC2_Start>:
}
void ADC2_Start() {
	HAL_ADC_Start_DMA(&hadc2, &ADC2_raw_data, 1);
 8000608:	4902      	ldr	r1, [pc, #8]	; (8000614 <ADC2_Start+0xc>)
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <ADC2_Start+0x10>)
 800060c:	2201      	movs	r2, #1
 800060e:	f001 b8af 	b.w	8001770 <HAL_ADC_Start_DMA>
 8000612:	bf00      	nop
 8000614:	2000012a 	.word	0x2000012a
 8000618:	20000050 	.word	0x20000050

0800061c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800061c:	b500      	push	{lr}
 800061e:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000620:	2230      	movs	r2, #48	; 0x30
 8000622:	2100      	movs	r1, #0
 8000624:	4668      	mov	r0, sp
 8000626:	f002 fcc3 	bl	8002fb0 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <MX_DAC1_Init+0x64>)
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_DAC1_Init+0x68>)
 800062e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000630:	f001 f9fa 	bl	8001a28 <HAL_DAC_Init>
 8000634:	b9c8      	cbnz	r0, 800066a <MX_DAC1_Init+0x4e>
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000636:	2102      	movs	r1, #2
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000638:	2200      	movs	r2, #0
  sConfig.DAC_SignedFormat = DISABLE;
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800063a:	2301      	movs	r3, #1
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800063c:	9100      	str	r1, [sp, #0]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <MX_DAC1_Init+0x64>)
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000640:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000644:	4669      	mov	r1, sp
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000646:	e9cd 2202 	strd	r2, r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800064a:	e9cd 2204 	strd	r2, r2, [sp, #16]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800064e:	9306      	str	r3, [sp, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000650:	9207      	str	r2, [sp, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000652:	f001 fa4d 	bl	8001af0 <HAL_DAC_ConfigChannel>
 8000656:	b980      	cbnz	r0, 800067a <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <MX_DAC1_Init+0x64>)
 800065a:	2210      	movs	r2, #16
 800065c:	4669      	mov	r1, sp
 800065e:	f001 fa47 	bl	8001af0 <HAL_DAC_ConfigChannel>
 8000662:	b928      	cbnz	r0, 8000670 <MX_DAC1_Init+0x54>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000664:	b00d      	add	sp, #52	; 0x34
 8000666:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800066a:	f000 f97f 	bl	800096c <Error_Handler>
 800066e:	e7e2      	b.n	8000636 <MX_DAC1_Init+0x1a>
    Error_Handler();
 8000670:	f000 f97c 	bl	800096c <Error_Handler>
}
 8000674:	b00d      	add	sp, #52	; 0x34
 8000676:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800067a:	f000 f977 	bl	800096c <Error_Handler>
 800067e:	e7eb      	b.n	8000658 <MX_DAC1_Init+0x3c>
 8000680:	200001f4 	.word	0x200001f4
 8000684:	50000800 	.word	0x50000800

08000688 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000688:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <HAL_DAC_MspInit+0x70>)
 800068c:	6801      	ldr	r1, [r0, #0]
{
 800068e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 8000692:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000698:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800069c:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 800069e:	d002      	beq.n	80006a6 <HAL_DAC_MspInit+0x1e>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80006a0:	b009      	add	sp, #36	; 0x24
 80006a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ae:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80006f0 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80006b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80006ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006bc:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c6:	f042 0201 	orr.w	r2, r2, #1
 80006ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	a902      	add	r1, sp, #8
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006da:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f001 fc30 	bl	8001f44 <HAL_GPIO_Init>
}
 80006e4:	b009      	add	sp, #36	; 0x24
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ea:	bf00      	nop
 80006ec:	f3af 8000 	nop.w
 80006f0:	00000030 	.word	0x00000030
 80006f4:	00000003 	.word	0x00000003
 80006f8:	50000800 	.word	0x50000800

080006fc <DAC_Start>:
  }
}

/* USER CODE BEGIN 1 */

void DAC_Start() {
 80006fc:	b510      	push	{r4, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80006fe:	4c0c      	ldr	r4, [pc, #48]	; (8000730 <DAC_Start+0x34>)
 8000700:	2100      	movs	r1, #0
 8000702:	4620      	mov	r0, r4
 8000704:	f001 f9a6 	bl	8001a54 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000708:	2110      	movs	r1, #16
 800070a:	4620      	mov	r0, r4
 800070c:	f001 f9a2 	bl	8001a54 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2047);
 8000710:	2200      	movs	r2, #0
 8000712:	4611      	mov	r1, r2
 8000714:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000718:	4620      	mov	r0, r4
 800071a:	f001 f9d1 	bl	8001ac0 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2047);
 800071e:	4620      	mov	r0, r4
 8000720:	f240 73ff 	movw	r3, #2047	; 0x7ff
}
 8000724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2047);
 8000728:	2200      	movs	r2, #0
 800072a:	2110      	movs	r1, #16
 800072c:	f001 b9c8 	b.w	8001ac0 <HAL_DAC_SetValue>
 8000730:	200001f4 	.word	0x200001f4

08000734 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_DMA_Init+0x4c>)
{
 8000736:	b510      	push	{r4, lr}
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000738:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800073a:	f040 0004 	orr.w	r0, r0, #4
 800073e:	6498      	str	r0, [r3, #72]	; 0x48
 8000740:	6c9c      	ldr	r4, [r3, #72]	; 0x48
{
 8000742:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000744:	f004 0404 	and.w	r4, r4, #4
 8000748:	9400      	str	r4, [sp, #0]
 800074a:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800074c:	6c9c      	ldr	r4, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800074e:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000750:	430c      	orrs	r4, r1
 8000752:	649c      	str	r4, [r3, #72]	; 0x48
 8000754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000756:	400b      	ands	r3, r1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000758:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800075c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000760:	f001 f8fc 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000764:	200b      	movs	r0, #11
 8000766:	f001 f937 	bl	80019d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800076a:	200c      	movs	r0, #12
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	f001 f8f4 	bl	800195c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000774:	200c      	movs	r0, #12

}
 8000776:	b002      	add	sp, #8
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800077c:	f001 b92c 	b.w	80019d8 <HAL_NVIC_EnableIRQ>
 8000780:	40021000 	.word	0x40021000

08000784 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000784:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	2400      	movs	r4, #0
{
 8000788:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800078e:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_GPIO_Init+0x80>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	6cd9      	ldr	r1, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 8000798:	4d1b      	ldr	r5, [pc, #108]	; (8000808 <MX_GPIO_Init+0x84>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	f041 0101 	orr.w	r1, r1, #1
 800079e:	64d9      	str	r1, [r3, #76]	; 0x4c
 80007a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80007a2:	f001 0101 	and.w	r1, r1, #1
 80007a6:	9100      	str	r1, [sp, #0]
 80007a8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80007ac:	f041 0102 	orr.w	r1, r1, #2
 80007b0:	64d9      	str	r1, [r3, #76]	; 0x4c
 80007b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 80007b8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	9301      	str	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 80007bc:	21c0      	movs	r1, #192	; 0xc0
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, MUX_C_Pin|MUX_B_Pin, GPIO_PIN_RESET);
 80007c4:	f001 fcb8 	bl	8002138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin, GPIO_PIN_RESET);
 80007c8:	4622      	mov	r2, r4
 80007ca:	4628      	mov	r0, r5
 80007cc:	2101      	movs	r1, #1
 80007ce:	f001 fcb3 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80007d2:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80007d6:	22c0      	movs	r2, #192	; 0xc0
 80007d8:	2301      	movs	r3, #1
 80007da:	2700      	movs	r7, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = MUX_C_Pin|MUX_B_Pin;
 80007e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80007e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f001 fbac 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MUX_A_Pin;
 80007ec:	2201      	movs	r2, #1
 80007ee:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 80007f0:	a902      	add	r1, sp, #8
 80007f2:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = MUX_A_Pin;
 80007f4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80007f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(MUX_A_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f001 fba2 	bl	8001f44 <HAL_GPIO_Init>

}
 8000800:	b009      	add	sp, #36	; 0x24
 8000802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	48000400 	.word	0x48000400
 800080c:	00000000 	.word	0x00000000

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b510      	push	{r4, lr}
 8000812:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000814:	2238      	movs	r2, #56	; 0x38
 8000816:	2100      	movs	r1, #0
 8000818:	a806      	add	r0, sp, #24
 800081a:	f002 fbc9 	bl	8002fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081e:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	e9cd 3300 	strd	r3, r3, [sp]
 8000828:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800082c:	9304      	str	r3, [sp, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	f001 fc89 	bl	8002144 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000836:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800083a:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 14;
 800083e:	220e      	movs	r2, #14
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 14;
 8000842:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000848:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000852:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000854:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f001 fcf3 	bl	8002240 <HAL_RCC_OscConfig>
 800085a:	b108      	cbz	r0, 8000860 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800085e:	e7fe      	b.n	800085e <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8000888 <SystemClock_Config+0x78>
 8000864:	ed8d 7b00 	vstr	d7, [sp]
 8000868:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8000890 <SystemClock_Config+0x80>
 800086c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800086e:	4621      	mov	r1, r4
 8000870:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000878:	f001 ff66 	bl	8002748 <HAL_RCC_ClockConfig>
 800087c:	b108      	cbz	r0, 8000882 <SystemClock_Config+0x72>
 800087e:	b672      	cpsid	i
	while (1) {
 8000880:	e7fe      	b.n	8000880 <SystemClock_Config+0x70>
}
 8000882:	b014      	add	sp, #80	; 0x50
 8000884:	bd10      	pop	{r4, pc}
 8000886:	bf00      	nop
 8000888:	0000000f 	.word	0x0000000f
 800088c:	00000003 	.word	0x00000003
	...

08000898 <main>:
{
 8000898:	b508      	push	{r3, lr}
  HAL_Init();
 800089a:	f000 fb41 	bl	8000f20 <HAL_Init>
  SystemClock_Config();
 800089e:	f7ff ffb7 	bl	8000810 <SystemClock_Config>
  MX_GPIO_Init();
 80008a2:	f7ff ff6f 	bl	8000784 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f7ff ff45 	bl	8000734 <MX_DMA_Init>
  MX_ADC1_Init();
 80008aa:	f7ff fd49 	bl	8000340 <MX_ADC1_Init>
  MX_ADC2_Init();
 80008ae:	f7ff fd9b 	bl	80003e8 <MX_ADC2_Init>
  MX_DAC1_Init();
 80008b2:	f7ff feb3 	bl	800061c <MX_DAC1_Init>
  MX_TIM2_Init();
 80008b6:	f000 fa29 	bl	8000d0c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ba:	f000 fa61 	bl	8000d80 <MX_TIM3_Init>
	sandbox_init();
 80008be:	f000 f8e7 	bl	8000a90 <sandbox_init>
	DAC_Start();
 80008c2:	f7ff ff1b 	bl	80006fc <DAC_Start>
	ADC1_Start();
 80008c6:	f7ff fe95 	bl	80005f4 <ADC1_Start>
	ADC2_Start();
 80008ca:	f7ff fe9d 	bl	8000608 <ADC2_Start>
	TIM2_Start();
 80008ce:	f000 facb 	bl	8000e68 <TIM2_Start>
	TIM3_Start();
 80008d2:	f000 facf 	bl	8000e74 <TIM3_Start>
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008d6:	4907      	ldr	r1, [pc, #28]	; (80008f4 <main+0x5c>)
	DWT->CYCCNT = 0;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <main+0x60>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008da:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
	DWT->CYCCNT = 0;
 80008de:	2000      	movs	r0, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80008e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008e4:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
	DWT->CYCCNT = 0;
 80008e8:	6058      	str	r0, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f042 0201 	orr.w	r2, r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
	while (1) {
 80008f2:	e7fe      	b.n	80008f2 <main+0x5a>
 80008f4:	e000ed00 	.word	0xe000ed00
 80008f8:	e0001000 	.word	0xe0001000

080008fc <HAL_ADC_ConvCpltCallback>:
	if (hadc->Instance == ADC1) {
 80008fc:	6803      	ldr	r3, [r0, #0]
 80008fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000902:	d000      	beq.n	8000906 <HAL_ADC_ConvCpltCallback+0xa>
 8000904:	4770      	bx	lr
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000906:	b510      	push	{r4, lr}
		ADC1_channel_data[mux_channel++] = ADC1_raw_data;
 8000908:	4c14      	ldr	r4, [pc, #80]	; (800095c <HAL_ADC_ConvCpltCallback+0x60>)
 800090a:	4915      	ldr	r1, [pc, #84]	; (8000960 <HAL_ADC_ConvCpltCallback+0x64>)
 800090c:	7823      	ldrb	r3, [r4, #0]
		HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin,
 800090e:	4815      	ldr	r0, [pc, #84]	; (8000964 <HAL_ADC_ConvCpltCallback+0x68>)
		ADC1_channel_data[mux_channel++] = ADC1_raw_data;
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	7022      	strb	r2, [r4, #0]
 8000916:	880a      	ldrh	r2, [r1, #0]
 8000918:	4913      	ldr	r1, [pc, #76]	; (8000968 <HAL_ADC_ConvCpltCallback+0x6c>)
 800091a:	b2db      	uxtb	r3, r3
 800091c:	b292      	uxth	r2, r2
 800091e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		if (mux_channel > (NUM_ADC1_CHANNELS-1)) {
 8000922:	7823      	ldrb	r3, [r4, #0]
 8000924:	2b03      	cmp	r3, #3
			mux_channel = 0;
 8000926:	bf84      	itt	hi
 8000928:	2300      	movhi	r3, #0
 800092a:	7023      	strbhi	r3, [r4, #0]
				(GPIO_PinState) (mux_channel & 1));
 800092c:	7822      	ldrb	r2, [r4, #0]
		HAL_GPIO_WritePin(MUX_A_GPIO_Port, MUX_A_Pin,
 800092e:	2101      	movs	r1, #1
 8000930:	f002 0201 	and.w	r2, r2, #1
 8000934:	f001 fc00 	bl	8002138 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_B_GPIO_Port, MUX_B_Pin,
 8000938:	7822      	ldrb	r2, [r4, #0]
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f001 fbf8 	bl	8002138 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin,
 8000948:	7822      	ldrb	r2, [r4, #0]
 800094a:	2140      	movs	r1, #64	; 0x40
}
 800094c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(MUX_C_GPIO_Port, MUX_C_Pin,
 8000950:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f001 bbee 	b.w	8002138 <HAL_GPIO_WritePin>
 800095c:	20000214 	.word	0x20000214
 8000960:	20000128 	.word	0x20000128
 8000964:	48000400 	.word	0x48000400
 8000968:	2000018c 	.word	0x2000018c

0800096c <Error_Handler>:
 800096c:	b672      	cpsid	i
	while (1) {
 800096e:	e7fe      	b.n	800096e <Error_Handler+0x2>

08000970 <control_tick>:

	return signal_output;

}

void control_tick(reverb_params_typedef *params, float _input) {
 8000970:	b538      	push	{r3, r4, r5, lr}
	hp_cutoff_pot += ((float_expo_table[params->hp_cutoff]) - hp_cutoff_pot) * 0.03f;
 8000972:	4a39      	ldr	r2, [pc, #228]	; (8000a58 <control_tick+0xe8>)
 8000974:	8803      	ldrh	r3, [r0, #0]
 8000976:	4939      	ldr	r1, [pc, #228]	; (8000a5c <control_tick+0xec>)
 8000978:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000a60 <control_tick+0xf0>
 800097c:	ed91 6a00 	vldr	s12, [r1]
 8000980:	edd1 7a00 	vldr	s15, [r1]
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 8000984:	4c37      	ldr	r4, [pc, #220]	; (8000a64 <control_tick+0xf4>)
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 8000986:	eddf 5a38 	vldr	s11, [pc, #224]	; 8000a68 <control_tick+0xf8>
 800098a:	4d38      	ldr	r5, [pc, #224]	; (8000a6c <control_tick+0xfc>)
 800098c:	ed9f 4a38 	vldr	s8, [pc, #224]	; 8000a70 <control_tick+0x100>
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 8000990:	eddf 4a38 	vldr	s9, [pc, #224]	; 8000a74 <control_tick+0x104>

	if(lp_cutoff_pot > 0.9999f) {
 8000994:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8000a78 <control_tick+0x108>
	hp_cutoff_pot += ((float_expo_table[params->hp_cutoff]) - hp_cutoff_pot) * 0.03f;
 8000998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800099c:	edd3 6a00 	vldr	s13, [r3]
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 80009a0:	8843      	ldrh	r3, [r0, #2]
	hp_cutoff_pot += ((float_expo_table[params->hp_cutoff]) - hp_cutoff_pot) * 0.03f;
 80009a2:	ee76 6ac6 	vsub.f32	s13, s13, s12
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 80009a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	hp_cutoff_pot += ((float_expo_table[params->hp_cutoff]) - hp_cutoff_pot) * 0.03f;
 80009aa:	eee6 7a87 	vfma.f32	s15, s13, s14
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 80009ae:	ed93 6a00 	vldr	s12, [r3]
	hp_cutoff_pot += ((float_expo_table[params->hp_cutoff]) - hp_cutoff_pot) * 0.03f;
 80009b2:	edc1 7a00 	vstr	s15, [r1]
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 80009b6:	edd4 6a00 	vldr	s13, [r4]
 80009ba:	eddf 7a30 	vldr	s15, [pc, #192]	; 8000a7c <control_tick+0x10c>
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009be:	88c3      	ldrh	r3, [r0, #6]
	lp_cutoff_pot += ((float_expo_table[params->lp_cutoff] * 1.05f) - lp_cutoff_pot) * 0.03f;
 80009c0:	eed6 6a27 	vfnms.f32	s13, s12, s15
 80009c4:	edd4 7a00 	vldr	s15, [r4]
 80009c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80009cc:	edc4 7a00 	vstr	s15, [r4]
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009d0:	ee07 3a90 	vmov	s15, r3
 80009d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 80009d8:	8883      	ldrh	r3, [r0, #4]
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009da:	edd5 3a00 	vldr	s7, [r5]
 80009de:	edd5 6a00 	vldr	s13, [r5]
		lp_cutoff_pot = 0.9999f;
	}

	svf_set_a_direct(&feedback_highpass, hp_cutoff_pot * 0.7f);
 80009e2:	4827      	ldr	r0, [pc, #156]	; (8000a80 <control_tick+0x110>)
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 80009e8:	ee06 3a10 	vmov	s12, r3
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 80009f0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 80009f4:	ee17 3a90 	vmov	r3, s15
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80009fe:	edd2 5a66 	vldr	s11, [r2, #408]	; 0x198
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 8000a02:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <control_tick+0x114>)
	size_pot += ((float_expo_table[(uint16_t) (params->size * SIZE_POT_SCALE) + SIZE_POT_OFFSET]) - size_pot) * 0.001f;
 8000a04:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8000a08:	eef0 7a66 	vmov.f32	s15, s13
 8000a0c:	eee5 7a84 	vfma.f32	s15, s11, s8
 8000a10:	edc5 7a00 	vstr	s15, [r5]
	feedback_pot += ((params->feedback / -1024.0f) - feedback_pot) * 0.03f;
 8000a14:	edd3 6a00 	vldr	s13, [r3]
 8000a18:	edd3 7a00 	vldr	s15, [r3]
 8000a1c:	eed6 6a24 	vfnms.f32	s13, s12, s9
 8000a20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000a24:	edc3 7a00 	vstr	s15, [r3]
	if(lp_cutoff_pot > 0.9999f) {
 8000a28:	edd4 7a00 	vldr	s15, [r4]
 8000a2c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8000a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		lp_cutoff_pot = 0.9999f;
 8000a34:	bfc8      	it	gt
 8000a36:	ed84 5a00 	vstrgt	s10, [r4]
	svf_set_a_direct(&feedback_highpass, hp_cutoff_pot * 0.7f);
 8000a3a:	ed91 0a00 	vldr	s0, [r1]
 8000a3e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8000a88 <control_tick+0x118>
 8000a42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000a46:	f7ff fc29 	bl	800029c <svf_set_a_direct>
	svf_set_a_direct(&feedback_lowpass, lp_cutoff_pot);
 8000a4a:	ed94 0a00 	vldr	s0, [r4]
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <control_tick+0x11c>)
}
 8000a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	svf_set_a_direct(&feedback_lowpass, lp_cutoff_pot);
 8000a54:	f7ff bc22 	b.w	800029c <svf_set_a_direct>
 8000a58:	080032b0 	.word	0x080032b0
 8000a5c:	20000258 	.word	0x20000258
 8000a60:	3cf5c28f 	.word	0x3cf5c28f
 8000a64:	20000210 	.word	0x20000210
 8000a68:	3f666666 	.word	0x3f666666
 8000a6c:	20000208 	.word	0x20000208
 8000a70:	3a83126f 	.word	0x3a83126f
 8000a74:	ba800000 	.word	0xba800000
 8000a78:	3f7ff972 	.word	0x3f7ff972
 8000a7c:	3f866666 	.word	0x3f866666
 8000a80:	2000030c 	.word	0x2000030c
 8000a84:	2000020c 	.word	0x2000020c
 8000a88:	3f333333 	.word	0x3f333333
 8000a8c:	200002c4 	.word	0x200002c4

08000a90 <sandbox_init>:

void sandbox_init() {
 8000a90:	b508      	push	{r3, lr}
	// delays
	shared_delay_init(&d_mgr, shared_buf, SHARED_BUF_SIZE);
 8000a92:	f643 2298 	movw	r2, #15000	; 0x3a98
 8000a96:	492e      	ldr	r1, [pc, #184]	; (8000b50 <sandbox_init+0xc0>)
 8000a98:	482e      	ldr	r0, [pc, #184]	; (8000b54 <sandbox_init+0xc4>)
 8000a9a:	f7ff fc47 	bl	800032c <shared_delay_init>

	// filtas
	svf_init(&input_lowpass, LP_INPUT_CUTOFF, 0.707f);
 8000a9e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8000b58 <sandbox_init+0xc8>
 8000aa2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8000b5c <sandbox_init+0xcc>
 8000aa6:	482e      	ldr	r0, [pc, #184]	; (8000b60 <sandbox_init+0xd0>)
 8000aa8:	f7ff fbb6 	bl	8000218 <svf_init>
	svf_init(&input_highpass, HP_INPUT_CUTOFF, 0.707f);
 8000aac:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8000b58 <sandbox_init+0xc8>
 8000ab0:	482c      	ldr	r0, [pc, #176]	; (8000b64 <sandbox_init+0xd4>)
 8000ab2:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000ab6:	f7ff fbaf 	bl	8000218 <svf_init>
	svf_init(&feedback_lowpass, LP_FEEDBACK_CUTOFF, 0.8f);
 8000aba:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8000b68 <sandbox_init+0xd8>
 8000abe:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8000b6c <sandbox_init+0xdc>
 8000ac2:	482b      	ldr	r0, [pc, #172]	; (8000b70 <sandbox_init+0xe0>)
 8000ac4:	f7ff fba8 	bl	8000218 <svf_init>
	svf_init(&feedback_highpass, HP_FEEDBACK_CUTOFF, 0.8f);
 8000ac8:	eddf 0a27 	vldr	s1, [pc, #156]	; 8000b68 <sandbox_init+0xd8>
 8000acc:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000b74 <sandbox_init+0xe4>
 8000ad0:	4829      	ldr	r0, [pc, #164]	; (8000b78 <sandbox_init+0xe8>)
 8000ad2:	f7ff fba1 	bl	8000218 <svf_init>

	// dithering filtas
	svf_init(&svf1, 30000.0f, 0.7f);
 8000ad6:	eddf 0a29 	vldr	s1, [pc, #164]	; 8000b7c <sandbox_init+0xec>
 8000ada:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000b80 <sandbox_init+0xf0>
 8000ade:	4829      	ldr	r0, [pc, #164]	; (8000b84 <sandbox_init+0xf4>)
 8000ae0:	f7ff fb9a 	bl	8000218 <svf_init>
	svf_init(&svf2, 30000.0f, 0.7f);
 8000ae4:	eddf 0a25 	vldr	s1, [pc, #148]	; 8000b7c <sandbox_init+0xec>
 8000ae8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8000b80 <sandbox_init+0xf0>
 8000aec:	4826      	ldr	r0, [pc, #152]	; (8000b88 <sandbox_init+0xf8>)
 8000aee:	f7ff fb93 	bl	8000218 <svf_init>
	svf_init(&svf3, 8000.0f, 0.8f);
 8000af2:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8000b68 <sandbox_init+0xd8>
 8000af6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000b5c <sandbox_init+0xcc>
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <sandbox_init+0xfc>)
 8000afc:	f7ff fb8c 	bl	8000218 <svf_init>

	// check for wild boy delay times
	total_time = 0;
	for (uint8_t i = 0; i < NUM_INPUT_APS; i++) {
		total_time += input_times[i];
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <sandbox_init+0x100>)
	}
	for (uint8_t i = 0; i < NUM_LOOP_APS; i++) {
		total_time += loop_times[i];
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <sandbox_init+0x104>)
		total_time += input_times[i];
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	edd3 6a01 	vldr	s13, [r3, #4]
 8000b0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b14:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <sandbox_init+0x108>)
 8000b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
		total_time += loop_times[i];
 8000b1e:	ed92 7a00 	vldr	s14, [r2]
		total_time += input_times[i];
 8000b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
		total_time += loop_times[i];
 8000b26:	edd2 6a01 	vldr	s13, [r2, #4]
 8000b2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000b2e:	ed92 7a02 	vldr	s14, [r2, #8]
 8000b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000b36:	ee77 7a87 	vadd.f32	s15, s15, s14
	}

	if (total_time > MAX_MS_DELAY) {
 8000b3a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000b9c <sandbox_init+0x10c>
 8000b3e:	edc3 7a00 	vstr	s15, [r3]
 8000b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4a:	dc00      	bgt.n	8000b4e <sandbox_init+0xbe>
		while (1) {
			//chill out here
		}
	}
}
 8000b4c:	bd08      	pop	{r3, pc}
		while (1) {
 8000b4e:	e7fe      	b.n	8000b4e <sandbox_init+0xbe>
 8000b50:	20000380 	.word	0x20000380
 8000b54:	2000032c 	.word	0x2000032c
 8000b58:	3f34fdf4 	.word	0x3f34fdf4
 8000b5c:	45fa0000 	.word	0x45fa0000
 8000b60:	20000360 	.word	0x20000360
 8000b64:	2000025c 	.word	0x2000025c
 8000b68:	3f4ccccd 	.word	0x3f4ccccd
 8000b6c:	451c4000 	.word	0x451c4000
 8000b70:	200002c4 	.word	0x200002c4
 8000b74:	437a0000 	.word	0x437a0000
 8000b78:	2000030c 	.word	0x2000030c
 8000b7c:	3f333333 	.word	0x3f333333
 8000b80:	46ea6000 	.word	0x46ea6000
 8000b84:	20000340 	.word	0x20000340
 8000b88:	200002e8 	.word	0x200002e8
 8000b8c:	2000027c 	.word	0x2000027c
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000010 	.word	0x20000010
 8000b98:	2000029c 	.word	0x2000029c
 8000b9c:	43ea6000 	.word	0x43ea6000

08000ba0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x30>)
 8000ba2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba4:	f042 0201 	orr.w	r2, r2, #1
 8000ba8:	661a      	str	r2, [r3, #96]	; 0x60
 8000baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8000bac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	f002 0201 	and.w	r2, r2, #1
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8000bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bca:	f001 bb31 	b.w	8002230 <HAL_PWREx_DisableUCPDDeadBattery>
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler>
 8000bd6:	bf00      	nop

08000bd8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <HardFault_Handler>
 8000bda:	bf00      	nop

08000bdc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler>
 8000bde:	bf00      	nop

08000be0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <BusFault_Handler>
 8000be2:	bf00      	nop

08000be4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler>
 8000be6:	bf00      	nop

08000be8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <DebugMon_Handler>:
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <PendSV_Handler>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 b9a4 	b.w	8000f40 <HAL_IncTick>

08000bf8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000bf8:	4801      	ldr	r0, [pc, #4]	; (8000c00 <DMA1_Channel1_IRQHandler+0x8>)
 8000bfa:	f001 b955 	b.w	8001ea8 <HAL_DMA_IRQHandler>
 8000bfe:	bf00      	nop
 8000c00:	20000194 	.word	0x20000194

08000c04 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c04:	4801      	ldr	r0, [pc, #4]	; (8000c0c <DMA1_Channel2_IRQHandler+0x8>)
 8000c06:	f001 b94f 	b.w	8001ea8 <HAL_DMA_IRQHandler>
 8000c0a:	bf00      	nop
 8000c0c:	2000012c 	.word	0x2000012c

08000c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c10:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	tim2_tick_end = DWT->CYCCNT;
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8000c12:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <TIM2_IRQHandler+0x6c>)
	tim2_tick_end = DWT->CYCCNT;
 8000c14:	4c1a      	ldr	r4, [pc, #104]	; (8000c80 <TIM2_IRQHandler+0x70>)
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8000c16:	6810      	ldr	r0, [r2, #0]
	tim2_tick_end = DWT->CYCCNT;
 8000c18:	6863      	ldr	r3, [r4, #4]
 8000c1a:	4d1a      	ldr	r5, [pc, #104]	; (8000c84 <TIM2_IRQHandler+0x74>)
	tim2_tick_start = DWT->CYCCNT;

	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000c1c:	491a      	ldr	r1, [pc, #104]	; (8000c88 <TIM2_IRQHandler+0x78>)
	tim2_tick_end = DWT->CYCCNT;
 8000c1e:	602b      	str	r3, [r5, #0]
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8000c20:	1a1b      	subs	r3, r3, r0
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <TIM2_IRQHandler+0x7c>)
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000c24:	6809      	ldr	r1, [r1, #0]
	tim2_ticks = tim2_tick_end - tim2_tick_start;
 8000c26:	6003      	str	r3, [r0, #0]
	tim2_tick_start = DWT->CYCCNT;
 8000c28:	6860      	ldr	r0, [r4, #4]
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000c2a:	690b      	ldr	r3, [r1, #16]
	tim2_tick_start = DWT->CYCCNT;
 8000c2c:	6010      	str	r0, [r2, #0]
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000c2e:	07da      	lsls	r2, r3, #31
 8000c30:	d502      	bpl.n	8000c38 <TIM2_IRQHandler+0x28>
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8000c32:	68cb      	ldr	r3, [r1, #12]
 8000c34:	07db      	lsls	r3, r3, #31
 8000c36:	d400      	bmi.n	8000c3a <TIM2_IRQHandler+0x2a>
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
#endif

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c38:	bd38      	pop	{r3, r4, r5, pc}
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000c3a:	f06f 0201 	mvn.w	r2, #1
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sandbox_tick(ADC2_raw_data - 2047) + 2047);
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <TIM2_IRQHandler+0x80>)
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000c40:	610a      	str	r2, [r1, #16]
			uint32_t temp_ticks = DWT->CYCCNT;
 8000c42:	6865      	ldr	r5, [r4, #4]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, sandbox_tick(ADC2_raw_data - 2047) + 2047);
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8000c4c:	ee00 3a10 	vmov	s0, r3
 8000c50:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000c54:	f002 fa54 	bl	8003100 <sandbox_tick>
 8000c58:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000c94 <TIM2_IRQHandler+0x84>
 8000c5c:	480e      	ldr	r0, [pc, #56]	; (8000c98 <TIM2_IRQHandler+0x88>)
 8000c5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8000c62:	2200      	movs	r2, #0
 8000c64:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000c68:	4611      	mov	r1, r2
 8000c6a:	ee17 3a90 	vmov	r3, s15
 8000c6e:	f000 ff27 	bl	8001ac0 <HAL_DAC_SetValue>
			sandbox_ticks = DWT->CYCCNT - temp_ticks;
 8000c72:	6863      	ldr	r3, [r4, #4]
 8000c74:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <TIM2_IRQHandler+0x8c>)
 8000c76:	1b5b      	subs	r3, r3, r5
 8000c78:	6013      	str	r3, [r2, #0]
}
 8000c7a:	bd38      	pop	{r3, r4, r5, pc}
 8000c7c:	200078bc 	.word	0x200078bc
 8000c80:	e0001000 	.word	0xe0001000
 8000c84:	200078dc 	.word	0x200078dc
 8000c88:	2000792c 	.word	0x2000792c
 8000c8c:	200078c4 	.word	0x200078c4
 8000c90:	2000012a 	.word	0x2000012a
 8000c94:	44ffe000 	.word	0x44ffe000
 8000c98:	200001f4 	.word	0x200001f4
 8000c9c:	200078b4 	.word	0x200078b4

08000ca0 <TIM3_IRQHandler>:
  */
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) {
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <TIM3_IRQHandler+0x4c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	07d1      	lsls	r1, r2, #31
 8000ca8:	d502      	bpl.n	8000cb0 <TIM3_IRQHandler+0x10>
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) != RESET) {
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	07d2      	lsls	r2, r2, #31
 8000cae:	d400      	bmi.n	8000cb2 <TIM3_IRQHandler+0x12>
 8000cb0:	4770      	bx	lr
{
 8000cb2:	b500      	push	{lr}
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);

			reverb_params_typedef params;

			params.hp_cutoff = ADC1_channel_data[HP_POT_INDEX];
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <TIM3_IRQHandler+0x50>)
			params.lp_cutoff = ADC1_channel_data[LP_POT_INDEX];
			params.size = ADC1_channel_data[SIZE_POT_INDEX];
			params.feedback = ADC1_channel_data[FB_POT_INDEX];

			control_tick(&params, 0);
 8000cb6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000cf4 <TIM3_IRQHandler+0x54>
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000cba:	f06f 0101 	mvn.w	r1, #1
{
 8000cbe:	b083      	sub	sp, #12
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8000cc0:	6119      	str	r1, [r3, #16]
			params.hp_cutoff = ADC1_channel_data[HP_POT_INDEX];
 8000cc2:	f8b2 e000 	ldrh.w	lr, [r2]
			params.lp_cutoff = ADC1_channel_data[LP_POT_INDEX];
 8000cc6:	f8b2 c004 	ldrh.w	ip, [r2, #4]
			params.size = ADC1_channel_data[SIZE_POT_INDEX];
 8000cca:	8851      	ldrh	r1, [r2, #2]
			params.feedback = ADC1_channel_data[FB_POT_INDEX];
 8000ccc:	88d3      	ldrh	r3, [r2, #6]
			params.hp_cutoff = ADC1_channel_data[HP_POT_INDEX];
 8000cce:	f8ad e000 	strh.w	lr, [sp]
			control_tick(&params, 0);
 8000cd2:	4668      	mov	r0, sp
			params.lp_cutoff = ADC1_channel_data[LP_POT_INDEX];
 8000cd4:	f8ad c002 	strh.w	ip, [sp, #2]
			params.size = ADC1_channel_data[SIZE_POT_INDEX];
 8000cd8:	f8ad 1006 	strh.w	r1, [sp, #6]
			params.feedback = ADC1_channel_data[FB_POT_INDEX];
 8000cdc:	f8ad 3004 	strh.w	r3, [sp, #4]
			control_tick(&params, 0);
 8000ce0:	f7ff fe46 	bl	8000970 <control_tick>
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
#endif

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ce4:	b003      	add	sp, #12
 8000ce6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cea:	bf00      	nop
 8000cec:	200078e0 	.word	0x200078e0
 8000cf0:	2000018c 	.word	0x2000018c
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <SystemInit+0x10>)
 8000cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d0c:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	481b      	ldr	r0, [pc, #108]	; (8000d7c <MX_TIM2_Init+0x70>)
{
 8000d10:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 8000d12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8000d18:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1700;
 8000d1a:	f240 62a4 	movw	r2, #1700	; 0x6a4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d1e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000d22:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d26:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d32:	9303      	str	r3, [sp, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d36:	f001 ff5d 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000d3a:	b998      	cbnz	r0, 8000d64 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d40:	480e      	ldr	r0, [pc, #56]	; (8000d7c <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d44:	a904      	add	r1, sp, #16
 8000d46:	f002 f817 	bl	8002d78 <HAL_TIM_ConfigClockSource>
 8000d4a:	b998      	cbnz	r0, 8000d74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d4c:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <MX_TIM2_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d52:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d54:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d56:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d58:	f002 f8e0 	bl	8002f1c <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	b928      	cbnz	r0, 8000d6a <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5e:	b009      	add	sp, #36	; 0x24
 8000d60:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d64:	f7ff fe02 	bl	800096c <Error_Handler>
 8000d68:	e7e8      	b.n	8000d3c <MX_TIM2_Init+0x30>
    Error_Handler();
 8000d6a:	f7ff fdff 	bl	800096c <Error_Handler>
}
 8000d6e:	b009      	add	sp, #36	; 0x24
 8000d70:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d74:	f7ff fdfa 	bl	800096c <Error_Handler>
 8000d78:	e7e8      	b.n	8000d4c <MX_TIM2_Init+0x40>
 8000d7a:	bf00      	nop
 8000d7c:	2000792c 	.word	0x2000792c

08000d80 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d80:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d82:	481a      	ldr	r0, [pc, #104]	; (8000dec <MX_TIM3_Init+0x6c>)
 8000d84:	4a1a      	ldr	r2, [pc, #104]	; (8000df0 <MX_TIM3_Init+0x70>)
 8000d86:	6002      	str	r2, [r0, #0]
{
 8000d88:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 8000;
 8000d8c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d90:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000d94:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	9303      	str	r3, [sp, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da8:	f001 ff24 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000dac:	b998      	cbnz	r0, 8000dd6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	; (8000dec <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000db6:	a904      	add	r1, sp, #16
 8000db8:	f001 ffde 	bl	8002d78 <HAL_TIM_ConfigClockSource>
 8000dbc:	b998      	cbnz	r0, 8000de6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dbe:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc2:	480a      	ldr	r0, [pc, #40]	; (8000dec <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dc4:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dca:	f002 f8a7 	bl	8002f1c <HAL_TIMEx_MasterConfigSynchronization>
 8000dce:	b928      	cbnz	r0, 8000ddc <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd0:	b009      	add	sp, #36	; 0x24
 8000dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000dd6:	f7ff fdc9 	bl	800096c <Error_Handler>
 8000dda:	e7e8      	b.n	8000dae <MX_TIM3_Init+0x2e>
    Error_Handler();
 8000ddc:	f7ff fdc6 	bl	800096c <Error_Handler>
}
 8000de0:	b009      	add	sp, #36	; 0x24
 8000de2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000de6:	f7ff fdc1 	bl	800096c <Error_Handler>
 8000dea:	e7e8      	b.n	8000dbe <MX_TIM3_Init+0x3e>
 8000dec:	200078e0 	.word	0x200078e0
 8000df0:	40000400 	.word	0x40000400

08000df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000df4:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM2)
 8000df6:	6803      	ldr	r3, [r0, #0]
 8000df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8000dfc:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM2)
 8000dfe:	d005      	beq.n	8000e0c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_TIM_Base_MspInit+0x6c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d018      	beq.n	8000e38 <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e06:	b003      	add	sp, #12
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e10:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e12:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8000e14:	f041 0101 	orr.w	r1, r1, #1
 8000e18:	6599      	str	r1, [r3, #88]	; 0x58
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	201c      	movs	r0, #28
 8000e24:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e28:	f000 fd98 	bl	800195c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
}
 8000e2e:	b003      	add	sp, #12
 8000e30:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e34:	f000 bdd0 	b.w	80019d8 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e38:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_TIM_Base_MspInit+0x70>)
 8000e3a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8000e3c:	f041 0102 	orr.w	r1, r1, #2
 8000e40:	6599      	str	r1, [r3, #88]	; 0x58
 8000e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000e44:	2102      	movs	r1, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e46:	400b      	ands	r3, r1
 8000e48:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000e4a:	201d      	movs	r0, #29
 8000e4c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8000e50:	f000 fd84 	bl	800195c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e54:	201d      	movs	r0, #29
}
 8000e56:	b003      	add	sp, #12
 8000e58:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e5c:	f000 bdbc 	b.w	80019d8 <HAL_NVIC_EnableIRQ>
 8000e60:	40000400 	.word	0x40000400
 8000e64:	40021000 	.word	0x40021000

08000e68 <TIM2_Start>:
}

/* USER CODE BEGIN 1 */

void TIM2_Start() {
	HAL_TIM_Base_Start_IT(&htim2);
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <TIM2_Start+0x8>)
 8000e6a:	f001 bf4b 	b.w	8002d04 <HAL_TIM_Base_Start_IT>
 8000e6e:	bf00      	nop
 8000e70:	2000792c 	.word	0x2000792c

08000e74 <TIM3_Start>:
}

void TIM3_Start() {
	HAL_TIM_Base_Start_IT(&htim3);
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <TIM3_Start+0x8>)
 8000e76:	f001 bf45 	b.w	8002d04 <HAL_TIM_Base_Start_IT>
 8000e7a:	bf00      	nop
 8000e7c:	200078e0 	.word	0x200078e0

08000e80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopForever+0xe>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopForever+0x16>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eaa:	f7ff ff25 	bl	8000cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f002 f887 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eb2:	f7ff fcf1 	bl	8000898 <main>

08000eb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000eb6:	e7fe      	b.n	8000eb6 <LoopForever>
  ldr   r0, =_estack
 8000eb8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000ec4:	08004ac8 	.word	0x08004ac8
  ldr r2, =_sbss
 8000ec8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000ecc:	2000797c 	.word	0x2000797c

08000ed0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC1_2_IRQHandler>
	...

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_InitTick+0x40>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	b90b      	cbnz	r3, 8000ee0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000edc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee0:	490d      	ldr	r1, [pc, #52]	; (8000f18 <HAL_InitTick+0x44>)
 8000ee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee6:	4605      	mov	r5, r0
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	6808      	ldr	r0, [r1, #0]
 8000eee:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ef2:	f000 fd7f 	bl	80019f4 <HAL_SYSTICK_Config>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1ef      	bne.n	8000edc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efc:	2d0f      	cmp	r5, #15
 8000efe:	d8ed      	bhi.n	8000edc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f00:	4602      	mov	r2, r0
 8000f02:	4629      	mov	r1, r5
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f08:	f000 fd28 	bl	800195c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_InitTick+0x48>)
 8000f0e:	4620      	mov	r0, r4
 8000f10:	601d      	str	r5, [r3, #0]
}
 8000f12:	bd38      	pop	{r3, r4, r5, pc}
 8000f14:	20000020 	.word	0x20000020
 8000f18:	2000001c 	.word	0x2000001c
 8000f1c:	20000024 	.word	0x20000024

08000f20 <HAL_Init>:
{
 8000f20:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 fd08 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f7ff ffd3 	bl	8000ed4 <HAL_InitTick>
 8000f2e:	b110      	cbz	r0, 8000f36 <HAL_Init+0x16>
    status = HAL_ERROR;
 8000f30:	2401      	movs	r4, #1
}
 8000f32:	4620      	mov	r0, r4
 8000f34:	bd10      	pop	{r4, pc}
 8000f36:	4604      	mov	r4, r0
    HAL_MspInit();
 8000f38:	f7ff fe32 	bl	8000ba0 <HAL_MspInit>
}
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	bd10      	pop	{r4, pc}

08000f40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_IncTick+0x10>)
 8000f42:	4904      	ldr	r1, [pc, #16]	; (8000f54 <HAL_IncTick+0x14>)
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	6809      	ldr	r1, [r1, #0]
 8000f48:	440b      	add	r3, r1
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20007978 	.word	0x20007978
 8000f54:	20000020 	.word	0x20000020

08000f58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f58:	4b01      	ldr	r3, [pc, #4]	; (8000f60 <HAL_GetTick+0x8>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20007978 	.word	0x20007978

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b538      	push	{r3, r4, r5, lr}
 8000f66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff fff6 	bl	8000f58 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f6e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000f70:	d002      	beq.n	8000f78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_Delay+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	1b43      	subs	r3, r0, r5
 8000f7e:	42a3      	cmp	r3, r4
 8000f80:	d3fa      	bcc.n	8000f78 <HAL_Delay+0x14>
  {
  }
}
 8000f82:	bd38      	pop	{r3, r4, r5, pc}
 8000f84:	20000020 	.word	0x20000020

08000f88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f88:	b530      	push	{r4, r5, lr}
 8000f8a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 80c9 	beq.w	8001128 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f96:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8000f98:	4604      	mov	r4, r0
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	f000 8092 	beq.w	80010c4 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fa0:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fa2:	6893      	ldr	r3, [r2, #8]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	d505      	bpl.n	8000fb4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000fa8:	6893      	ldr	r3, [r2, #8]
 8000faa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fb2:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fb4:	6893      	ldr	r3, [r2, #8]
 8000fb6:	00dd      	lsls	r5, r3, #3
 8000fb8:	d419      	bmi.n	8000fee <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fba:	4b70      	ldr	r3, [pc, #448]	; (800117c <HAL_ADC_Init+0x1f4>)
 8000fbc:	4870      	ldr	r0, [pc, #448]	; (8001180 <HAL_ADC_Init+0x1f8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8000fc0:	6891      	ldr	r1, [r2, #8]
 8000fc2:	099b      	lsrs	r3, r3, #6
 8000fc4:	fba0 0303 	umull	r0, r3, r0, r3
 8000fc8:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8000fcc:	099b      	lsrs	r3, r3, #6
 8000fce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fda:	6091      	str	r1, [r2, #8]
 8000fdc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000fde:	9b01      	ldr	r3, [sp, #4]
 8000fe0:	b12b      	cbz	r3, 8000fee <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8000fe2:	9b01      	ldr	r3, [sp, #4]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8000fe8:	9b01      	ldr	r3, [sp, #4]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f9      	bne.n	8000fe2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fee:	6893      	ldr	r3, [r2, #8]
 8000ff0:	00d8      	lsls	r0, r3, #3
 8000ff2:	d459      	bmi.n	80010a8 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ff4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000ff6:	f043 0310 	orr.w	r3, r3, #16
 8000ffa:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffc:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001000:	4303      	orrs	r3, r0
 8001002:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001004:	6893      	ldr	r3, [r2, #8]
 8001006:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800100a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800100c:	d153      	bne.n	80010b6 <HAL_ADC_Init+0x12e>
 800100e:	06d9      	lsls	r1, r3, #27
 8001010:	d451      	bmi.n	80010b6 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001014:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800101e:	6893      	ldr	r3, [r2, #8]
 8001020:	07db      	lsls	r3, r3, #31
 8001022:	d40e      	bmi.n	8001042 <HAL_ADC_Init+0xba>
 8001024:	4b57      	ldr	r3, [pc, #348]	; (8001184 <HAL_ADC_Init+0x1fc>)
 8001026:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 800102a:	6889      	ldr	r1, [r1, #8]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	430b      	orrs	r3, r1
 8001030:	07dd      	lsls	r5, r3, #31
 8001032:	d406      	bmi.n	8001042 <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001034:	4954      	ldr	r1, [pc, #336]	; (8001188 <HAL_ADC_Init+0x200>)
 8001036:	6865      	ldr	r5, [r4, #4]
 8001038:	688b      	ldr	r3, [r1, #8]
 800103a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800103e:	432b      	orrs	r3, r5
 8001040:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001042:	68e5      	ldr	r5, [r4, #12]
 8001044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001046:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 800104a:	432b      	orrs	r3, r5
 800104c:	68a5      	ldr	r5, [r4, #8]
 800104e:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001050:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001052:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8001054:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001058:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800105c:	d05f      	beq.n	800111e <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800105e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001060:	b121      	cbz	r1, 800106c <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001062:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001064:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001068:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800106a:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800106c:	68d5      	ldr	r5, [r2, #12]
 800106e:	4947      	ldr	r1, [pc, #284]	; (800118c <HAL_ADC_Init+0x204>)
 8001070:	4029      	ands	r1, r5
 8001072:	4319      	orrs	r1, r3
 8001074:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001076:	6913      	ldr	r3, [r2, #16]
 8001078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800107a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800107e:	430b      	orrs	r3, r1
 8001080:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001082:	6893      	ldr	r3, [r2, #8]
 8001084:	0759      	lsls	r1, r3, #29
 8001086:	d523      	bpl.n	80010d0 <HAL_ADC_Init+0x148>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001088:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800108a:	6963      	ldr	r3, [r4, #20]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d04e      	beq.n	800112e <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001090:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001092:	f023 030f 	bic.w	r3, r3, #15
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001098:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800109a:	f023 0303 	bic.w	r3, r3, #3
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80010a4:	b003      	add	sp, #12
 80010a6:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010a8:	6893      	ldr	r3, [r2, #8]
 80010aa:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ae:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80010b4:	d0ab      	beq.n	800100e <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80010b8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80010c0:	b003      	add	sp, #12
 80010c2:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80010c4:	f7ff f9d6 	bl	8000474 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80010ca:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80010ce:	e767      	b.n	8000fa0 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010d0:	6893      	ldr	r3, [r2, #8]
 80010d2:	071b      	lsls	r3, r3, #28
 80010d4:	d4d9      	bmi.n	800108a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010d6:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010d8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010dc:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010de:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010e2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010e4:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010e8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010ec:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80010ee:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010f0:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80010f2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80010f4:	bb19      	cbnz	r1, 800113e <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80010f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fa:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80010fc:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001100:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001108:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 800110c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001110:	2b01      	cmp	r3, #1
 8001112:	d021      	beq.n	8001158 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001114:	6913      	ldr	r3, [r2, #16]
 8001116:	f023 0301 	bic.w	r3, r3, #1
 800111a:	6113      	str	r3, [r2, #16]
 800111c:	e7b5      	b.n	800108a <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800111e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001120:	3901      	subs	r1, #1
 8001122:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001126:	e79a      	b.n	800105e <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
}
 800112a:	b003      	add	sp, #12
 800112c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800112e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001130:	6a23      	ldr	r3, [r4, #32]
 8001132:	f021 010f 	bic.w	r1, r1, #15
 8001136:	3b01      	subs	r3, #1
 8001138:	430b      	orrs	r3, r1
 800113a:	6313      	str	r3, [r2, #48]	; 0x30
 800113c:	e7ac      	b.n	8001098 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001144:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001148:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800114c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001150:	430b      	orrs	r3, r1
 8001152:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001156:	e7d9      	b.n	800110c <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001158:	6911      	ldr	r1, [r2, #16]
 800115a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800115c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800115e:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001162:	f021 0104 	bic.w	r1, r1, #4
 8001166:	432b      	orrs	r3, r5
 8001168:	430b      	orrs	r3, r1
 800116a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800116c:	430b      	orrs	r3, r1
 800116e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001170:	430b      	orrs	r3, r1
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6113      	str	r3, [r2, #16]
 8001178:	e787      	b.n	800108a <HAL_ADC_Init+0x102>
 800117a:	bf00      	nop
 800117c:	2000001c 	.word	0x2000001c
 8001180:	053e2d63 	.word	0x053e2d63
 8001184:	50000100 	.word	0x50000100
 8001188:	50000300 	.word	0x50000300
 800118c:	fff04007 	.word	0xfff04007

08001190 <HAL_ADC_ConvHalfCpltCallback>:
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop

08001194 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001194:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001196:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001198:	f7ff fffa 	bl	8001190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800119c:	bd08      	pop	{r3, pc}
 800119e:	bf00      	nop

080011a0 <HAL_ADC_ErrorCallback>:
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop

080011a4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80011a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80011a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011a8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80011ac:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80011b0:	d11d      	bne.n	80011ee <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80011b2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011b8:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80011ba:	680a      	ldr	r2, [r1, #0]
 80011bc:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011c0:	68ca      	ldr	r2, [r1, #12]
 80011c2:	d01b      	beq.n	80011fc <ADC_DMAConvCplt+0x58>
 80011c4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80011c8:	d10d      	bne.n	80011e6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80011ca:	68ca      	ldr	r2, [r1, #12]
 80011cc:	0494      	lsls	r4, r2, #18
 80011ce:	d40a      	bmi.n	80011e6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011d6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80011d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011da:	04d1      	lsls	r1, r2, #19
 80011dc:	d403      	bmi.n	80011e6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fb88 	bl	80008fc <HAL_ADC_ConvCpltCallback>
}
 80011ec:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80011ee:	06d2      	lsls	r2, r2, #27
 80011f0:	d40a      	bmi.n	8001208 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80011f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80011fc:	0790      	lsls	r0, r2, #30
 80011fe:	d5e7      	bpl.n	80011d0 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fb7b 	bl	80008fc <HAL_ADC_ConvCpltCallback>
 8001206:	e7f1      	b.n	80011ec <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffc9 	bl	80011a0 <HAL_ADC_ErrorCallback>
}
 800120e:	bd10      	pop	{r4, pc}

08001210 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001210:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001212:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001214:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121a:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800121c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800121e:	f043 0304 	orr.w	r3, r3, #4
 8001222:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001224:	f7ff ffbc 	bl	80011a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001228:	bd08      	pop	{r3, pc}
 800122a:	bf00      	nop

0800122c <HAL_ADC_ConfigChannel>:
{
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800122e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8001232:	b083      	sub	sp, #12
 8001234:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001236:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800123e:	f000 8141 	beq.w	80014c4 <HAL_ADC_ConfigChannel+0x298>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001242:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8001244:	2001      	movs	r0, #1
 8001246:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800124a:	68a2      	ldr	r2, [r4, #8]
 800124c:	0756      	lsls	r6, r2, #29
 800124e:	d44c      	bmi.n	80012ea <HAL_ADC_ConfigChannel+0xbe>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001250:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 8001252:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001254:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8001258:	f00c 0c0c 	and.w	ip, ip, #12
 800125c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  MODIFY_REG(*preg,
 8001260:	f000 001f 	and.w	r0, r0, #31
 8001264:	f85e 500c 	ldr.w	r5, [lr, ip]
 8001268:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800126c:	261f      	movs	r6, #31
 800126e:	4082      	lsls	r2, r0
 8001270:	fa06 f000 	lsl.w	r0, r6, r0
 8001274:	ea25 0000 	bic.w	r0, r5, r0
 8001278:	4302      	orrs	r2, r0
 800127a:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800127e:	68a2      	ldr	r2, [r4, #8]
 8001280:	0755      	lsls	r5, r2, #29
 8001282:	d543      	bpl.n	800130c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001284:	68a2      	ldr	r2, [r4, #8]
 8001286:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001288:	68a2      	ldr	r2, [r4, #8]
 800128a:	f012 0f01 	tst.w	r2, #1
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800128e:	4602      	mov	r2, r0
 8001290:	d10c      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001292:	4dbf      	ldr	r5, [pc, #764]	; (8001590 <HAL_ADC_ConfigChannel+0x364>)
 8001294:	68ce      	ldr	r6, [r1, #12]
 8001296:	42ae      	cmp	r6, r5
 8001298:	f000 80bc 	beq.w	8001414 <HAL_ADC_ConfigChannel+0x1e8>
    CLEAR_BIT(ADCx->DIFSEL,
 800129c:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80012a0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80012a4:	ea21 0100 	bic.w	r1, r1, r0
 80012a8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012ac:	49b9      	ldr	r1, [pc, #740]	; (8001594 <HAL_ADC_ConfigChannel+0x368>)
 80012ae:	420a      	tst	r2, r1
 80012b0:	d02a      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012b2:	49b9      	ldr	r1, [pc, #740]	; (8001598 <HAL_ADC_ConfigChannel+0x36c>)
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80012b4:	4db9      	ldr	r5, [pc, #740]	; (800159c <HAL_ADC_ConfigChannel+0x370>)
 80012b6:	6888      	ldr	r0, [r1, #8]
 80012b8:	42aa      	cmp	r2, r5
 80012ba:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 80012be:	d01d      	beq.n	80012fc <HAL_ADC_ConfigChannel+0xd0>
 80012c0:	4db7      	ldr	r5, [pc, #732]	; (80015a0 <HAL_ADC_ConfigChannel+0x374>)
 80012c2:	42aa      	cmp	r2, r5
 80012c4:	d01a      	beq.n	80012fc <HAL_ADC_ConfigChannel+0xd0>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80012c6:	4db7      	ldr	r5, [pc, #732]	; (80015a4 <HAL_ADC_ConfigChannel+0x378>)
 80012c8:	42aa      	cmp	r2, r5
 80012ca:	f040 812d 	bne.w	8001528 <HAL_ADC_ConfigChannel+0x2fc>
 80012ce:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80012d2:	d119      	bne.n	8001308 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80012d4:	4ab4      	ldr	r2, [pc, #720]	; (80015a8 <HAL_ADC_ConfigChannel+0x37c>)
 80012d6:	4294      	cmp	r4, r2
 80012d8:	d016      	beq.n	8001308 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80012da:	688a      	ldr	r2, [r1, #8]
 80012dc:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80012e0:	4332      	orrs	r2, r6
 80012e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80012e6:	608a      	str	r2, [r1, #8]
}
 80012e8:	e003      	b.n	80012f2 <HAL_ADC_ConfigChannel+0xc6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ec:	f042 0220 	orr.w	r2, r2, #32
 80012f0:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80012f8:	b003      	add	sp, #12
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012fc:	0202      	lsls	r2, r0, #8
 80012fe:	d403      	bmi.n	8001308 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001300:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001304:	f000 80f1 	beq.w	80014ea <HAL_ADC_ConfigChannel+0x2be>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001308:	2000      	movs	r0, #0
 800130a:	e7f2      	b.n	80012f2 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800130c:	68a2      	ldr	r2, [r4, #8]
 800130e:	0710      	lsls	r0, r2, #28
 8001310:	d47e      	bmi.n	8001410 <HAL_ADC_ConfigChannel+0x1e4>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001312:	688a      	ldr	r2, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001314:	680d      	ldr	r5, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001316:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800131a:	f000 8119 	beq.w	8001550 <HAL_ADC_ConfigChannel+0x324>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800131e:	0dee      	lsrs	r6, r5, #23
 8001320:	f104 0c14 	add.w	ip, r4, #20
 8001324:	f006 0604 	and.w	r6, r6, #4
  MODIFY_REG(*preg,
 8001328:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800132c:	f85c 0006 	ldr.w	r0, [ip, r6]
 8001330:	2707      	movs	r7, #7
 8001332:	40aa      	lsls	r2, r5
 8001334:	fa07 f505 	lsl.w	r5, r7, r5
 8001338:	ea20 0005 	bic.w	r0, r0, r5
 800133c:	4302      	orrs	r2, r0
 800133e:	f84c 2006 	str.w	r2, [ip, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001342:	6962      	ldr	r2, [r4, #20]
 8001344:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001348:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800134a:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800134e:	2d04      	cmp	r5, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001350:	68e2      	ldr	r2, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001352:	d02d      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0x184>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001354:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001358:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800135c:	0052      	lsls	r2, r2, #1
  MODIFY_REG(*preg,
 800135e:	f850 c025 	ldr.w	ip, [r0, r5, lsl #2]
 8001362:	4f92      	ldr	r7, [pc, #584]	; (80015ac <HAL_ADC_ConfigChannel+0x380>)
 8001364:	4096      	lsls	r6, r2
 8001366:	680a      	ldr	r2, [r1, #0]
 8001368:	ea0c 0707 	and.w	r7, ip, r7
 800136c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8001370:	433a      	orrs	r2, r7
 8001372:	4332      	orrs	r2, r6
 8001374:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001378:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800137c:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 800137e:	698e      	ldr	r6, [r1, #24]
 8001380:	f850 2025 	ldr.w	r2, [r0, r5, lsl #2]
 8001384:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001388:	4332      	orrs	r2, r6
 800138a:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800138e:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001390:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8001392:	f850 2026 	ldr.w	r2, [r0, r6, lsl #2]
 8001396:	f1a5 0501 	sub.w	r5, r5, #1
 800139a:	fab5 f585 	clz	r5, r5
 800139e:	096d      	lsrs	r5, r5, #5
 80013a0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80013a4:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80013a8:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 80013ac:	6808      	ldr	r0, [r1, #0]
}
 80013ae:	e76b      	b.n	8001288 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013b0:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013b2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013b4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80013b6:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013ba:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013be:	2d00      	cmp	r5, #0
 80013c0:	f040 80fc 	bne.w	80015bc <HAL_ADC_ConfigChannel+0x390>
 80013c4:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80013c8:	42aa      	cmp	r2, r5
 80013ca:	f000 8170 	beq.w	80016ae <HAL_ADC_ConfigChannel+0x482>
 80013ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013d2:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80013d6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80013da:	f104 0764 	add.w	r7, r4, #100	; 0x64
 80013de:	42ae      	cmp	r6, r5
 80013e0:	f000 8153 	beq.w	800168a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e4:	6896      	ldr	r6, [r2, #8]
 80013e6:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013e8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80013ec:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80013f0:	42ae      	cmp	r6, r5
 80013f2:	f000 8138 	beq.w	8001666 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013f6:	68d6      	ldr	r6, [r2, #12]
 80013f8:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013fa:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80013fe:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8001402:	4295      	cmp	r5, r2
 8001404:	f47f af40 	bne.w	8001288 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800140e:	603a      	str	r2, [r7, #0]
 8001410:	6808      	ldr	r0, [r1, #0]
}
 8001412:	e739      	b.n	8001288 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8001414:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8001418:	f3c0 0512 	ubfx	r5, r0, #0, #19
 800141c:	432a      	orrs	r2, r5
 800141e:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001422:	2d00      	cmp	r5, #0
 8001424:	d051      	beq.n	80014ca <HAL_ADC_ConfigChannel+0x29e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001426:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800142a:	2a00      	cmp	r2, #0
 800142c:	f000 80f7 	beq.w	800161e <HAL_ADC_ConfigChannel+0x3f2>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001430:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001434:	3201      	adds	r2, #1
 8001436:	f002 021f 	and.w	r2, r2, #31
 800143a:	2a09      	cmp	r2, #9
 800143c:	f240 80ef 	bls.w	800161e <HAL_ADC_ConfigChannel+0x3f2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001444:	2d00      	cmp	r5, #0
 8001446:	f000 814e 	beq.w	80016e6 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 800144a:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800144e:	3501      	adds	r5, #1
 8001450:	06ad      	lsls	r5, r5, #26
 8001452:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001456:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 800145a:	2a00      	cmp	r2, #0
 800145c:	f000 8148 	beq.w	80016f0 <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8001460:	fab2 f282 	clz	r2, r2
 8001464:	3201      	adds	r2, #1
 8001466:	f002 021f 	and.w	r2, r2, #31
 800146a:	2601      	movs	r6, #1
 800146c:	fa06 f202 	lsl.w	r2, r6, r2
 8001470:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001472:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001476:	2800      	cmp	r0, #0
 8001478:	f000 8138 	beq.w	80016ec <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 800147c:	fab0 f080 	clz	r0, r0
 8001480:	3001      	adds	r0, #1
 8001482:	f000 001f 	and.w	r0, r0, #31
 8001486:	2203      	movs	r2, #3
 8001488:	f06f 061d 	mvn.w	r6, #29
 800148c:	fb12 6200 	smlabb	r2, r2, r0, r6
 8001490:	0512      	lsls	r2, r2, #20
 8001492:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001496:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001498:	0dd5      	lsrs	r5, r2, #23
  MODIFY_REG(*preg,
 800149a:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800149c:	f005 0504 	and.w	r5, r5, #4
 80014a0:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80014a4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80014a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80014ac:	f04f 0e07 	mov.w	lr, #7
 80014b0:	5970      	ldr	r0, [r6, r5]
 80014b2:	fa0e f202 	lsl.w	r2, lr, r2
 80014b6:	ea20 0202 	bic.w	r2, r0, r2
 80014ba:	ea42 020c 	orr.w	r2, r2, ip
 80014be:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014c0:	680a      	ldr	r2, [r1, #0]
}
 80014c2:	e6f3      	b.n	80012ac <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 80014c4:	2002      	movs	r0, #2
}
 80014c6:	b003      	add	sp, #12
 80014c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014ca:	0e82      	lsrs	r2, r0, #26
 80014cc:	3201      	adds	r2, #1
 80014ce:	f002 001f 	and.w	r0, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014d2:	2809      	cmp	r0, #9
 80014d4:	d84e      	bhi.n	8001574 <HAL_ADC_ConfigChannel+0x348>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80014d6:	0695      	lsls	r5, r2, #26
 80014d8:	2201      	movs	r2, #1
 80014da:	4082      	lsls	r2, r0
 80014dc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80014e0:	4315      	orrs	r5, r2
 80014e2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80014e6:	0512      	lsls	r2, r2, #20
 80014e8:	e7d5      	b.n	8001496 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014ea:	492b      	ldr	r1, [pc, #172]	; (8001598 <HAL_ADC_ConfigChannel+0x36c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014ec:	4830      	ldr	r0, [pc, #192]	; (80015b0 <HAL_ADC_ConfigChannel+0x384>)
 80014ee:	688a      	ldr	r2, [r1, #8]
 80014f0:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80014f4:	4332      	orrs	r2, r6
 80014f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014fa:	608a      	str	r2, [r1, #8]
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	492d      	ldr	r1, [pc, #180]	; (80015b4 <HAL_ADC_ConfigChannel+0x388>)
 8001500:	0992      	lsrs	r2, r2, #6
 8001502:	fba1 1202 	umull	r1, r2, r1, r2
 8001506:	0992      	lsrs	r2, r2, #6
 8001508:	3201      	adds	r2, #1
 800150a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001512:	9a01      	ldr	r2, [sp, #4]
 8001514:	2a00      	cmp	r2, #0
 8001516:	f43f aef7 	beq.w	8001308 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 800151a:	9a01      	ldr	r2, [sp, #4]
 800151c:	3a01      	subs	r2, #1
 800151e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001520:	9a01      	ldr	r2, [sp, #4]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d1f9      	bne.n	800151a <HAL_ADC_ConfigChannel+0x2ee>
 8001526:	e6ef      	b.n	8001308 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001528:	4d23      	ldr	r5, [pc, #140]	; (80015b8 <HAL_ADC_ConfigChannel+0x38c>)
 800152a:	42aa      	cmp	r2, r5
 800152c:	f47f aeec 	bne.w	8001308 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001530:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001534:	f47f aee8 	bne.w	8001308 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <HAL_ADC_ConfigChannel+0x37c>)
 800153a:	4294      	cmp	r4, r2
 800153c:	f43f aee4 	beq.w	8001308 <HAL_ADC_ConfigChannel+0xdc>
 8001540:	688a      	ldr	r2, [r1, #8]
 8001542:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001546:	4332      	orrs	r2, r6
 8001548:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800154c:	608a      	str	r2, [r1, #8]
}
 800154e:	e6d0      	b.n	80012f2 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001550:	0dea      	lsrs	r2, r5, #23
 8001552:	f002 0204 	and.w	r2, r2, #4
 8001556:	f104 0014 	add.w	r0, r4, #20
  MODIFY_REG(*preg,
 800155a:	f3c5 5504 	ubfx	r5, r5, #20, #5
 800155e:	2607      	movs	r6, #7
 8001560:	40ae      	lsls	r6, r5
 8001562:	5885      	ldr	r5, [r0, r2]
 8001564:	ea25 0506 	bic.w	r5, r5, r6
 8001568:	5085      	str	r5, [r0, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800156a:	6962      	ldr	r2, [r4, #20]
 800156c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001570:	6162      	str	r2, [r4, #20]
}
 8001572:	e6ea      	b.n	800134a <HAL_ADC_ConfigChannel+0x11e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001574:	0695      	lsls	r5, r2, #26
 8001576:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800157a:	3a1e      	subs	r2, #30
 800157c:	2601      	movs	r6, #1
 800157e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001582:	0512      	lsls	r2, r2, #20
 8001584:	fa06 f000 	lsl.w	r0, r6, r0
 8001588:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800158c:	4305      	orrs	r5, r0
 800158e:	e782      	b.n	8001496 <HAL_ADC_ConfigChannel+0x26a>
 8001590:	407f0000 	.word	0x407f0000
 8001594:	80080000 	.word	0x80080000
 8001598:	50000300 	.word	0x50000300
 800159c:	c3210000 	.word	0xc3210000
 80015a0:	90c00010 	.word	0x90c00010
 80015a4:	c7520000 	.word	0xc7520000
 80015a8:	50000100 	.word	0x50000100
 80015ac:	03fff000 	.word	0x03fff000
 80015b0:	2000001c 	.word	0x2000001c
 80015b4:	053e2d63 	.word	0x053e2d63
 80015b8:	cb840000 	.word	0xcb840000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80015c0:	b11d      	cbz	r5, 80015ca <HAL_ADC_ConfigChannel+0x39e>
  return __builtin_clz(value);
 80015c2:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80015c6:	42aa      	cmp	r2, r5
 80015c8:	d071      	beq.n	80016ae <HAL_ADC_ConfigChannel+0x482>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015cc:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ce:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015d2:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80015d6:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80015de:	b11d      	cbz	r5, 80015e8 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80015e0:	fab5 f585 	clz	r5, r5
 80015e4:	42ae      	cmp	r6, r5
 80015e6:	d050      	beq.n	800168a <HAL_ADC_ConfigChannel+0x45e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015e8:	6895      	ldr	r5, [r2, #8]
 80015ea:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ec:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80015f0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80015f8:	b11d      	cbz	r5, 8001602 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80015fa:	fab5 f585 	clz	r5, r5
 80015fe:	42ae      	cmp	r6, r5
 8001600:	d031      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x43a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001602:	68d5      	ldr	r5, [r2, #12]
 8001604:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001606:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800160a:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001612:	2d00      	cmp	r5, #0
 8001614:	f43f ae38 	beq.w	8001288 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8001618:	fab5 f585 	clz	r5, r5
 800161c:	e6f1      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1d6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001622:	2d00      	cmp	r5, #0
 8001624:	d059      	beq.n	80016da <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8001626:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800162a:	3501      	adds	r5, #1
 800162c:	06ad      	lsls	r5, r5, #26
 800162e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8001636:	2a00      	cmp	r2, #0
 8001638:	d04d      	beq.n	80016d6 <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 800163a:	fab2 f282 	clz	r2, r2
 800163e:	3201      	adds	r2, #1
 8001640:	f002 021f 	and.w	r2, r2, #31
 8001644:	2601      	movs	r6, #1
 8001646:	fa06 f202 	lsl.w	r2, r6, r2
 800164a:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001650:	2800      	cmp	r0, #0
 8001652:	d045      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001654:	fab0 f280 	clz	r2, r0
 8001658:	3201      	adds	r2, #1
 800165a:	f002 021f 	and.w	r2, r2, #31
 800165e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001662:	0512      	lsls	r2, r2, #20
 8001664:	e717      	b.n	8001496 <HAL_ADC_ConfigChannel+0x26a>
  MODIFY_REG(*preg,
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800166c:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800166e:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001670:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001676:	68d2      	ldr	r2, [r2, #12]
 8001678:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800167c:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001680:	2d00      	cmp	r5, #0
 8001682:	d1c4      	bne.n	800160e <HAL_ADC_ConfigChannel+0x3e2>
 8001684:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001688:	e6bb      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1d6>
  MODIFY_REG(*preg,
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001690:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001692:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001694:	6808      	ldr	r0, [r1, #0]
 8001696:	6896      	ldr	r6, [r2, #8]
 8001698:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800169c:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80016a0:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	2d00      	cmp	r5, #0
 80016a6:	d1a5      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x3c8>
 80016a8:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80016ac:	e6a0      	b.n	80013f0 <HAL_ADC_ConfigChannel+0x1c4>
  MODIFY_REG(*preg,
 80016ae:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80016b0:	4622      	mov	r2, r4
 80016b2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80016b6:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016ba:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016bc:	6808      	ldr	r0, [r1, #0]
 80016be:	6e66      	ldr	r6, [r4, #100]	; 0x64
 80016c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016c4:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80016c8:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	d184      	bne.n	80015da <HAL_ADC_ConfigChannel+0x3ae>
 80016d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80016d4:	e683      	b.n	80013de <HAL_ADC_ConfigChannel+0x1b2>
 80016d6:	2202      	movs	r2, #2
 80016d8:	e7b7      	b.n	800164a <HAL_ADC_ConfigChannel+0x41e>
 80016da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80016de:	e7a8      	b.n	8001632 <HAL_ADC_ConfigChannel+0x406>
 80016e0:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80016e4:	e6d7      	b.n	8001496 <HAL_ADC_ConfigChannel+0x26a>
 80016e6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80016ea:	e6b4      	b.n	8001456 <HAL_ADC_ConfigChannel+0x22a>
 80016ec:	4a01      	ldr	r2, [pc, #4]	; (80016f4 <HAL_ADC_ConfigChannel+0x4c8>)
 80016ee:	e6d2      	b.n	8001496 <HAL_ADC_ConfigChannel+0x26a>
 80016f0:	2202      	movs	r2, #2
 80016f2:	e6bd      	b.n	8001470 <HAL_ADC_ConfigChannel+0x244>
 80016f4:	fe500000 	.word	0xfe500000

080016f8 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	07d2      	lsls	r2, r2, #31
 80016fe:	d501      	bpl.n	8001704 <ADC_Enable+0xc>
  return HAL_OK;
 8001700:	2000      	movs	r0, #0
}
 8001702:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	4a18      	ldr	r2, [pc, #96]	; (8001768 <ADC_Enable+0x70>)
 8001708:	4211      	tst	r1, r2
{
 800170a:	b570      	push	{r4, r5, r6, lr}
 800170c:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800170e:	d008      	beq.n	8001722 <ADC_Enable+0x2a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001710:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	6e33      	ldr	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800171a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171c:	4303      	orrs	r3, r0
 800171e:	6633      	str	r3, [r6, #96]	; 0x60
}
 8001720:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	4d11      	ldr	r5, [pc, #68]	; (800176c <ADC_Enable+0x74>)
 8001726:	402a      	ands	r2, r5
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800172e:	f7ff fc13 	bl	8000f58 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001732:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001734:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	07d0      	lsls	r0, r2, #31
 800173a:	d413      	bmi.n	8001764 <ADC_Enable+0x6c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800173c:	689a      	ldr	r2, [r3, #8]
 800173e:	07d1      	lsls	r1, r2, #31
 8001740:	d404      	bmi.n	800174c <ADC_Enable+0x54>
  MODIFY_REG(ADCx->CR,
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	402a      	ands	r2, r5
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800174c:	f7ff fc04 	bl	8000f58 <HAL_GetTick>
 8001750:	1b03      	subs	r3, r0, r4
 8001752:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001754:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001756:	d9ee      	bls.n	8001736 <ADC_Enable+0x3e>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	07d2      	lsls	r2, r2, #31
 800175c:	d5d8      	bpl.n	8001710 <ADC_Enable+0x18>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	07d0      	lsls	r0, r2, #31
 8001762:	d5eb      	bpl.n	800173c <ADC_Enable+0x44>
  return HAL_OK;
 8001764:	2000      	movs	r0, #0
}
 8001766:	bd70      	pop	{r4, r5, r6, pc}
 8001768:	8000003f 	.word	0x8000003f
 800176c:	7fffffc0 	.word	0x7fffffc0

08001770 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_ADC_Start_DMA+0xdc>)
{
 8001772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001776:	f8d3 8008 	ldr.w	r8, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800177a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800177c:	689d      	ldr	r5, [r3, #8]
 800177e:	f015 0504 	ands.w	r5, r5, #4
 8001782:	d116      	bne.n	80017b2 <HAL_ADC_Start_DMA+0x42>
    __HAL_LOCK(hadc);
 8001784:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001788:	2b01      	cmp	r3, #1
 800178a:	4604      	mov	r4, r0
 800178c:	d011      	beq.n	80017b2 <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800178e:	f008 081f 	and.w	r8, r8, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001792:	f240 2321 	movw	r3, #545	; 0x221
    __HAL_LOCK(hadc);
 8001796:	f04f 0c01 	mov.w	ip, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800179a:	fa23 f308 	lsr.w	r3, r3, r8
 800179e:	ea13 030c 	ands.w	r3, r3, ip
    __HAL_LOCK(hadc);
 80017a2:	f880 c058 	strb.w	ip, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80017a6:	d107      	bne.n	80017b8 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80017a8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80017ac:	4660      	mov	r0, ip
}
 80017ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 80017b2:	2002      	movs	r0, #2
}
 80017b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80017b8:	460e      	mov	r6, r1
 80017ba:	4617      	mov	r7, r2
 80017bc:	f7ff ff9c 	bl	80016f8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d13b      	bne.n	800183c <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80017c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017c6:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80017c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017d6:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_ADC_Start_DMA+0xe0>)
 80017d8:	4299      	cmp	r1, r3
 80017da:	d033      	beq.n	8001844 <HAL_ADC_Start_DMA+0xd4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017dc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e2:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017e8:	4d1a      	ldr	r5, [pc, #104]	; (8001854 <HAL_ADC_Start_DMA+0xe4>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80017ea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ee:	bf1c      	itt	ne
 80017f0:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 80017f2:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017f8:	62c5      	str	r5, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017fa:	4d17      	ldr	r5, [pc, #92]	; (8001858 <HAL_ADC_Start_DMA+0xe8>)
 80017fc:	6305      	str	r5, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017fe:	4d17      	ldr	r5, [pc, #92]	; (800185c <HAL_ADC_Start_DMA+0xec>)
 8001800:	6345      	str	r5, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001802:	251c      	movs	r5, #28
 8001804:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001806:	2500      	movs	r5, #0
 8001808:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800180c:	684d      	ldr	r5, [r1, #4]
 800180e:	f045 0510 	orr.w	r5, r5, #16
 8001812:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001814:	68cd      	ldr	r5, [r1, #12]
 8001816:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800181a:	463b      	mov	r3, r7
 800181c:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800181e:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001820:	3140      	adds	r1, #64	; 0x40
 8001822:	f000 fae7 	bl	8001df4 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001826:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001828:	6893      	ldr	r3, [r2, #8]
 800182a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800182e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6093      	str	r3, [r2, #8]
}
 8001838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800183c:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8001840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001844:	f1b8 0f00 	cmp.w	r8, #0
 8001848:	d0c8      	beq.n	80017dc <HAL_ADC_Start_DMA+0x6c>
 800184a:	e7cb      	b.n	80017e4 <HAL_ADC_Start_DMA+0x74>
 800184c:	50000300 	.word	0x50000300
 8001850:	50000100 	.word	0x50000100
 8001854:	080011a5 	.word	0x080011a5
 8001858:	08001195 	.word	0x08001195
 800185c:	08001211 	.word	0x08001211

08001860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001862:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001866:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 8001868:	2a01      	cmp	r2, #1
{
 800186a:	b09d      	sub	sp, #116	; 0x74
  __HAL_LOCK(hadc);
 800186c:	d047      	beq.n	80018fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800186e:	6804      	ldr	r4, [r0, #0]
 8001870:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001872:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8001874:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001876:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800187a:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 800187c:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001880:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001882:	d007      	beq.n	8001894 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001884:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001886:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188a:	f041 0120 	orr.w	r1, r1, #32
 800188e:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8001890:	b01d      	add	sp, #116	; 0x74
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001894:	4d26      	ldr	r5, [pc, #152]	; (8001930 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 8001896:	68aa      	ldr	r2, [r5, #8]
 8001898:	0752      	lsls	r2, r2, #29
 800189a:	d50a      	bpl.n	80018b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800189c:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a0:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80018a4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80018ae:	b01d      	add	sp, #116	; 0x74
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	68a0      	ldr	r0, [r4, #8]
 80018b4:	f010 0004 	ands.w	r0, r0, #4
 80018b8:	d1f1      	bne.n	800189e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ba:	b31e      	cbz	r6, 8001904 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80018bc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001934 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
 80018c0:	684f      	ldr	r7, [r1, #4]
 80018c2:	f8de 2008 	ldr.w	r2, [lr, #8]
 80018c6:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80018ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018ce:	433a      	orrs	r2, r7
 80018d0:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 80018d4:	f8ce 2008 	str.w	r2, [lr, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018d8:	68a2      	ldr	r2, [r4, #8]
 80018da:	07d4      	lsls	r4, r2, #31
 80018dc:	d426      	bmi.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80018de:	68a8      	ldr	r0, [r5, #8]
 80018e0:	f010 0001 	ands.w	r0, r0, #1
 80018e4:	d119      	bne.n	800191a <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 80018e6:	688a      	ldr	r2, [r1, #8]
 80018e8:	f8de 1008 	ldr.w	r1, [lr, #8]
 80018ec:	f421 6171 	bic.w	r1, r1, #3856	; 0xf10
 80018f0:	4332      	orrs	r2, r6
 80018f2:	f021 010f 	bic.w	r1, r1, #15
 80018f6:	430a      	orrs	r2, r1
 80018f8:	f8ce 2008 	str.w	r2, [lr, #8]
 80018fc:	e7d4      	b.n	80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
  __HAL_LOCK(hadc);
 80018fe:	2002      	movs	r0, #2
}
 8001900:	b01d      	add	sp, #116	; 0x74
 8001902:	bdf0      	pop	{r4, r5, r6, r7, pc}
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001904:	490b      	ldr	r1, [pc, #44]	; (8001934 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8001906:	688a      	ldr	r2, [r1, #8]
 8001908:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800190c:	608a      	str	r2, [r1, #8]
 800190e:	68a2      	ldr	r2, [r4, #8]
 8001910:	68a8      	ldr	r0, [r5, #8]
 8001912:	4310      	orrs	r0, r2
 8001914:	f010 0001 	ands.w	r0, r0, #1
 8001918:	d001      	beq.n	800191e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800191a:	2000      	movs	r0, #0
 800191c:	e7c4      	b.n	80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800191e:	688a      	ldr	r2, [r1, #8]
 8001920:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001924:	f022 020f 	bic.w	r2, r2, #15
 8001928:	608a      	str	r2, [r1, #8]
 800192a:	e7bd      	b.n	80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800192c:	68aa      	ldr	r2, [r5, #8]
 800192e:	e7bb      	b.n	80018a8 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8001930:	50000100 	.word	0x50000100
 8001934:	50000300 	.word	0x50000300

08001938 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4907      	ldr	r1, [pc, #28]	; (8001958 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800193a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001942:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001946:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800194e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001952:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_NVIC_SetPriority+0x74>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001964:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001966:	f1c3 0e07 	rsb	lr, r3, #7
 800196a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001972:	bf28      	it	cs
 8001974:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001978:	f1bc 0f06 	cmp.w	ip, #6
 800197c:	d91b      	bls.n	80019b6 <HAL_NVIC_SetPriority+0x5a>
 800197e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001984:	fa0c fc03 	lsl.w	ip, ip, r3
 8001988:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001990:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001994:	ea21 010c 	bic.w	r1, r1, ip
 8001998:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800199a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80019a0:	db0c      	blt.n	80019bc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80019a6:	0109      	lsls	r1, r1, #4
 80019a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80019b6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b8:	4613      	mov	r3, r2
 80019ba:	e7e7      	b.n	800198c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <HAL_NVIC_SetPriority+0x78>)
 80019be:	f000 000f 	and.w	r0, r0, #15
 80019c2:	0109      	lsls	r1, r1, #4
 80019c4:	4403      	add	r3, r0
 80019c6:	b2c9      	uxtb	r1, r1
 80019c8:	7619      	strb	r1, [r3, #24]
 80019ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ce:	bf00      	nop
 80019d0:	e000ed00 	.word	0xe000ed00
 80019d4:	e000ecfc 	.word	0xe000ecfc

080019d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80019d8:	2800      	cmp	r0, #0
 80019da:	db07      	blt.n	80019ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_NVIC_EnableIRQ+0x18>)
 80019de:	0941      	lsrs	r1, r0, #5
 80019e0:	2301      	movs	r3, #1
 80019e2:	f000 001f 	and.w	r0, r0, #31
 80019e6:	4083      	lsls	r3, r0
 80019e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f4:	3801      	subs	r0, #1
 80019f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80019fa:	d210      	bcs.n	8001a1e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fc:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	4c08      	ldr	r4, [pc, #32]	; (8001a24 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a04:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001a0a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a10:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a12:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a14:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a1a:	6119      	str	r1, [r3, #16]
 8001a1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2001      	movs	r0, #1
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8001a28:	b188      	cbz	r0, 8001a4e <HAL_DAC_Init+0x26>
{
 8001a2a:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a2c:	7903      	ldrb	r3, [r0, #4]
 8001a2e:	4604      	mov	r4, r0
 8001a30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a34:	b13b      	cbz	r3, 8001a46 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a36:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a38:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a3a:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a3c:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a3e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001a40:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8001a42:	4618      	mov	r0, r3
}
 8001a44:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001a46:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001a48:	f7fe fe1e 	bl	8000688 <HAL_DAC_MspInit>
 8001a4c:	e7f3      	b.n	8001a36 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8001a4e:	2001      	movs	r0, #1
}
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001a56:	7943      	ldrb	r3, [r0, #5]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d02e      	beq.n	8001aba <HAL_DAC_Start+0x66>
 8001a5c:	4604      	mov	r4, r0

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a5e:	2602      	movs	r6, #2

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a60:	6822      	ldr	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a62:	7126      	strb	r6, [r4, #4]
  __HAL_LOCK(hdac);
 8001a64:	2001      	movs	r0, #1
 8001a66:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a68:	460d      	mov	r5, r1
 8001a6a:	f005 0710 	and.w	r7, r5, #16
 8001a6e:	6811      	ldr	r1, [r2, #0]
 8001a70:	fa00 f307 	lsl.w	r3, r0, r7
 8001a74:	430b      	orrs	r3, r1
 8001a76:	6013      	str	r3, [r2, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8001a78:	f7ff fa74 	bl	8000f64 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a7c:	6822      	ldr	r2, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8001a7e:	b96d      	cbnz	r5, 8001a9c <HAL_DAC_Start+0x48>
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001a86:	42b3      	cmp	r3, r6
 8001a88:	d103      	bne.n	8001a92 <HAL_DAC_Start+0x3e>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001a8a:	6853      	ldr	r3, [r2, #4]
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a92:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001a94:	2301      	movs	r3, #1
 8001a96:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001a98:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return HAL_OK;
}
 8001a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	40be      	lsls	r6, r7
 8001aa0:	f403 1378 	and.w	r3, r3, #4063232	; 0x3e0000
 8001aa4:	42b3      	cmp	r3, r6
 8001aa6:	d1f4      	bne.n	8001a92 <HAL_DAC_Start+0x3e>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001aa8:	6853      	ldr	r3, [r2, #4]
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdac);
 8001ab0:	2000      	movs	r0, #0
  hdac->State = HAL_DAC_STATE_READY;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	7123      	strb	r3, [r4, #4]
  __HAL_UNLOCK(hdac);
 8001ab6:	7160      	strb	r0, [r4, #5]
  return HAL_OK;
 8001ab8:	e7ef      	b.n	8001a9a <HAL_DAC_Start+0x46>
  __HAL_LOCK(hdac);
 8001aba:	2002      	movs	r0, #2
}
 8001abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001abe:	bf00      	nop

08001ac0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ac0:	b410      	push	{r4}
 8001ac2:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001ac4:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0UL;
 8001ac6:	2400      	movs	r4, #0
 8001ac8:	9401      	str	r4, [sp, #4]
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8001aca:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8001acc:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8001ace:	b951      	cbnz	r1, 8001ae6 <HAL_DAC_SetValue+0x26>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ad0:	9901      	ldr	r1, [sp, #4]
 8001ad2:	3108      	adds	r1, #8
 8001ad4:	440a      	add	r2, r1
 8001ad6:	9201      	str	r2, [sp, #4]
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001ad8:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
}
 8001ada:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8001adc:	6013      	str	r3, [r2, #0]
}
 8001ade:	b003      	add	sp, #12
 8001ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ae4:	4770      	bx	lr
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ae6:	9901      	ldr	r1, [sp, #4]
 8001ae8:	3114      	adds	r1, #20
 8001aea:	440a      	add	r2, r1
 8001aec:	9201      	str	r2, [sp, #4]
 8001aee:	e7f3      	b.n	8001ad8 <HAL_DAC_SetValue+0x18>

08001af0 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001af0:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8001af2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  __HAL_LOCK(hdac);
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f000 80d0 	beq.w	8001c9c <HAL_DAC_ConfigChannel+0x1ac>
 8001afc:	2301      	movs	r3, #1
{
 8001afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b02:	f1bc 0f04 	cmp.w	ip, #4
  __HAL_LOCK(hdac);
 8001b06:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b08:	f04f 0302 	mov.w	r3, #2
 8001b0c:	4605      	mov	r5, r0
 8001b0e:	460f      	mov	r7, r1
 8001b10:	4616      	mov	r6, r2
 8001b12:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b14:	d07d      	beq.n	8001c12 <HAL_DAC_ConfigChannel+0x122>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001b16:	6800      	ldr	r0, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001b18:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <HAL_DAC_ConfigChannel+0x44>
    tmpreg1 = hdac->Instance->CCR;
 8001b22:	6b82      	ldr	r2, [r0, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b24:	6a3b      	ldr	r3, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b26:	211f      	movs	r1, #31
 8001b28:	40b1      	lsls	r1, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b2a:	40b3      	lsls	r3, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001b2c:	ea22 0201 	bic.w	r2, r2, r1
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b30:	4313      	orrs	r3, r2
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001b32:	6383      	str	r3, [r0, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001b34:	69ba      	ldr	r2, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8001b36:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b38:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001b3a:	2a01      	cmp	r2, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001b3c:	fa01 f106 	lsl.w	r1, r1, r6
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001b40:	d063      	beq.n	8001c0a <HAL_DAC_ConfigChannel+0x11a>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001b42:	2a02      	cmp	r2, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	bf16      	itet	ne
 8001b48:	fab2 fe82 	clzne	lr, r2
    connectOnChip = DAC_MCR_MODE1_0;
 8001b4c:	f04f 0e01 	moveq.w	lr, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001b50:	ea4f 1e5e 	movne.w	lr, lr, lsr #5
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b54:	797c      	ldrb	r4, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001b56:	f897 8004 	ldrb.w	r8, [r7, #4]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b5a:	f1a4 0401 	sub.w	r4, r4, #1
 8001b5e:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001b62:	f1a8 0801 	sub.w	r8, r8, #1
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b66:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8001b68:	fab8 f888 	clz	r8, r8
 8001b6c:	ea4f 1858 	mov.w	r8, r8, lsr #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001b70:	0264      	lsls	r4, r4, #9
 8001b72:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
 8001b76:	ea44 040c 	orr.w	r4, r4, ip
 8001b7a:	ea44 040e 	orr.w	r4, r4, lr
 8001b7e:	4314      	orrs	r4, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b84:	40b2      	lsls	r2, r6
 8001b86:	430a      	orrs	r2, r1
 8001b88:	ea23 0802 	bic.w	r8, r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	40b3      	lsls	r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001b92:	ea28 0803 	bic.w	r8, r8, r3
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b02      	cmp	r3, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8001b9a:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001b9e:	d074      	beq.n	8001c8a <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001ba0:	ea48 0803 	orr.w	r8, r8, r3
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ba4:	40b4      	lsls	r4, r6
 8001ba6:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001baa:	63c4      	str	r4, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	40b2      	lsls	r2, r6
 8001bb4:	ea23 0302 	bic.w	r3, r3, r2
 8001bb8:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001bba:	e9d7 2303 	ldrd	r2, r3, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8001bbe:	6804      	ldr	r4, [r0, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001bc0:	f640 71fe 	movw	r1, #4094	; 0xffe
 8001bc4:	40b1      	lsls	r1, r6
 8001bc6:	ea24 0401 	bic.w	r4, r4, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001bca:	fa02 f106 	lsl.w	r1, r2, r6
 8001bce:	4321      	orrs	r1, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001bd0:	019b      	lsls	r3, r3, #6
  hdac->Instance->CR = tmpreg1;
 8001bd2:	6001      	str	r1, [r0, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001bd4:	f3c2 0283 	ubfx	r2, r2, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001bd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001bdc:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001bde:	24c0      	movs	r4, #192	; 0xc0
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	40b4      	lsls	r4, r6
 8001be4:	ea22 0204 	bic.w	r2, r2, r4
 8001be8:	6002      	str	r2, [r0, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001bea:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8001bec:	f640 710f 	movw	r1, #3855	; 0xf0f
 8001bf0:	40b1      	lsls	r1, r6
 8001bf2:	ea22 0201 	bic.w	r2, r2, r1
 8001bf6:	40b3      	lsls	r3, r6
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bf8:	2100      	movs	r1, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001bfa:	4313      	orrs	r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001bfc:	2201      	movs	r2, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001bfe:	6603      	str	r3, [r0, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8001c00:	4608      	mov	r0, r1
  hdac->State = HAL_DAC_STATE_READY;
 8001c02:	712a      	strb	r2, [r5, #4]
  __HAL_UNLOCK(hdac);
 8001c04:	7169      	strb	r1, [r5, #5]
}
 8001c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001c0a:	697a      	ldr	r2, [r7, #20]
    connectOnChip = 0x00000000UL;
 8001c0c:	f04f 0e00 	mov.w	lr, #0
 8001c10:	e7a0      	b.n	8001b54 <HAL_DAC_ConfigChannel+0x64>
    tickstart = HAL_GetTick();
 8001c12:	f7ff f9a1 	bl	8000f58 <HAL_GetTick>
 8001c16:	4604      	mov	r4, r0
    if (Channel == DAC_CHANNEL_1)
 8001c18:	b12e      	cbz	r6, 8001c26 <HAL_DAC_ConfigChannel+0x136>
 8001c1a:	e014      	b.n	8001c46 <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c1c:	f7ff f99c 	bl	8000f58 <HAL_GetTick>
 8001c20:	1b03      	subs	r3, r0, r4
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d83c      	bhi.n	8001ca0 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001c26:	682b      	ldr	r3, [r5, #0]
 8001c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	d4f6      	bmi.n	8001c1c <HAL_DAC_ConfigChannel+0x12c>
      HAL_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7ff f998 	bl	8000f64 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c34:	6828      	ldr	r0, [r5, #0]
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	6403      	str	r3, [r0, #64]	; 0x40
 8001c3a:	e00e      	b.n	8001c5a <HAL_DAC_ConfigChannel+0x16a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001c3c:	f7ff f98c 	bl	8000f58 <HAL_GetTick>
 8001c40:	1b03      	subs	r3, r0, r4
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d82c      	bhi.n	8001ca0 <HAL_DAC_ConfigChannel+0x1b0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dbf6      	blt.n	8001c3c <HAL_DAC_ConfigChannel+0x14c>
      HAL_Delay(1U);
 8001c4e:	2001      	movs	r0, #1
 8001c50:	f7ff f988 	bl	8000f64 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c54:	6828      	ldr	r0, [r5, #0]
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	6443      	str	r3, [r0, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001c5a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001c5e:	f8d7 c008 	ldr.w	ip, [r7, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8001c62:	f006 0610 	and.w	r6, r6, #16
 8001c66:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001c6a:	40b1      	lsls	r1, r6
 8001c6c:	40b2      	lsls	r2, r6
 8001c6e:	ea23 0301 	bic.w	r3, r3, r1
 8001c72:	4313      	orrs	r3, r2
 8001c74:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001c76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c7a:	21ff      	movs	r1, #255	; 0xff
 8001c7c:	40b1      	lsls	r1, r6
 8001c7e:	40b2      	lsls	r2, r6
 8001c80:	ea23 0301 	bic.w	r3, r3, r1
 8001c84:	4313      	orrs	r3, r2
 8001c86:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001c88:	e748      	b.n	8001b1c <HAL_DAC_ConfigChannel+0x2c>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001c8a:	f000 fe61 	bl	8002950 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_DAC_ConfigChannel+0x1d0>)
 8001c90:	4298      	cmp	r0, r3
 8001c92:	d90d      	bls.n	8001cb0 <HAL_DAC_ConfigChannel+0x1c0>
  hdac->Instance->MCR = tmpreg1;
 8001c94:	6828      	ldr	r0, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001c96:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8001c9a:	e783      	b.n	8001ba4 <HAL_DAC_ConfigChannel+0xb4>
  __HAL_LOCK(hdac);
 8001c9c:	2002      	movs	r0, #2
}
 8001c9e:	4770      	bx	lr
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ca0:	692b      	ldr	r3, [r5, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ca2:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	612b      	str	r3, [r5, #16]
          return HAL_TIMEOUT;
 8001caa:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001cac:	712a      	strb	r2, [r5, #4]
          return HAL_TIMEOUT;
 8001cae:	e7aa      	b.n	8001c06 <HAL_DAC_ConfigChannel+0x116>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_DAC_ConfigChannel+0x1d4>)
 8001cb2:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001cb4:	bf88      	it	hi
 8001cb6:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 8001cba:	6828      	ldr	r0, [r5, #0]
 8001cbc:	e772      	b.n	8001ba4 <HAL_DAC_ConfigChannel+0xb4>
 8001cbe:	bf00      	nop
 8001cc0:	09896800 	.word	0x09896800
 8001cc4:	04c4b400 	.word	0x04c4b400

08001cc8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	d078      	beq.n	8001dbe <HAL_DMA_Init+0xf6>
{
 8001ccc:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001cce:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <HAL_DMA_Init+0xfc>)
 8001cd0:	6804      	ldr	r4, [r0, #0]
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	d95f      	bls.n	8001d96 <HAL_DMA_Init+0xce>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cd6:	4a3c      	ldr	r2, [pc, #240]	; (8001dc8 <HAL_DMA_Init+0x100>)
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA2;
 8001cda:	493d      	ldr	r1, [pc, #244]	; (8001dd0 <HAL_DMA_Init+0x108>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cdc:	4422      	add	r2, r4
 8001cde:	fba3 3202 	umull	r3, r2, r3, r2
 8001ce2:	0912      	lsrs	r2, r2, #4
 8001ce4:	0092      	lsls	r2, r2, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce6:	2302      	movs	r3, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ce8:	6885      	ldr	r5, [r0, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001cee:	68c3      	ldr	r3, [r0, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001cf0:	4e36      	ldr	r6, [pc, #216]	; (8001dcc <HAL_DMA_Init+0x104>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001cf2:	4f34      	ldr	r7, [pc, #208]	; (8001dc4 <HAL_DMA_Init+0xfc>)
 8001cf4:	e9c0 1210 	strd	r1, r2, [r0, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf8:	6901      	ldr	r1, [r0, #16]
  tmp |=  hdma->Init.Direction        |
 8001cfa:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6941      	ldr	r1, [r0, #20]
 8001d00:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	6981      	ldr	r1, [r0, #24]
 8001d04:	430b      	orrs	r3, r1
  tmp = hdma->Instance->CCR;
 8001d06:	6821      	ldr	r1, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d08:	f421 4cff 	bic.w	ip, r1, #32640	; 0x7f80
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0c:	69c1      	ldr	r1, [r0, #28]
 8001d0e:	430b      	orrs	r3, r1
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d10:	b2e1      	uxtb	r1, r4
 8001d12:	3908      	subs	r1, #8
 8001d14:	fba6 6101 	umull	r6, r1, r6, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d18:	6a06      	ldr	r6, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d1a:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d1e:	4333      	orrs	r3, r6
  tmp |=  hdma->Init.Direction        |
 8001d20:	ea43 030c 	orr.w	r3, r3, ip
  hdma->Instance->CCR = tmp;
 8001d24:	6023      	str	r3, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d26:	4e2b      	ldr	r6, [pc, #172]	; (8001dd4 <HAL_DMA_Init+0x10c>)
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_DMA_Init+0x110>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d2a:	f3c1 1104 	ubfx	r1, r1, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d2e:	42bc      	cmp	r4, r7
 8001d30:	bf98      	it	ls
 8001d32:	4633      	movls	r3, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d34:	f04f 0c01 	mov.w	ip, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d38:	4c28      	ldr	r4, [pc, #160]	; (8001ddc <HAL_DMA_Init+0x114>)
 8001d3a:	64c4      	str	r4, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d3c:	fa0c f101 	lsl.w	r1, ip, r1
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d40:	18d4      	adds	r4, r2, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d42:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d46:	6501      	str	r1, [r0, #80]	; 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d48:	6484      	str	r4, [r0, #72]	; 0x48
 8001d4a:	ea4f 0292 	mov.w	r2, r2, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d4e:	d02b      	beq.n	8001da8 <HAL_DMA_Init+0xe0>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d50:	6845      	ldr	r5, [r0, #4]
 8001d52:	b2ec      	uxtb	r4, r5
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d54:	3d01      	subs	r5, #1
 8001d56:	2d03      	cmp	r5, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d58:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d5c:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d60:	d828      	bhi.n	8001db4 <HAL_DMA_Init+0xec>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d64:	4d1f      	ldr	r5, [pc, #124]	; (8001de4 <HAL_DMA_Init+0x11c>)
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d66:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <HAL_DMA_Init+0x120>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d68:	4423      	add	r3, r4

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d6a:	3c01      	subs	r4, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d6c:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d6e:	f004 041f 	and.w	r4, r4, #31
 8001d72:	fa0c f404 	lsl.w	r4, ip, r4
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d76:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d78:	e9c0 3515 	strd	r3, r5, [r0, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001d7c:	65c4      	str	r4, [r0, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d7e:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d80:	6454      	str	r4, [r2, #68]	; 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d82:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001d84:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d86:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001d88:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001d8c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8001d90:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8001d92:	4618      	mov	r0, r3
}
 8001d94:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d96:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_DMA_Init+0x124>)
 8001d98:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <HAL_DMA_Init+0x104>)
    hdma->DmaBaseAddress = DMA1;
 8001d9a:	4915      	ldr	r1, [pc, #84]	; (8001df0 <HAL_DMA_Init+0x128>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d9c:	4422      	add	r2, r4
 8001d9e:	fba3 3202 	umull	r3, r2, r3, r2
 8001da2:	0912      	lsrs	r2, r2, #4
 8001da4:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 8001da6:	e79e      	b.n	8001ce6 <HAL_DMA_Init+0x1e>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001da8:	2400      	movs	r4, #0
 8001daa:	6044      	str	r4, [r0, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db0:	f8c6 1084 	str.w	r1, [r6, #132]	; 0x84
    hdma->DMAmuxRequestGen = 0U;
 8001db4:	2300      	movs	r3, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 8001db6:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001dba:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001dbc:	e7e1      	b.n	8001d82 <HAL_DMA_Init+0xba>
    return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40020407 	.word	0x40020407
 8001dc8:	bffdfbf8 	.word	0xbffdfbf8
 8001dcc:	cccccccd 	.word	0xcccccccd
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020820 	.word	0x40020820
 8001ddc:	40020880 	.word	0x40020880
 8001de0:	1000823f 	.word	0x1000823f
 8001de4:	40020940 	.word	0x40020940
 8001de8:	40020900 	.word	0x40020900
 8001dec:	bffdfff8 	.word	0xbffdfff8
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_DMA_Start_IT>:
{
 8001df4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8001df6:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001dfa:	2c01      	cmp	r4, #1
 8001dfc:	d051      	beq.n	8001ea2 <HAL_DMA_Start_IT+0xae>
 8001dfe:	2401      	movs	r4, #1
 8001e00:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8001e04:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001e08:	2c01      	cmp	r4, #1
 8001e0a:	d005      	beq.n	8001e18 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8001e12:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8001e14:	2002      	movs	r0, #2
}
 8001e16:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	2402      	movs	r4, #2
 8001e1a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e1e:	2400      	movs	r4, #0
 8001e20:	63c4      	str	r4, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001e22:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e24:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    __HAL_DMA_DISABLE(hdma);
 8001e26:	6825      	ldr	r5, [r4, #0]
 8001e28:	f025 0501 	bic.w	r5, r5, #1
 8001e2c:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e2e:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	; 0x50
 8001e32:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8001e34:	b115      	cbz	r5, 8001e3c <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e36:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8001e3a:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e3c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001e3e:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8001e40:	f006 0c1f 	and.w	ip, r6, #31
 8001e44:	2601      	movs	r6, #1
 8001e46:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e4a:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001e4c:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4e:	6883      	ldr	r3, [r0, #8]
 8001e50:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8001e52:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->Instance->CPAR = DstAddress;
 8001e54:	bf0b      	itete	eq
 8001e56:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001e58:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001e5a:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001e5c:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001e5e:	b1bb      	cbz	r3, 8001e90 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e60:	6823      	ldr	r3, [r4, #0]
 8001e62:	f043 030e 	orr.w	r3, r3, #14
 8001e66:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e68:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	03d2      	lsls	r2, r2, #15
 8001e6e:	d503      	bpl.n	8001e78 <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001e78:	b11d      	cbz	r5, 8001e82 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e7a:	682b      	ldr	r3, [r5, #0]
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001e88:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001e8a:	6023      	str	r3, [r4, #0]
}
 8001e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8e:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	f023 0304 	bic.w	r3, r3, #4
 8001e96:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	f043 030a 	orr.w	r3, r3, #10
 8001e9e:	6023      	str	r3, [r4, #0]
 8001ea0:	e7e2      	b.n	8001e68 <HAL_DMA_Start_IT+0x74>
  __HAL_LOCK(hdma);
 8001ea2:	2002      	movs	r0, #2
}
 8001ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_DMA_IRQHandler>:
{
 8001ea8:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eaa:	6c43      	ldr	r3, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eac:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001eae:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001eb0:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001eb2:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2204      	movs	r2, #4
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	420a      	tst	r2, r1
 8001ebe:	d00e      	beq.n	8001ede <HAL_DMA_IRQHandler+0x36>
 8001ec0:	f014 0f04 	tst.w	r4, #4
 8001ec4:	d00b      	beq.n	8001ede <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	d403      	bmi.n	8001ed4 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001ed4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ed6:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8001ed8:	b1cb      	cbz	r3, 8001f0e <HAL_DMA_IRQHandler+0x66>
}
 8001eda:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8001edc:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001ede:	2202      	movs	r2, #2
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	420a      	tst	r2, r1
 8001ee4:	d015      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 8001ee6:	f014 0f02 	tst.w	r4, #2
 8001eea:	d012      	beq.n	8001f12 <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	0699      	lsls	r1, r3, #26
 8001ef0:	d406      	bmi.n	8001f00 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ef2:	682b      	ldr	r3, [r5, #0]
 8001ef4:	f023 030a 	bic.w	r3, r3, #10
 8001ef8:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 8001f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f02:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8001f04:	2100      	movs	r1, #0
 8001f06:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1e5      	bne.n	8001eda <HAL_DMA_IRQHandler+0x32>
}
 8001f0e:	bc70      	pop	{r4, r5, r6}
 8001f10:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001f12:	2208      	movs	r2, #8
 8001f14:	409a      	lsls	r2, r3
 8001f16:	420a      	tst	r2, r1
 8001f18:	d0f9      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8001f1a:	0722      	lsls	r2, r4, #28
 8001f1c:	d5f7      	bpl.n	8001f0e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8001f20:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f22:	f022 020e 	bic.w	r2, r2, #14
 8001f26:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f28:	2201      	movs	r2, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8001f2e:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f30:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f32:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001f34:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8001f38:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8001f3c:	2900      	cmp	r1, #0
 8001f3e:	d0e6      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x66>
}
 8001f40:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001f42:	4708      	bx	r1

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f48:	680c      	ldr	r4, [r1, #0]
{
 8001f4a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f4c:	2c00      	cmp	r4, #0
 8001f4e:	d07d      	beq.n	800204c <HAL_GPIO_Init+0x108>
 8001f50:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f54:	4e71      	ldr	r6, [pc, #452]	; (800211c <HAL_GPIO_Init+0x1d8>)
  uint32_t position = 0x00U;
 8001f56:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f58:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f5c:	468e      	mov	lr, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f5e:	fa0b f703 	lsl.w	r7, fp, r3
    if (iocurrent != 0x00u)
 8001f62:	ea17 0a04 	ands.w	sl, r7, r4
 8001f66:	d06b      	beq.n	8002040 <HAL_GPIO_Init+0xfc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f68:	f8de 1004 	ldr.w	r1, [lr, #4]
 8001f6c:	f001 0203 	and.w	r2, r1, #3
 8001f70:	1e55      	subs	r5, r2, #1
 8001f72:	2d01      	cmp	r5, #1
 8001f74:	d96d      	bls.n	8002052 <HAL_GPIO_Init+0x10e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f76:	2a03      	cmp	r2, #3
 8001f78:	f040 80b1 	bne.w	80020de <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f7c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001f80:	43d5      	mvns	r5, r2
      temp = GPIOx->MODER;
 8001f82:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f84:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f86:	432a      	orrs	r2, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f88:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001f8c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8e:	d057      	beq.n	8002040 <HAL_GPIO_Init+0xfc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4d63      	ldr	r5, [pc, #396]	; (8002120 <HAL_GPIO_Init+0x1dc>)
 8001f92:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001f94:	f042 0201 	orr.w	r2, r2, #1
 8001f98:	662a      	str	r2, [r5, #96]	; 0x60
 8001f9a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001f9c:	f002 0201 	and.w	r2, r2, #1
 8001fa0:	9203      	str	r2, [sp, #12]
 8001fa2:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa4:	f023 0203 	bic.w	r2, r3, #3
 8001fa8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001fac:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb0:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb4:	6895      	ldr	r5, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fb6:	00bf      	lsls	r7, r7, #2
 8001fb8:	f04f 080f 	mov.w	r8, #15
 8001fbc:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc4:	ea25 0908 	bic.w	r9, r5, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc8:	d01a      	beq.n	8002000 <HAL_GPIO_Init+0xbc>
 8001fca:	4d56      	ldr	r5, [pc, #344]	; (8002124 <HAL_GPIO_Init+0x1e0>)
 8001fcc:	42a8      	cmp	r0, r5
 8001fce:	f000 8092 	beq.w	80020f6 <HAL_GPIO_Init+0x1b2>
 8001fd2:	4d55      	ldr	r5, [pc, #340]	; (8002128 <HAL_GPIO_Init+0x1e4>)
 8001fd4:	42a8      	cmp	r0, r5
 8001fd6:	f000 8093 	beq.w	8002100 <HAL_GPIO_Init+0x1bc>
 8001fda:	4d54      	ldr	r5, [pc, #336]	; (800212c <HAL_GPIO_Init+0x1e8>)
 8001fdc:	42a8      	cmp	r0, r5
 8001fde:	f000 8083 	beq.w	80020e8 <HAL_GPIO_Init+0x1a4>
 8001fe2:	4d53      	ldr	r5, [pc, #332]	; (8002130 <HAL_GPIO_Init+0x1ec>)
 8001fe4:	42a8      	cmp	r0, r5
 8001fe6:	f000 8092 	beq.w	800210e <HAL_GPIO_Init+0x1ca>
 8001fea:	4d52      	ldr	r5, [pc, #328]	; (8002134 <HAL_GPIO_Init+0x1f0>)
 8001fec:	42a8      	cmp	r0, r5
 8001fee:	bf0c      	ite	eq
 8001ff0:	f04f 0805 	moveq.w	r8, #5
 8001ff4:	f04f 0806 	movne.w	r8, #6
 8001ff8:	fa08 f707 	lsl.w	r7, r8, r7
 8001ffc:	ea49 0907 	orr.w	r9, r9, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	f8c2 9008 	str.w	r9, [r2, #8]
        temp = EXTI->RTSR1;
 8002004:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8002006:	ea6f 050a 	mvn.w	r5, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200a:	02cf      	lsls	r7, r1, #11
        temp &= ~(iocurrent);
 800200c:	bf54      	ite	pl
 800200e:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 8002010:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8002014:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8002016:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	028f      	lsls	r7, r1, #10
        temp &= ~(iocurrent);
 800201a:	bf54      	ite	pl
 800201c:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800201e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8002022:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8002024:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002026:	038f      	lsls	r7, r1, #14
        temp &= ~(iocurrent);
 8002028:	bf54      	ite	pl
 800202a:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800202c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8002030:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002032:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002034:	03c9      	lsls	r1, r1, #15
        temp &= ~(iocurrent);
 8002036:	bf54      	ite	pl
 8002038:	402a      	andpl	r2, r5
        {
          temp |= iocurrent;
 800203a:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 800203e:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8002040:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002042:	fa34 f203 	lsrs.w	r2, r4, r3
 8002046:	f10c 0c02 	add.w	ip, ip, #2
 800204a:	d188      	bne.n	8001f5e <HAL_GPIO_Init+0x1a>
  }
}
 800204c:	b005      	add	sp, #20
 800204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002052:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002056:	f8de 500c 	ldr.w	r5, [lr, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800205a:	f04f 0803 	mov.w	r8, #3
 800205e:	fa08 f80c 	lsl.w	r8, r8, ip
 8002062:	ea29 0908 	bic.w	r9, r9, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002066:	fa05 f50c 	lsl.w	r5, r5, ip
 800206a:	ea45 0509 	orr.w	r5, r5, r9
        GPIOx->OSPEEDR = temp;
 800206e:	6085      	str	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002070:	ea6f 0508 	mvn.w	r5, r8
        temp = GPIOx->OTYPER;
 8002074:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002078:	ea28 0807 	bic.w	r8, r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8002080:	409f      	lsls	r7, r3
 8002082:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8002086:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002088:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800208a:	ea07 0805 	and.w	r8, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	f8de 7008 	ldr.w	r7, [lr, #8]
 8002092:	fa07 f70c 	lsl.w	r7, r7, ip
 8002096:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800209c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	fa02 f20c 	lsl.w	r2, r2, ip
 80020a2:	f47f af6e 	bne.w	8001f82 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80020a6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80020aa:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020ae:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80020b2:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80020b6:	9700      	str	r7, [sp, #0]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020b8:	f8de 7010 	ldr.w	r7, [lr, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020bc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c0:	fa07 f708 	lsl.w	r7, r7, r8
 80020c4:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c6:	270f      	movs	r7, #15
 80020c8:	fa07 f808 	lsl.w	r8, r7, r8
 80020cc:	9f00      	ldr	r7, [sp, #0]
 80020ce:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020d2:	9f01      	ldr	r7, [sp, #4]
 80020d4:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80020d8:	f8c9 7020 	str.w	r7, [r9, #32]
 80020dc:	e751      	b.n	8001f82 <HAL_GPIO_Init+0x3e>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020de:	2503      	movs	r5, #3
 80020e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80020e4:	43ed      	mvns	r5, r5
 80020e6:	e7cf      	b.n	8002088 <HAL_GPIO_Init+0x144>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e8:	f04f 0803 	mov.w	r8, #3
 80020ec:	fa08 f707 	lsl.w	r7, r8, r7
 80020f0:	ea49 0907 	orr.w	r9, r9, r7
 80020f4:	e784      	b.n	8002000 <HAL_GPIO_Init+0xbc>
 80020f6:	fa0b f707 	lsl.w	r7, fp, r7
 80020fa:	ea49 0907 	orr.w	r9, r9, r7
 80020fe:	e77f      	b.n	8002000 <HAL_GPIO_Init+0xbc>
 8002100:	f04f 0802 	mov.w	r8, #2
 8002104:	fa08 f707 	lsl.w	r7, r8, r7
 8002108:	ea49 0907 	orr.w	r9, r9, r7
 800210c:	e778      	b.n	8002000 <HAL_GPIO_Init+0xbc>
 800210e:	f04f 0804 	mov.w	r8, #4
 8002112:	fa08 f707 	lsl.w	r7, r8, r7
 8002116:	ea49 0907 	orr.w	r9, r9, r7
 800211a:	e771      	b.n	8002000 <HAL_GPIO_Init+0xbc>
 800211c:	40010400 	.word	0x40010400
 8002120:	40021000 	.word	0x40021000
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48001000 	.word	0x48001000
 8002134:	48001400 	.word	0x48001400

08002138 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002138:	b10a      	cbz	r2, 800213e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800213a:	6181      	str	r1, [r0, #24]
 800213c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800213e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop

08002144 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002144:	4a37      	ldr	r2, [pc, #220]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xe0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002146:	b960      	cbnz	r0, 8002162 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800214e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002152:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002156:	d01d      	beq.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x50>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800215c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002160:	4770      	bx	lr
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002162:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002166:	d007      	beq.n	8002178 <HAL_PWREx_ControlVoltageScaling+0x34>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002168:	6813      	ldr	r3, [r2, #0]
 800216a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800216e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002172:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002174:	6013      	str	r3, [r2, #0]
}
 8002176:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002178:	6813      	ldr	r3, [r2, #0]
 800217a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002182:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002186:	d02b      	beq.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x9c>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 800218c:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800218e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002192:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800219c:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800219e:	4822      	ldr	r0, [pc, #136]	; (8002228 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80021a0:	4922      	ldr	r1, [pc, #136]	; (800222c <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021aa:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ac:	6803      	ldr	r3, [r0, #0]
 80021ae:	2032      	movs	r0, #50	; 0x32
 80021b0:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021b6:	fba1 1303 	umull	r1, r3, r1, r3
 80021ba:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021bc:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021be:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021c2:	d506      	bpl.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80021c4:	e000      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x84>
 80021c6:	b123      	cbz	r3, 80021d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 80021c8:	6951      	ldr	r1, [r2, #20]
 80021ca:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80021cc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d0:	d4f9      	bmi.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x82>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	055b      	lsls	r3, r3, #21
  return HAL_OK;
 80021d8:	bf54      	ite	pl
 80021da:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80021dc:	2003      	movmi	r0, #3
 80021de:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ea:	480f      	ldr	r0, [pc, #60]	; (8002228 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80021ec:	490f      	ldr	r1, [pc, #60]	; (800222c <HAL_PWREx_ControlVoltageScaling+0xe8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	6803      	ldr	r3, [r0, #0]
 80021fa:	2032      	movs	r0, #50	; 0x32
 80021fc:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002200:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002202:	fba1 1303 	umull	r1, r3, r1, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002208:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800220e:	d5e0      	bpl.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8002210:	e001      	b.n	8002216 <HAL_PWREx_ControlVoltageScaling+0xd2>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0dd      	beq.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8002216:	6951      	ldr	r1, [r2, #20]
 8002218:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800221a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800221e:	d5d8      	bpl.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x8e>
 8002220:	e7f7      	b.n	8002212 <HAL_PWREx_ControlVoltageScaling+0xce>
 8002222:	bf00      	nop
 8002224:	40007000 	.word	0x40007000
 8002228:	2000001c 	.word	0x2000001c
 800222c:	431bde83 	.word	0x431bde83

08002230 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002230:	4a02      	ldr	r2, [pc, #8]	; (800223c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002232:	6893      	ldr	r3, [r2, #8]
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6093      	str	r3, [r2, #8]
}
 800223a:	4770      	bx	lr
 800223c:	40007000 	.word	0x40007000

08002240 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	2800      	cmp	r0, #0
 8002242:	f000 81c3 	beq.w	80025cc <HAL_RCC_OscConfig+0x38c>
{
 8002246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	6803      	ldr	r3, [r0, #0]
 800224c:	07d9      	lsls	r1, r3, #31
{
 800224e:	b082      	sub	sp, #8
 8002250:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	d52d      	bpl.n	80022b0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002254:	49a6      	ldr	r1, [pc, #664]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 8002256:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002258:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800225e:	2a0c      	cmp	r2, #12
 8002260:	f000 810a 	beq.w	8002478 <HAL_RCC_OscConfig+0x238>
 8002264:	2a08      	cmp	r2, #8
 8002266:	f000 810c 	beq.w	8002482 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	6863      	ldr	r3, [r4, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	f000 8133 	beq.w	80024da <HAL_RCC_OscConfig+0x29a>
 8002274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002278:	f000 819b 	beq.w	80025b2 <HAL_RCC_OscConfig+0x372>
 800227c:	4d9c      	ldr	r5, [pc, #624]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 800227e:	682a      	ldr	r2, [r5, #0]
 8002280:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002284:	602a      	str	r2, [r5, #0]
 8002286:	682a      	ldr	r2, [r5, #0]
 8002288:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800228c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800228e:	2b00      	cmp	r3, #0
 8002290:	f040 8128 	bne.w	80024e4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fe60 	bl	8000f58 <HAL_GetTick>
 8002298:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229a:	e005      	b.n	80022a8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fe5c 	bl	8000f58 <HAL_GetTick>
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	2864      	cmp	r0, #100	; 0x64
 80022a4:	f200 8142 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	039f      	lsls	r7, r3, #14
 80022ac:	d4f6      	bmi.n	800229c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	079e      	lsls	r6, r3, #30
 80022b2:	d528      	bpl.n	8002306 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b4:	4a8e      	ldr	r2, [pc, #568]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 80022b6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	f000 80ec 	beq.w	800249c <HAL_RCC_OscConfig+0x25c>
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	f000 80ee 	beq.w	80024a6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ca:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022cc:	4d88      	ldr	r5, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 811d 	beq.w	800250e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fe3c 	bl	8000f58 <HAL_GetTick>
 80022e0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e4:	f7fe fe38 	bl	8000f58 <HAL_GetTick>
 80022e8:	1b80      	subs	r0, r0, r6
 80022ea:	2802      	cmp	r0, #2
 80022ec:	f200 811e 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	0558      	lsls	r0, r3, #21
 80022f4:	d5f6      	bpl.n	80022e4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	686b      	ldr	r3, [r5, #4]
 80022f8:	6922      	ldr	r2, [r4, #16]
 80022fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022fe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002302:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	071a      	lsls	r2, r3, #28
 8002308:	d519      	bpl.n	800233e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230c:	4d78      	ldr	r5, [pc, #480]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 809e 	beq.w	8002450 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8002314:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe fe1a 	bl	8000f58 <HAL_GetTick>
 8002324:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	e005      	b.n	8002334 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fe16 	bl	8000f58 <HAL_GetTick>
 800232c:	1b80      	subs	r0, r0, r6
 800232e:	2802      	cmp	r0, #2
 8002330:	f200 80fc 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002334:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002338:	079f      	lsls	r7, r3, #30
 800233a:	d5f5      	bpl.n	8002328 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	0759      	lsls	r1, r3, #29
 8002340:	d541      	bpl.n	80023c6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002342:	4b6b      	ldr	r3, [pc, #428]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 8002344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002346:	00d2      	lsls	r2, r2, #3
 8002348:	f100 80f4 	bmi.w	8002534 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800234e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002352:	659a      	str	r2, [r3, #88]	; 0x58
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800235e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002360:	4e64      	ldr	r6, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x2b4>)
 8002362:	6833      	ldr	r3, [r6, #0]
 8002364:	05df      	lsls	r7, r3, #23
 8002366:	f140 8113 	bpl.w	8002590 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	68a3      	ldr	r3, [r4, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	f000 80e3 	beq.w	8002538 <HAL_RCC_OscConfig+0x2f8>
 8002372:	2b05      	cmp	r3, #5
 8002374:	f000 8169 	beq.w	800264a <HAL_RCC_OscConfig+0x40a>
 8002378:	4e5d      	ldr	r6, [pc, #372]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 800237a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002386:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002392:	2b00      	cmp	r3, #0
 8002394:	f040 80d7 	bne.w	8002546 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe fdde 	bl	8000f58 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023a0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a2:	e005      	b.n	80023b0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fdd8 	bl	8000f58 <HAL_GetTick>
 80023a8:	1bc0      	subs	r0, r0, r7
 80023aa:	4540      	cmp	r0, r8
 80023ac:	f200 80be 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80023b4:	079a      	lsls	r2, r3, #30
 80023b6:	d4f5      	bmi.n	80023a4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b8:	b125      	cbz	r5, 80023c4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4a4d      	ldr	r2, [pc, #308]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 80023bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80023be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	d518      	bpl.n	80023fc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ca:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023cc:	4d48      	ldr	r5, [pc, #288]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 80ca 	beq.w	8002568 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 80023d4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe fdba 	bl	8000f58 <HAL_GetTick>
 80023e4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e8:	f7fe fdb6 	bl	8000f58 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	2802      	cmp	r0, #2
 80023f0:	f200 809c 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80023f8:	079f      	lsls	r7, r3, #30
 80023fa:	d5f5      	bpl.n	80023e8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023fc:	69e0      	ldr	r0, [r4, #28]
 80023fe:	b318      	cbz	r0, 8002448 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002400:	4d3b      	ldr	r5, [pc, #236]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 8002402:	68ab      	ldr	r3, [r5, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b0c      	cmp	r3, #12
 800240a:	f000 812c 	beq.w	8002666 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002410:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002416:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002418:	f000 80da 	beq.w	80025d0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800241c:	68eb      	ldr	r3, [r5, #12]
 800241e:	f023 0303 	bic.w	r3, r3, #3
 8002422:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002424:	68eb      	ldr	r3, [r5, #12]
 8002426:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fd92 	bl	8000f58 <HAL_GetTick>
 8002434:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002436:	e004      	b.n	8002442 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fd8e 	bl	8000f58 <HAL_GetTick>
 800243c:	1b00      	subs	r0, r0, r4
 800243e:	2802      	cmp	r0, #2
 8002440:	d874      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002442:	682b      	ldr	r3, [r5, #0]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	d4f7      	bmi.n	8002438 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8002448:	2000      	movs	r0, #0
}
 800244a:	b002      	add	sp, #8
 800244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002450:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 800245c:	f7fe fd7c 	bl	8000f58 <HAL_GetTick>
 8002460:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002462:	e004      	b.n	800246e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002464:	f7fe fd78 	bl	8000f58 <HAL_GetTick>
 8002468:	1b80      	subs	r0, r0, r6
 800246a:	2802      	cmp	r0, #2
 800246c:	d85e      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800246e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002472:	0798      	lsls	r0, r3, #30
 8002474:	d4f6      	bmi.n	8002464 <HAL_RCC_OscConfig+0x224>
 8002476:	e761      	b.n	800233c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002478:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800247c:	2903      	cmp	r1, #3
 800247e:	f47f aef4 	bne.w	800226a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	0392      	lsls	r2, r2, #14
 8002488:	f57f af12 	bpl.w	80022b0 <HAL_RCC_OscConfig+0x70>
 800248c:	6862      	ldr	r2, [r4, #4]
 800248e:	2a00      	cmp	r2, #0
 8002490:	f47f af0e 	bne.w	80022b0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
}
 8002496:	b002      	add	sp, #8
 8002498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024a0:	2a02      	cmp	r2, #2
 80024a2:	f47f af12 	bne.w	80022ca <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	055d      	lsls	r5, r3, #21
 80024ac:	d502      	bpl.n	80024b4 <HAL_RCC_OscConfig+0x274>
 80024ae:	68e3      	ldr	r3, [r4, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 80024b6:	6920      	ldr	r0, [r4, #16]
 80024b8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024ba:	490f      	ldr	r1, [pc, #60]	; (80024f8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80024c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80024c4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024c6:	6808      	ldr	r0, [r1, #0]
 80024c8:	f7fe fd04 	bl	8000ed4 <HAL_InitTick>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d1e1      	bne.n	8002494 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	071a      	lsls	r2, r3, #28
 80024d4:	f57f af33 	bpl.w	800233e <HAL_RCC_OscConfig+0xfe>
 80024d8:	e717      	b.n	800230a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024e4:	f7fe fd38 	bl	8000f58 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	4e01      	ldr	r6, [pc, #4]	; (80024f0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80024ea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ec:	e00b      	b.n	8002506 <HAL_RCC_OscConfig+0x2c6>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40007000 	.word	0x40007000
 80024f8:	20000024 	.word	0x20000024
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fd2c 	bl	8000f58 <HAL_GetTick>
 8002500:	1b40      	subs	r0, r0, r5
 8002502:	2864      	cmp	r0, #100	; 0x64
 8002504:	d812      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002506:	6833      	ldr	r3, [r6, #0]
 8002508:	039b      	lsls	r3, r3, #14
 800250a:	d5f7      	bpl.n	80024fc <HAL_RCC_OscConfig+0x2bc>
 800250c:	e6cf      	b.n	80022ae <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002514:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002516:	f7fe fd1f 	bl	8000f58 <HAL_GetTick>
 800251a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251c:	682b      	ldr	r3, [r5, #0]
 800251e:	0559      	lsls	r1, r3, #21
 8002520:	d5d6      	bpl.n	80024d0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fd19 	bl	8000f58 <HAL_GetTick>
 8002526:	1b80      	subs	r0, r0, r6
 8002528:	2802      	cmp	r0, #2
 800252a:	d9f7      	bls.n	800251c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 800252c:	2003      	movs	r0, #3
}
 800252e:	b002      	add	sp, #8
 8002530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002534:	2500      	movs	r5, #0
 8002536:	e713      	b.n	8002360 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002538:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x490>)
 800253a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002546:	f7fe fd07 	bl	8000f58 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254a:	4f61      	ldr	r7, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 800254c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002552:	e004      	b.n	800255e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fd00 	bl	8000f58 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	4540      	cmp	r0, r8
 800255c:	d8e6      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002562:	0799      	lsls	r1, r3, #30
 8002564:	d5f6      	bpl.n	8002554 <HAL_RCC_OscConfig+0x314>
 8002566:	e727      	b.n	80023b8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8002568:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002574:	f7fe fcf0 	bl	8000f58 <HAL_GetTick>
 8002578:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800257a:	e004      	b.n	8002586 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257c:	f7fe fcec 	bl	8000f58 <HAL_GetTick>
 8002580:	1b80      	subs	r0, r0, r6
 8002582:	2802      	cmp	r0, #2
 8002584:	d8d2      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002586:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800258a:	0798      	lsls	r0, r3, #30
 800258c:	d4f6      	bmi.n	800257c <HAL_RCC_OscConfig+0x33c>
 800258e:	e735      	b.n	80023fc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002590:	6833      	ldr	r3, [r6, #0]
 8002592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002596:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002598:	f7fe fcde 	bl	8000f58 <HAL_GetTick>
 800259c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	6833      	ldr	r3, [r6, #0]
 80025a0:	05d8      	lsls	r0, r3, #23
 80025a2:	f53f aee2 	bmi.w	800236a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7fe fcd7 	bl	8000f58 <HAL_GetTick>
 80025aa:	1bc0      	subs	r0, r0, r7
 80025ac:	2802      	cmp	r0, #2
 80025ae:	d9f6      	bls.n	800259e <HAL_RCC_OscConfig+0x35e>
 80025b0:	e7bc      	b.n	800252c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025b6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025c8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ca:	e78b      	b.n	80024e4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 80025cc:	2001      	movs	r0, #1
}
 80025ce:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80025d0:	f7fe fcc2 	bl	8000f58 <HAL_GetTick>
 80025d4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d6:	e004      	b.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fcbe 	bl	8000f58 <HAL_GetTick>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	2802      	cmp	r0, #2
 80025e0:	d8a4      	bhi.n	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e2:	682b      	ldr	r3, [r5, #0]
 80025e4:	0199      	lsls	r1, r3, #6
 80025e6:	d4f7      	bmi.n	80025d8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e8:	68e9      	ldr	r1, [r5, #12]
 80025ea:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x494>)
 80025ec:	6a22      	ldr	r2, [r4, #32]
 80025ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f0:	4e37      	ldr	r6, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	400b      	ands	r3, r1
 80025f4:	4313      	orrs	r3, r2
 80025f6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 80025fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80025fe:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8002602:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8002606:	3801      	subs	r0, #1
 8002608:	0849      	lsrs	r1, r1, #1
 800260a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800260e:	3901      	subs	r1, #1
 8002610:	0852      	lsrs	r2, r2, #1
 8002612:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002616:	3a01      	subs	r2, #1
 8002618:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800261c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002624:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002626:	68eb      	ldr	r3, [r5, #12]
 8002628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800262e:	f7fe fc93 	bl	8000f58 <HAL_GetTick>
 8002632:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002634:	e005      	b.n	8002642 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fc8f 	bl	8000f58 <HAL_GetTick>
 800263a:	1b00      	subs	r0, r0, r4
 800263c:	2802      	cmp	r0, #2
 800263e:	f63f af75 	bhi.w	800252c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	6833      	ldr	r3, [r6, #0]
 8002644:	019a      	lsls	r2, r3, #6
 8002646:	d5f6      	bpl.n	8002636 <HAL_RCC_OscConfig+0x3f6>
 8002648:	e6fe      	b.n	8002448 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <HAL_RCC_OscConfig+0x490>)
 800264c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002650:	f042 0204 	orr.w	r2, r2, #4
 8002654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002658:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002664:	e76f      	b.n	8002546 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002666:	2801      	cmp	r0, #1
 8002668:	f43f aeef 	beq.w	800244a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 800266c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	6a22      	ldr	r2, [r4, #32]
 8002670:	f003 0103 	and.w	r1, r3, #3
 8002674:	4291      	cmp	r1, r2
 8002676:	f47f af0d 	bne.w	8002494 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800267a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800267c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002680:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002686:	f47f af05 	bne.w	8002494 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800268a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800268c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002690:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002694:	f47f aefe 	bne.w	8002494 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002698:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800269a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800269e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80026a2:	f47f aef7 	bne.w	8002494 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026a8:	0852      	lsrs	r2, r2, #1
 80026aa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80026ae:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80026b4:	f47f aeee 	bne.w	8002494 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80026c0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80026c6:	bf14      	ite	ne
 80026c8:	2001      	movne	r0, #1
 80026ca:	2000      	moveq	r0, #0
 80026cc:	e6bd      	b.n	800244a <HAL_RCC_OscConfig+0x20a>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	019f800c 	.word	0x019f800c

080026d8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <HAL_RCC_GetSysClockFreq+0x64>)
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f002 020c 	and.w	r2, r2, #12
 80026e0:	2a04      	cmp	r2, #4
 80026e2:	d026      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	f002 020c 	and.w	r2, r2, #12
 80026ea:	2a08      	cmp	r2, #8
 80026ec:	d023      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	f002 020c 	and.w	r2, r2, #12
 80026f4:	2a0c      	cmp	r2, #12
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80026f8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 80026fa:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026fe:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002700:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8002706:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800270c:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002710:	bf0c      	ite	eq
 8002712:	4b0b      	ldreq	r3, [pc, #44]	; (8002740 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002714:	4b0b      	ldrne	r3, [pc, #44]	; (8002744 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002716:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002718:	fbb3 f3f2 	udiv	r3, r3, r2
 800271c:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetSysClockFreq+0x64>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800272c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002730:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002732:	4804      	ldr	r0, [pc, #16]	; (8002744 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002734:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002736:	4802      	ldr	r0, [pc, #8]	; (8002740 <HAL_RCC_GetSysClockFreq+0x68>)
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	007a1200 	.word	0x007a1200
 8002744:	00f42400 	.word	0x00f42400

08002748 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002748:	2800      	cmp	r0, #0
 800274a:	f000 80ee 	beq.w	800292a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274e:	4a78      	ldr	r2, [pc, #480]	; (8002930 <HAL_RCC_ClockConfig+0x1e8>)
{
 8002750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	6813      	ldr	r3, [r2, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	428b      	cmp	r3, r1
 800275c:	460d      	mov	r5, r1
 800275e:	4604      	mov	r4, r0
 8002760:	d20c      	bcs.n	800277c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	6813      	ldr	r3, [r2, #0]
 8002764:	f023 030f 	bic.w	r3, r3, #15
 8002768:	430b      	orrs	r3, r1
 800276a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276c:	6813      	ldr	r3, [r2, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	428b      	cmp	r3, r1
 8002774:	d002      	beq.n	800277c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002776:	2001      	movs	r0, #1
}
 8002778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	07df      	lsls	r7, r3, #31
 8002780:	d569      	bpl.n	8002856 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	6867      	ldr	r7, [r4, #4]
 8002784:	2f03      	cmp	r7, #3
 8002786:	f000 80a0 	beq.w	80028ca <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	4b6a      	ldr	r3, [pc, #424]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002790:	f000 8097 	beq.w	80028c2 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	055b      	lsls	r3, r3, #21
 8002796:	d5ee      	bpl.n	8002776 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002798:	f7ff ff9e 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 800279c:	4b66      	ldr	r3, [pc, #408]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4298      	cmp	r0, r3
 80027a0:	f240 80c0 	bls.w	8002924 <HAL_RCC_ClockConfig+0x1dc>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027a4:	4a63      	ldr	r2, [pc, #396]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 80027a6:	6893      	ldr	r3, [r2, #8]
 80027a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027b2:	f04f 0980 	mov.w	r9, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4e5f      	ldr	r6, [pc, #380]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 80027b8:	68b3      	ldr	r3, [r6, #8]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	433b      	orrs	r3, r7
 80027c0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80027c2:	f7fe fbc9 	bl	8000f58 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027cc:	e004      	b.n	80027d8 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ce:	f7fe fbc3 	bl	8000f58 <HAL_GetTick>
 80027d2:	1bc0      	subs	r0, r0, r7
 80027d4:	4540      	cmp	r0, r8
 80027d6:	d871      	bhi.n	80028bc <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d8:	68b3      	ldr	r3, [r6, #8]
 80027da:	6862      	ldr	r2, [r4, #4]
 80027dc:	f003 030c 	and.w	r3, r3, #12
 80027e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027e4:	d1f3      	bne.n	80027ce <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	079f      	lsls	r7, r3, #30
 80027ea:	d436      	bmi.n	800285a <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 80027ec:	f1b9 0f00 	cmp.w	r9, #0
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027f2:	68b3      	ldr	r3, [r6, #8]
 80027f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f8:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fa:	4e4d      	ldr	r6, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x1e8>)
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	42ab      	cmp	r3, r5
 8002804:	d846      	bhi.n	8002894 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	075a      	lsls	r2, r3, #29
 800280a:	d506      	bpl.n	800281a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4949      	ldr	r1, [pc, #292]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	68e0      	ldr	r0, [r4, #12]
 8002810:	688a      	ldr	r2, [r1, #8]
 8002812:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002816:	4302      	orrs	r2, r0
 8002818:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	071b      	lsls	r3, r3, #28
 800281c:	d507      	bpl.n	800282e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4a45      	ldr	r2, [pc, #276]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	6921      	ldr	r1, [r4, #16]
 8002822:	6893      	ldr	r3, [r2, #8]
 8002824:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002828:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800282c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282e:	f7ff ff53 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002832:	4a40      	ldr	r2, [pc, #256]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 8002834:	4c41      	ldr	r4, [pc, #260]	; (800293c <HAL_RCC_ClockConfig+0x1f4>)
 8002836:	6892      	ldr	r2, [r2, #8]
 8002838:	4941      	ldr	r1, [pc, #260]	; (8002940 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800283e:	4603      	mov	r3, r0
 8002840:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8002842:	4840      	ldr	r0, [pc, #256]	; (8002944 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	40d3      	lsrs	r3, r2
 800284a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800284c:	6800      	ldr	r0, [r0, #0]
}
 800284e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8002852:	f7fe bb3f 	b.w	8000ed4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002856:	079e      	lsls	r6, r3, #30
 8002858:	d5cf      	bpl.n	80027fa <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285a:	0758      	lsls	r0, r3, #29
 800285c:	d504      	bpl.n	8002868 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800285e:	4935      	ldr	r1, [pc, #212]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	688a      	ldr	r2, [r1, #8]
 8002862:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002866:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002868:	0719      	lsls	r1, r3, #28
 800286a:	d506      	bpl.n	800287a <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800286c:	4a31      	ldr	r2, [pc, #196]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 800286e:	6893      	ldr	r3, [r2, #8]
 8002870:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002874:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002878:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287a:	4a2e      	ldr	r2, [pc, #184]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	68a1      	ldr	r1, [r4, #8]
 800287e:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002880:	4e2b      	ldr	r6, [pc, #172]	; (8002930 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002886:	430b      	orrs	r3, r1
 8002888:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288a:	6833      	ldr	r3, [r6, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	42ab      	cmp	r3, r5
 8002892:	d9b8      	bls.n	8002806 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002894:	6833      	ldr	r3, [r6, #0]
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	432b      	orrs	r3, r5
 800289c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800289e:	f7fe fb5b 	bl	8000f58 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a2:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80028a6:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a8:	6833      	ldr	r3, [r6, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	42ab      	cmp	r3, r5
 80028b0:	d0a9      	beq.n	8002806 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b2:	f7fe fb51 	bl	8000f58 <HAL_GetTick>
 80028b6:	1bc0      	subs	r0, r0, r7
 80028b8:	4540      	cmp	r0, r8
 80028ba:	d9f5      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80028bc:	2003      	movs	r0, #3
}
 80028be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c2:	039a      	lsls	r2, r3, #14
 80028c4:	f53f af68 	bmi.w	8002798 <HAL_RCC_ClockConfig+0x50>
 80028c8:	e755      	b.n	8002776 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	4a1a      	ldr	r2, [pc, #104]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
 80028cc:	6811      	ldr	r1, [r2, #0]
 80028ce:	0188      	lsls	r0, r1, #6
 80028d0:	f57f af51 	bpl.w	8002776 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d4:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d6:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d8:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80028da:	4e17      	ldr	r6, [pc, #92]	; (8002938 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028dc:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80028e0:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e2:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e6:	bf0c      	ite	eq
 80028e8:	4817      	ldreq	r0, [pc, #92]	; (8002948 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ea:	4818      	ldrne	r0, [pc, #96]	; (800294c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028ec:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ee:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028f2:	4810      	ldr	r0, [pc, #64]	; (8002934 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80028f8:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028fc:	68c1      	ldr	r1, [r0, #12]
 80028fe:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8002902:	3101      	adds	r1, #1
 8002904:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8002906:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800290a:	42b2      	cmp	r2, r6
 800290c:	d90a      	bls.n	8002924 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800290e:	6882      	ldr	r2, [r0, #8]
 8002910:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8002914:	f43f af46 	beq.w	80027a4 <HAL_RCC_ClockConfig+0x5c>
 8002918:	0799      	lsls	r1, r3, #30
 800291a:	d503      	bpl.n	8002924 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800291c:	68a3      	ldr	r3, [r4, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	f43f af40 	beq.w	80027a4 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002924:	f04f 0900 	mov.w	r9, #0
 8002928:	e745      	b.n	80027b6 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800292a:	2001      	movs	r0, #1
}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	04c4b400 	.word	0x04c4b400
 800293c:	08004ab0 	.word	0x08004ab0
 8002940:	2000001c 	.word	0x2000001c
 8002944:	20000024 	.word	0x20000024
 8002948:	007a1200 	.word	0x007a1200
 800294c:	00f42400 	.word	0x00f42400

08002950 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8002950:	4b01      	ldr	r3, [pc, #4]	; (8002958 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	2000001c 	.word	0x2000001c

0800295c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002960:	6803      	ldr	r3, [r0, #0]
{
 8002962:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002964:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8002968:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800296a:	d056      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b9f      	ldr	r3, [pc, #636]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800296e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002970:	00d5      	lsls	r5, r2, #3
 8002972:	f140 810c 	bpl.w	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002978:	4d9d      	ldr	r5, [pc, #628]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800297a:	682b      	ldr	r3, [r5, #0]
 800297c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002980:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002982:	f7fe fae9 	bl	8000f58 <HAL_GetTick>
 8002986:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002988:	e005      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe fae5 	bl	8000f58 <HAL_GetTick>
 800298e:	1b83      	subs	r3, r0, r6
 8002990:	2b02      	cmp	r3, #2
 8002992:	f200 8107 	bhi.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002996:	682b      	ldr	r3, [r5, #0]
 8002998:	05d8      	lsls	r0, r3, #23
 800299a:	d5f6      	bpl.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800299c:	4d93      	ldr	r5, [pc, #588]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800299e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029a2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029a6:	d027      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80029a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d025      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ae:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029be:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029ca:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029ce:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80029d0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d4:	f140 8108 	bpl.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fabe 	bl	8000f58 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80029e0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fab8 	bl	8000f58 <HAL_GetTick>
 80029e8:	1b80      	subs	r0, r0, r6
 80029ea:	4540      	cmp	r0, r8
 80029ec:	f200 80da 	bhi.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80029f4:	079b      	lsls	r3, r3, #30
 80029f6:	d5f5      	bpl.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fa:	497c      	ldr	r1, [pc, #496]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80029fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002a00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a0a:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a0c:	b127      	cbz	r7, 8002a18 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0e:	4a77      	ldr	r2, [pc, #476]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	07de      	lsls	r6, r3, #31
 8002a1c:	d508      	bpl.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4973      	ldr	r1, [pc, #460]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a20:	6865      	ldr	r5, [r4, #4]
 8002a22:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a26:	f022 0203 	bic.w	r2, r2, #3
 8002a2a:	432a      	orrs	r2, r5
 8002a2c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a30:	079d      	lsls	r5, r3, #30
 8002a32:	d508      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a34:	496d      	ldr	r1, [pc, #436]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a36:	68a5      	ldr	r5, [r4, #8]
 8002a38:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a3c:	f022 020c 	bic.w	r2, r2, #12
 8002a40:	432a      	orrs	r2, r5
 8002a42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a46:	0759      	lsls	r1, r3, #29
 8002a48:	d508      	bpl.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a4a:	4968      	ldr	r1, [pc, #416]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a4c:	68e5      	ldr	r5, [r4, #12]
 8002a4e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a52:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002a56:	432a      	orrs	r2, r5
 8002a58:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a5c:	071a      	lsls	r2, r3, #28
 8002a5e:	d508      	bpl.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a60:	4962      	ldr	r1, [pc, #392]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a62:	6925      	ldr	r5, [r4, #16]
 8002a64:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a68:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a6c:	432a      	orrs	r2, r5
 8002a6e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a72:	069f      	lsls	r7, r3, #26
 8002a74:	d508      	bpl.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a76:	495d      	ldr	r1, [pc, #372]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a78:	6965      	ldr	r5, [r4, #20]
 8002a7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002a82:	432a      	orrs	r2, r5
 8002a84:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a88:	065e      	lsls	r6, r3, #25
 8002a8a:	d508      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8c:	4957      	ldr	r1, [pc, #348]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002a8e:	69a5      	ldr	r5, [r4, #24]
 8002a90:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002a94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002a98:	432a      	orrs	r2, r5
 8002a9a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a9e:	061d      	lsls	r5, r3, #24
 8002aa0:	d508      	bpl.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aa2:	4952      	ldr	r1, [pc, #328]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002aa4:	69e5      	ldr	r5, [r4, #28]
 8002aa6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002aae:	432a      	orrs	r2, r5
 8002ab0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ab4:	05d9      	lsls	r1, r3, #23
 8002ab6:	d508      	bpl.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab8:	494c      	ldr	r1, [pc, #304]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002aba:	6a25      	ldr	r5, [r4, #32]
 8002abc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ac0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002ac4:	432a      	orrs	r2, r5
 8002ac6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002aca:	059a      	lsls	r2, r3, #22
 8002acc:	d508      	bpl.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ace:	4947      	ldr	r1, [pc, #284]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002ad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ad2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ad6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002ada:	432a      	orrs	r2, r5
 8002adc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ae0:	055f      	lsls	r7, r3, #21
 8002ae2:	d50b      	bpl.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae4:	4941      	ldr	r1, [pc, #260]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002ae6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002ae8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002aec:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002af0:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002af2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002afa:	d055      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002afc:	051e      	lsls	r6, r3, #20
 8002afe:	d50b      	bpl.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b00:	493a      	ldr	r1, [pc, #232]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b02:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002b04:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b08:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002b0c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b0e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b16:	d04c      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b18:	04dd      	lsls	r5, r3, #19
 8002b1a:	d50b      	bpl.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b1c:	4933      	ldr	r1, [pc, #204]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b1e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002b20:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b28:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b2a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b32:	d043      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b34:	0499      	lsls	r1, r3, #18
 8002b36:	d50b      	bpl.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b38:	492c      	ldr	r1, [pc, #176]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b3a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002b3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b40:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002b44:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b46:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4e:	d03a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b50:	045a      	lsls	r2, r3, #17
 8002b52:	d50b      	bpl.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b54:	4925      	ldr	r1, [pc, #148]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b56:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002b58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002b5c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8002b60:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b62:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b66:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b6a:	d031      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	d50b      	bpl.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b70:	4a1e      	ldr	r2, [pc, #120]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002b72:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002b74:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b78:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002b7c:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b7e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b86:	d028      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8002b88:	b002      	add	sp, #8
 8002b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b94:	659a      	str	r2, [r3, #88]	; 0x58
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ba0:	2701      	movs	r7, #1
 8002ba2:	e6e9      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      status = ret;
 8002ba4:	2003      	movs	r0, #3
 8002ba6:	e731      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	68ca      	ldr	r2, [r1, #12]
 8002baa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bae:	60ca      	str	r2, [r1, #12]
 8002bb0:	e7a4      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb2:	68ca      	ldr	r2, [r1, #12]
 8002bb4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bb8:	60ca      	str	r2, [r1, #12]
 8002bba:	e7ad      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bbc:	68ca      	ldr	r2, [r1, #12]
 8002bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bc2:	60ca      	str	r2, [r1, #12]
 8002bc4:	e7b6      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc6:	68ca      	ldr	r2, [r1, #12]
 8002bc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bcc:	60ca      	str	r2, [r1, #12]
 8002bce:	e7bf      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	68ca      	ldr	r2, [r1, #12]
 8002bd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bd6:	60ca      	str	r2, [r1, #12]
 8002bd8:	e7c8      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bda:	68d3      	ldr	r3, [r2, #12]
 8002bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be0:	60d3      	str	r3, [r2, #12]
}
 8002be2:	b002      	add	sp, #8
 8002be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002be8:	4613      	mov	r3, r2
 8002bea:	e706      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40007000 	.word	0x40007000

08002bf4 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	f000 8081 	beq.w	8002cfc <HAL_TIM_Base_Init+0x108>
{
 8002bfa:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c00:	4604      	mov	r4, r0
 8002c02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d06d      	beq.n	8002ce6 <HAL_TIM_Base_Init+0xf2>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	493c      	ldr	r1, [pc, #240]	; (8002d00 <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8002c16:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c18:	d051      	beq.n	8002cbe <HAL_TIM_Base_Init+0xca>
 8002c1a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002c1e:	d021      	beq.n	8002c64 <HAL_TIM_Base_Init+0x70>
 8002c20:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8002c24:	428a      	cmp	r2, r1
 8002c26:	d01d      	beq.n	8002c64 <HAL_TIM_Base_Init+0x70>
 8002c28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c2c:	428a      	cmp	r2, r1
 8002c2e:	d019      	beq.n	8002c64 <HAL_TIM_Base_Init+0x70>
 8002c30:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8002c34:	428a      	cmp	r2, r1
 8002c36:	d042      	beq.n	8002cbe <HAL_TIM_Base_Init+0xca>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c38:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8002c3c:	428a      	cmp	r2, r1
 8002c3e:	d057      	beq.n	8002cf0 <HAL_TIM_Base_Init+0xfc>
 8002c40:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c44:	428a      	cmp	r2, r1
 8002c46:	d053      	beq.n	8002cf0 <HAL_TIM_Base_Init+0xfc>
 8002c48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002c4c:	428a      	cmp	r2, r1
 8002c4e:	d04f      	beq.n	8002cf0 <HAL_TIM_Base_Init+0xfc>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c50:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c52:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c58:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c5c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c5e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c60:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c62:	e010      	b.n	8002c86 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8002c64:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c66:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c72:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c74:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c7a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c7c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002c7e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002c80:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c82:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c84:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c86:	2301      	movs	r3, #1
 8002c88:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002c92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002c96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002c9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8002c9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ca2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8002cb2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002cba:	2000      	movs	r0, #0
}
 8002cbc:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8002cbe:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cc0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cc6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ccc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cce:	69a1      	ldr	r1, [r4, #24]
 8002cd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8002cd6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd8:	68e3      	ldr	r3, [r4, #12]
 8002cda:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002cdc:	6863      	ldr	r3, [r4, #4]
 8002cde:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce0:	6963      	ldr	r3, [r4, #20]
 8002ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce4:	e7cf      	b.n	8002c86 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 8002ce6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002cea:	f7fe f883 	bl	8000df4 <HAL_TIM_Base_MspInit>
 8002cee:	e78c      	b.n	8002c0a <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf8:	4303      	orrs	r3, r0
 8002cfa:	e7e9      	b.n	8002cd0 <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
}
 8002cfe:	4770      	bx	lr
 8002d00:	40012c00 	.word	0x40012c00

08002d04 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002d04:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d122      	bne.n	8002d52 <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d0c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0e:	4917      	ldr	r1, [pc, #92]	; (8002d6c <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	2202      	movs	r2, #2
 8002d12:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d16:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d18:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d20:	d019      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d016      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <HAL_TIM_Base_Start_IT+0x6c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
 8002d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00f      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
 8002d36:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00b      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
 8002d3e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d007      	beq.n	8002d56 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8002d4c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	4770      	bx	lr
    return HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d56:	6899      	ldr	r1, [r3, #8]
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <HAL_TIM_Base_Start_IT+0x70>)
 8002d5a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	2a06      	cmp	r2, #6
 8002d5e:	d002      	beq.n	8002d66 <HAL_TIM_Base_Start_IT+0x62>
 8002d60:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002d64:	d1ef      	bne.n	8002d46 <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 8002d66:	2000      	movs	r0, #0
}
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	00010007 	.word	0x00010007

08002d78 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002d78:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	f000 8088 	beq.w	8002e92 <HAL_TIM_ConfigClockSource+0x11a>
 8002d82:	4602      	mov	r2, r0
{
 8002d84:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002d86:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8a:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d96:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <HAL_TIM_ConfigClockSource+0x198>)
 8002d98:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8002d9a:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002d9c:	680b      	ldr	r3, [r1, #0]
 8002d9e:	2b70      	cmp	r3, #112	; 0x70
 8002da0:	f000 80a5 	beq.w	8002eee <HAL_TIM_ConfigClockSource+0x176>
 8002da4:	d827      	bhi.n	8002df6 <HAL_TIM_ConfigClockSource+0x7e>
 8002da6:	2b50      	cmp	r3, #80	; 0x50
 8002da8:	d075      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x11e>
 8002daa:	d93d      	bls.n	8002e28 <HAL_TIM_ConfigClockSource+0xb0>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d11a      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db0:	6a23      	ldr	r3, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002db2:	6848      	ldr	r0, [r1, #4]
 8002db4:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db6:	f023 0310 	bic.w	r3, r3, #16
 8002dba:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbc:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 8002dbe:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dc8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dcc:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dd0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8002dd2:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd4:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dd6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dde:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de4:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002de6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002de8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002dee:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002df2:	bc30      	pop	{r4, r5}
 8002df4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002df6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dfa:	d067      	beq.n	8002ecc <HAL_TIM_ConfigClockSource+0x154>
 8002dfc:	d938      	bls.n	8002e70 <HAL_TIM_ConfigClockSource+0xf8>
 8002dfe:	4945      	ldr	r1, [pc, #276]	; (8002f14 <HAL_TIM_ConfigClockSource+0x19c>)
 8002e00:	428b      	cmp	r3, r1
 8002e02:	d006      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e04:	d92d      	bls.n	8002e62 <HAL_TIM_ConfigClockSource+0xea>
 8002e06:	4944      	ldr	r1, [pc, #272]	; (8002f18 <HAL_TIM_ConfigClockSource+0x1a0>)
 8002e08:	428b      	cmp	r3, r1
 8002e0a:	d002      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e0c:	3130      	adds	r1, #48	; 0x30
 8002e0e:	428b      	cmp	r3, r1
 8002e10:	d1e9      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr = TIMx->SMCR;
 8002e12:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e14:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002e18:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1c:	4319      	orrs	r1, r3
 8002e1e:	f041 0107 	orr.w	r1, r1, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002e24:	60a1      	str	r1, [r4, #8]
}
 8002e26:	e7de      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d126      	bne.n	8002e7a <HAL_TIM_ConfigClockSource+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2c:	684b      	ldr	r3, [r1, #4]
 8002e2e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e30:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e32:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002e36:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e38:	6a23      	ldr	r3, [r4, #32]
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e40:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e46:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e4a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002e4e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e58:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002e5e:	60a3      	str	r3, [r4, #8]
}
 8002e60:	e7c1      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8002e62:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e66:	d0d4      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e68:	3910      	subs	r1, #16
 8002e6a:	428b      	cmp	r3, r1
 8002e6c:	d0d1      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e6e:	e7ba      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 8002e74:	bf18      	it	ne
 8002e76:	2001      	movne	r0, #1
 8002e78:	e7b5      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  switch (sClockSourceConfig->ClockSource)
 8002e7a:	d8b4      	bhi.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d0c8      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e80:	d903      	bls.n	8002e8a <HAL_TIM_ConfigClockSource+0x112>
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d0c5      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
 8002e86:	2001      	movs	r0, #1
 8002e88:	e7ad      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
 8002e8a:	f033 0110 	bics.w	r1, r3, #16
 8002e8e:	d1aa      	bne.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
 8002e90:	e7bf      	b.n	8002e12 <HAL_TIM_ConfigClockSource+0x9a>
  __HAL_LOCK(htim);
 8002e92:	2002      	movs	r0, #2
}
 8002e94:	4770      	bx	lr
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	684b      	ldr	r3, [r1, #4]
 8002e98:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002e9a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e9c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002ea0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea2:	6a23      	ldr	r3, [r4, #32]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002eb4:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002eb6:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002eb8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002ec8:	60a3      	str	r3, [r4, #8]
}
 8002eca:	e78c      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ecc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ed0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed2:	432b      	orrs	r3, r5
 8002ed4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eda:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002ede:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee2:	68a3      	ldr	r3, [r4, #8]
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eea:	60a3      	str	r3, [r4, #8]
      break;
 8002eec:	e77b      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eee:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002ef2:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef4:	432b      	orrs	r3, r5
 8002ef6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef8:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002efc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002f00:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002f02:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002f04:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8002f0a:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8002f0c:	60a3      	str	r3, [r4, #8]
      break;
 8002f0e:	e76a      	b.n	8002de6 <HAL_TIM_ConfigClockSource+0x6e>
 8002f10:	ffce0088 	.word	0xffce0088
 8002f14:	00100030 	.word	0x00100030
 8002f18:	00100040 	.word	0x00100040

08002f1c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d03e      	beq.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8002f24:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f26:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f28:	4d1f      	ldr	r5, [pc, #124]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f30:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8002f32:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002f34:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f36:	d028      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8002f38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002f3c:	42aa      	cmp	r2, r5
 8002f3e:	d024      	beq.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f40:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f42:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f4a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8002f50:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	d00c      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d009      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d005      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002f62:	42aa      	cmp	r2, r5
 8002f64:	d003      	beq.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8002f66:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d104      	bne.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6e:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f70:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f74:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f76:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002f78:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f80:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002f84:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8002f86:	4618      	mov	r0, r3
}
 8002f88:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f8a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f90:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f96:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9c:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8002f9e:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	e7e5      	b.n	8002f6e <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8002fa2:	2002      	movs	r0, #2
}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40000400 	.word	0x40000400

08002fb0 <memset>:
 8002fb0:	4402      	add	r2, r0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d100      	bne.n	8002fba <memset+0xa>
 8002fb8:	4770      	bx	lr
 8002fba:	f803 1b01 	strb.w	r1, [r3], #1
 8002fbe:	e7f9      	b.n	8002fb4 <memset+0x4>

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4d0d      	ldr	r5, [pc, #52]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	2600      	movs	r6, #0
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	4d0b      	ldr	r5, [pc, #44]	; (8003000 <__libc_init_array+0x40>)
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	; (8003004 <__libc_init_array+0x44>)
 8002fd4:	f000 f818 	bl	8003008 <_init>
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	2600      	movs	r6, #0
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08004ac0 	.word	0x08004ac0
 8002ffc:	08004ac0 	.word	0x08004ac0
 8003000:	08004ac0 	.word	0x08004ac0
 8003004:	08004ac4 	.word	0x08004ac4

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

Disassembly of section .ccmram:

08003020 <shared_modulated_allpass>:
	_delay *= ap->ms_scale;
 8003020:	edd0 7a03 	vldr	s15, [r0, #12]
	if (fractional_delay > ap->bufsize || fractional_delay < 0.0f) {
 8003024:	f8b0 c004 	ldrh.w	ip, [r0, #4]
	_delay *= ap->ms_scale;
 8003028:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (fractional_delay > ap->bufsize || fractional_delay < 0.0f) {
 800302c:	ee07 ca90 	vmov	s15, ip
	float fractional_delay = (_delay * _mod);
 8003030:	ee60 1a21 	vmul.f32	s3, s0, s3
	if (fractional_delay > ap->bufsize || fractional_delay < 0.0f) {
 8003034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003038:	eef4 7ae1 	vcmpe.f32	s15, s3
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	d452      	bmi.n	80030e8 <shared_modulated_allpass+0xc8>
 8003042:	eef5 1ac0 	vcmpe.f32	s3, #0.0
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d44d      	bmi.n	80030e8 <shared_modulated_allpass+0xc8>
RAMFUNC float shared_modulated_allpass(shared_delay_t *ap, float _delay, float _input, float _fb, float _mod) {
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t j = ap->write + i_part;
 800304e:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
	this_sample = ap->buf[j];
 8003052:	6804      	ldr	r4, [r0, #0]
	uint16_t k = ap->write + _delay;
 8003054:	ee07 5a90 	vmov	s15, r5
	uint16_t i_part = (uint16_t) (fractional_delay);
 8003058:	eebc 7ae1 	vcvt.u32.f32	s14, s3
	uint16_t k = ap->write + _delay;
 800305c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
RAMFUNC float shared_modulated_allpass(shared_delay_t *ap, float _delay, float _input, float _fb, float _mod) {
 8003060:	b083      	sub	sp, #12
	uint16_t k = ap->write + _delay;
 8003062:	ee77 7a80 	vadd.f32	s15, s15, s0
	uint16_t i_part = (uint16_t) (fractional_delay);
 8003066:	ed8d 7a01 	vstr	s14, [sp, #4]
 800306a:	f8bd e004 	ldrh.w	lr, [sp, #4]
	uint16_t k = ap->write + _delay;
 800306e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	uint16_t j = ap->write + i_part;
 8003072:	eb0e 0205 	add.w	r2, lr, r5
 8003076:	b292      	uxth	r2, r2
	uint16_t k = ap->write + _delay;
 8003078:	ee17 3a90 	vmov	r3, s15
	if (j > ap->bufsize - 1) {
 800307c:	4594      	cmp	ip, r2
		j -= ap->bufsize;
 800307e:	bf98      	it	ls
 8003080:	eba2 020c 	subls.w	r2, r2, ip
	uint16_t k = ap->write + _delay;
 8003084:	b299      	uxth	r1, r3
		j -= ap->bufsize;
 8003086:	bf98      	it	ls
 8003088:	b292      	uxthls	r2, r2
	if (k > ap->bufsize - 1) {
 800308a:	458c      	cmp	ip, r1
		k -= ap->bufsize;
 800308c:	bf98      	it	ls
 800308e:	eba1 010c 	subls.w	r1, r1, ip
	if (j < ap->bufsize - 1) {
 8003092:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
		k -= ap->bufsize;
 8003096:	bf98      	it	ls
 8003098:	b289      	uxthls	r1, r1
	if (j < ap->bufsize - 1) {
 800309a:	42b2      	cmp	r2, r6
	this_sample = ap->buf[j];
 800309c:	f934 3012 	ldrsh.w	r3, [r4, r2, lsl #1]
 80030a0:	ea4f 0742 	mov.w	r7, r2, lsl #1
	if (j < ap->bufsize - 1) {
 80030a4:	da23      	bge.n	80030ee <shared_modulated_allpass+0xce>
		next_sample = ap->buf[j + 1];
 80030a6:	4427      	add	r7, r4
 80030a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
	float f_part = fractional_delay - i_part;
 80030ac:	ee07 ea90 	vmov	s15, lr
 80030b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float delayed = (this_sample + ((next_sample - this_sample) * f_part));
 80030b4:	1ad2      	subs	r2, r2, r3
	float f_part = fractional_delay - i_part;
 80030b6:	ee71 1ae7 	vsub.f32	s3, s3, s15
	float delayed = (this_sample + ((next_sample - this_sample) * f_part));
 80030ba:	ee07 2a10 	vmov	s14, r2
 80030be:	ee07 3a90 	vmov	s15, r3
 80030c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80030c6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80030ca:	eea7 0a21 	vfma.f32	s0, s14, s3
	ap->buf[ap->write] = _input -= delayed * _fb;
 80030ce:	eee0 0a41 	vfms.f32	s1, s0, s2
	return _input * _fb + delayed;
 80030d2:	eea1 0a20 	vfma.f32	s0, s2, s1
	ap->buf[ap->write] = _input -= delayed * _fb;
 80030d6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80030da:	ee17 3a90 	vmov	r3, s15
 80030de:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
	ap->write = k;
 80030e2:	80c1      	strh	r1, [r0, #6]
}
 80030e4:	b003      	add	sp, #12
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0.0f;
 80030e8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80030fc <shared_modulated_allpass+0xdc>
}
 80030ec:	4770      	bx	lr
		next_sample = ap->buf[(j + 1) - ap->bufsize];
 80030ee:	3201      	adds	r2, #1
 80030f0:	eba2 020c 	sub.w	r2, r2, ip
 80030f4:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 80030f8:	e7d8      	b.n	80030ac <shared_modulated_allpass+0x8c>
 80030fa:	bf00      	nop
 80030fc:	00000000 	.word	0x00000000

08003100 <sandbox_tick>:
RAMFUNC float sandbox_tick(float _input) {
 8003100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	lfo_tick(&lfos[0], 2.2f, 1.0f);
 8003102:	2101      	movs	r1, #1
RAMFUNC float sandbox_tick(float _input) {
 8003104:	ed2d 8b02 	vpush	{d8}
	lfo_tick(&lfos[0], 2.2f, 1.0f);
 8003108:	4852      	ldr	r0, [pc, #328]	; (8003254 <sandbox_tick+0x154>)
	float lfo_modulation_amt = size_pot * 0.005f;
 800310a:	4d53      	ldr	r5, [pc, #332]	; (8003258 <sandbox_tick+0x158>)
 800310c:	4c53      	ldr	r4, [pc, #332]	; (800325c <sandbox_tick+0x15c>)
		input_aps = shared_modulated_allpass(&d_mgr, input_times[i], input_aps, ap_gains, size_pot);
 800310e:	4f54      	ldr	r7, [pc, #336]	; (8003260 <sandbox_tick+0x160>)
RAMFUNC float sandbox_tick(float _input) {
 8003110:	eeb0 8a40 	vmov.f32	s16, s0
	lfo_tick(&lfos[0], 2.2f, 1.0f);
 8003114:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8003264 <sandbox_tick+0x164>
 8003118:	f7fd f8cc 	bl	80002b4 <lfo_tick>
	lfo_tick(&lfos[1], 1.1f, 1.0f);
 800311c:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8003268 <sandbox_tick+0x168>
 8003120:	4852      	ldr	r0, [pc, #328]	; (800326c <sandbox_tick+0x16c>)
 8003122:	2101      	movs	r1, #1
 8003124:	f7fd f8c6 	bl	80002b4 <lfo_tick>
	lfo_tick(&lfos[2], 5.4f, 1.0f);
 8003128:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003270 <sandbox_tick+0x170>
 800312c:	4851      	ldr	r0, [pc, #324]	; (8003274 <sandbox_tick+0x174>)
 800312e:	2101      	movs	r1, #1
 8003130:	f7fd f8c0 	bl	80002b4 <lfo_tick>
	lfo_tick(&lfos[3], 4.1f, 1.0f);
 8003134:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003278 <sandbox_tick+0x178>
 8003138:	4850      	ldr	r0, [pc, #320]	; (800327c <sandbox_tick+0x17c>)
 800313a:	2101      	movs	r1, #1
 800313c:	f7fd f8ba 	bl	80002b4 <lfo_tick>
	slow_filtered_noise += (slow_noise - slow_filtered_noise) * 0.01f;
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <sandbox_tick+0x180>)
 8003142:	4a50      	ldr	r2, [pc, #320]	; (8003284 <sandbox_tick+0x184>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ed92 7a00 	vldr	s14, [r2]
 800314c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8003288 <sandbox_tick+0x188>
	float lfo_modulation_amt = size_pot * 0.005f;
 8003150:	edd5 8a00 	vldr	s17, [r5]
	shared_delay_tick(&d_mgr);
 8003154:	4842      	ldr	r0, [pc, #264]	; (8003260 <sandbox_tick+0x160>)
	slow_filtered_noise += (slow_noise - slow_filtered_noise) * 0.01f;
 8003156:	ee37 7a67 	vsub.f32	s14, s14, s15
 800315a:	f104 0610 	add.w	r6, r4, #16
 800315e:	eee7 7a26 	vfma.f32	s15, s14, s13
	float lfo_modulation_amt = size_pot * 0.005f;
 8003162:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800328c <sandbox_tick+0x18c>
	slow_filtered_noise += (slow_noise - slow_filtered_noise) * 0.01f;
 8003166:	edc3 7a00 	vstr	s15, [r3]
	float lfo_modulation_amt = size_pot * 0.005f;
 800316a:	ee68 8a87 	vmul.f32	s17, s17, s14
	shared_delay_tick(&d_mgr);
 800316e:	f7fd f8cf 	bl	8000310 <shared_delay_tick>
		input_aps = shared_modulated_allpass(&d_mgr, input_times[i], input_aps, ap_gains, size_pot);
 8003172:	ecb4 0a01 	vldmia	r4!, {s0}
 8003176:	edd5 1a00 	vldr	s3, [r5]
 800317a:	eef0 0a48 	vmov.f32	s1, s16
 800317e:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003182:	4638      	mov	r0, r7
 8003184:	f7ff ff4c 	bl	8003020 <shared_modulated_allpass>
	for (uint8_t i = 0; i < NUM_INPUT_APS; i++) {
 8003188:	42b4      	cmp	r4, r6
		input_aps = shared_modulated_allpass(&d_mgr, input_times[i], input_aps, ap_gains, size_pot);
 800318a:	eeb0 8a40 	vmov.f32	s16, s0
	for (uint8_t i = 0; i < NUM_INPUT_APS; i++) {
 800318e:	d1f0      	bne.n	8003172 <sandbox_tick+0x72>
	float ap_loop = input_aps + feedback;
 8003190:	4e3f      	ldr	r6, [pc, #252]	; (8003290 <sandbox_tick+0x190>)
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[0], ap_loop, ap_gains, size_pot - (lfos[0].out * lfo_modulation_amt));
 8003192:	4f30      	ldr	r7, [pc, #192]	; (8003254 <sandbox_tick+0x154>)
 8003194:	4c3f      	ldr	r4, [pc, #252]	; (8003294 <sandbox_tick+0x194>)
 8003196:	edd5 1a00 	vldr	s3, [r5]
	float ap_loop = input_aps + feedback;
 800319a:	edd6 0a00 	vldr	s1, [r6]
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[0], ap_loop, ap_gains, size_pot - (lfos[0].out * lfo_modulation_amt));
 800319e:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a2:	482f      	ldr	r0, [pc, #188]	; (8003260 <sandbox_tick+0x160>)
 80031a4:	eee7 1ae8 	vfms.f32	s3, s15, s17
 80031a8:	ee70 0a20 	vadd.f32	s1, s0, s1
 80031ac:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80031b0:	ed94 0a00 	vldr	s0, [r4]
 80031b4:	f7ff ff34 	bl	8003020 <shared_modulated_allpass>
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[1], ap_loop, ap_gains, size_pot);
 80031b8:	4829      	ldr	r0, [pc, #164]	; (8003260 <sandbox_tick+0x160>)
 80031ba:	edd5 1a00 	vldr	s3, [r5]
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[0], ap_loop, ap_gains, size_pot - (lfos[0].out * lfo_modulation_amt));
 80031be:	eef0 0a40 	vmov.f32	s1, s0
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[1], ap_loop, ap_gains, size_pot);
 80031c2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80031c6:	ed94 0a01 	vldr	s0, [r4, #4]
 80031ca:	f7ff ff29 	bl	8003020 <shared_modulated_allpass>
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[2], ap_loop, ap_gains, size_pot - (lfos[1].out * lfo_modulation_amt));
 80031ce:	edd5 1a00 	vldr	s3, [r5]
 80031d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d6:	4822      	ldr	r0, [pc, #136]	; (8003260 <sandbox_tick+0x160>)
 80031d8:	eee7 1ae8 	vfms.f32	s3, s15, s17
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[1], ap_loop, ap_gains, size_pot);
 80031dc:	eef0 0a40 	vmov.f32	s1, s0
	ap_loop = shared_modulated_allpass(&d_mgr, loop_times[2], ap_loop, ap_gains, size_pot - (lfos[1].out * lfo_modulation_amt));
 80031e0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80031e4:	ed94 0a02 	vldr	s0, [r4, #8]
 80031e8:	f7ff ff1a 	bl	8003020 <shared_modulated_allpass>
	svf_tick(&feedback_highpass, loop_out);
 80031ec:	482a      	ldr	r0, [pc, #168]	; (8003298 <sandbox_tick+0x198>)
 80031ee:	f7fd f839 	bl	8000264 <svf_tick>
	loop_out = svf_get_high(&feedback_highpass);
 80031f2:	4829      	ldr	r0, [pc, #164]	; (8003298 <sandbox_tick+0x198>)
 80031f4:	f7fd f85a 	bl	80002ac <svf_get_high>
	svf_tick(&feedback_lowpass, loop_out);
 80031f8:	4828      	ldr	r0, [pc, #160]	; (800329c <sandbox_tick+0x19c>)
 80031fa:	f7fd f833 	bl	8000264 <svf_tick>
	loop_out = svf_get_low(&feedback_lowpass);
 80031fe:	4827      	ldr	r0, [pc, #156]	; (800329c <sandbox_tick+0x19c>)
 8003200:	f7fd f850 	bl	80002a4 <svf_get_low>
 8003204:	eddf 7a26 	vldr	s15, [pc, #152]	; 80032a0 <sandbox_tick+0x1a0>
	feedback = signal_output * feedback_pot;
 8003208:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <sandbox_tick+0x1a4>)
 800320a:	eddf 6a27 	vldr	s13, [pc, #156]	; 80032a8 <sandbox_tick+0x1a8>
 800320e:	ed93 7a00 	vldr	s14, [r3]
	if (signal_output > max_sig) {
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <sandbox_tick+0x1ac>)
 8003214:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	bf98      	it	ls
 800321e:	eef0 7a40 	vmovls.f32	s15, s0
 8003222:	eef4 7ae6 	vcmpe.f32	s15, s13
}
 8003226:	ecbd 8b02 	vpop	{d8}
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	if (signal_output > max_sig) {
 800322e:	ed93 6a00 	vldr	s12, [r3]
 8003232:	bfb8      	it	lt
 8003234:	eef0 7a66 	vmovlt.f32	s15, s13
	feedback = signal_output * feedback_pot;
 8003238:	ee27 7a00 	vmul.f32	s14, s14, s0
	if (signal_output > max_sig) {
 800323c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8003244:	eeb0 0a67 	vmov.f32	s0, s15
	feedback = signal_output * feedback_pot;
 8003248:	ed86 7a00 	vstr	s14, [r6]
		max_sig = signal_output;
 800324c:	bfc8      	it	gt
 800324e:	edc3 7a00 	vstrgt	s15, [r3]
}
 8003252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003254:	20000218 	.word	0x20000218
 8003258:	20000208 	.word	0x20000208
 800325c:	20000000 	.word	0x20000000
 8003260:	2000032c 	.word	0x2000032c
 8003264:	400ccccd 	.word	0x400ccccd
 8003268:	3f8ccccd 	.word	0x3f8ccccd
 800326c:	20000228 	.word	0x20000228
 8003270:	40accccd 	.word	0x40accccd
 8003274:	20000238 	.word	0x20000238
 8003278:	40833333 	.word	0x40833333
 800327c:	20000248 	.word	0x20000248
 8003280:	200002a0 	.word	0x200002a0
 8003284:	200002e4 	.word	0x200002e4
 8003288:	3c23d70a 	.word	0x3c23d70a
 800328c:	3ba3d70a 	.word	0x3ba3d70a
 8003290:	20000048 	.word	0x20000048
 8003294:	20000010 	.word	0x20000010
 8003298:	2000030c 	.word	0x2000030c
 800329c:	200002c4 	.word	0x200002c4
 80032a0:	44ffe000 	.word	0x44ffe000
 80032a4:	2000020c 	.word	0x2000020c
 80032a8:	c4ffe000 	.word	0xc4ffe000
 80032ac:	2000004c 	.word	0x2000004c
