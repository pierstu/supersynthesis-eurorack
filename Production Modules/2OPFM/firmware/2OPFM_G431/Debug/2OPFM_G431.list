
2OPFM_G431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003650  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004038  08004038  00020810  2**0
                  CONTENTS
  4 .ARM          00000000  08004038  08004038  00020810  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004038  08004038  00020810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000810  20000000  08004040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000810  08004850  00020810  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000da8  08004850  00020da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020810  2**0
                  CONTENTS, READONLY
 12 .debug_info   000282cf  00000000  00000000  00020840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f1  00000000  00000000  00048b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00013303  00000000  00000000  0004cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  0005ff08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002658  00000000  00000000  00060d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020668  00000000  00000000  000633b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e14a  00000000  00000000  00083a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d45c5  00000000  00000000  000a1b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00176127  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003074  00000000  00000000  0017617c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000810 	.word	0x20000810
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003810 	.word	0x08003810

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000814 	.word	0x20000814
 8000214:	08003810 	.word	0x08003810

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__gedf2>:
 8000590:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000594:	e006      	b.n	80005a4 <__cmpdf2+0x4>
 8000596:	bf00      	nop

08000598 <__ledf2>:
 8000598:	f04f 0c01 	mov.w	ip, #1
 800059c:	e002      	b.n	80005a4 <__cmpdf2+0x4>
 800059e:	bf00      	nop

080005a0 <__cmpdf2>:
 80005a0:	f04f 0c01 	mov.w	ip, #1
 80005a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b4:	bf18      	it	ne
 80005b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005ba:	d01b      	beq.n	80005f4 <__cmpdf2+0x54>
 80005bc:	b001      	add	sp, #4
 80005be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005c2:	bf0c      	ite	eq
 80005c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005c8:	ea91 0f03 	teqne	r1, r3
 80005cc:	bf02      	ittt	eq
 80005ce:	ea90 0f02 	teqeq	r0, r2
 80005d2:	2000      	moveq	r0, #0
 80005d4:	4770      	bxeq	lr
 80005d6:	f110 0f00 	cmn.w	r0, #0
 80005da:	ea91 0f03 	teq	r1, r3
 80005de:	bf58      	it	pl
 80005e0:	4299      	cmppl	r1, r3
 80005e2:	bf08      	it	eq
 80005e4:	4290      	cmpeq	r0, r2
 80005e6:	bf2c      	ite	cs
 80005e8:	17d8      	asrcs	r0, r3, #31
 80005ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ee:	f040 0001 	orr.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005fc:	d102      	bne.n	8000604 <__cmpdf2+0x64>
 80005fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000602:	d107      	bne.n	8000614 <__cmpdf2+0x74>
 8000604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800060c:	d1d6      	bne.n	80005bc <__cmpdf2+0x1c>
 800060e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000612:	d0d3      	beq.n	80005bc <__cmpdf2+0x1c>
 8000614:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__aeabi_cdrcmple>:
 800061c:	4684      	mov	ip, r0
 800061e:	4610      	mov	r0, r2
 8000620:	4662      	mov	r2, ip
 8000622:	468c      	mov	ip, r1
 8000624:	4619      	mov	r1, r3
 8000626:	4663      	mov	r3, ip
 8000628:	e000      	b.n	800062c <__aeabi_cdcmpeq>
 800062a:	bf00      	nop

0800062c <__aeabi_cdcmpeq>:
 800062c:	b501      	push	{r0, lr}
 800062e:	f7ff ffb7 	bl	80005a0 <__cmpdf2>
 8000632:	2800      	cmp	r0, #0
 8000634:	bf48      	it	mi
 8000636:	f110 0f00 	cmnmi.w	r0, #0
 800063a:	bd01      	pop	{r0, pc}

0800063c <__aeabi_dcmpeq>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff fff4 	bl	800062c <__aeabi_cdcmpeq>
 8000644:	bf0c      	ite	eq
 8000646:	2001      	moveq	r0, #1
 8000648:	2000      	movne	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <__aeabi_dcmplt>:
 8000650:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000654:	f7ff ffea 	bl	800062c <__aeabi_cdcmpeq>
 8000658:	bf34      	ite	cc
 800065a:	2001      	movcc	r0, #1
 800065c:	2000      	movcs	r0, #0
 800065e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000662:	bf00      	nop

08000664 <__aeabi_dcmple>:
 8000664:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000668:	f7ff ffe0 	bl	800062c <__aeabi_cdcmpeq>
 800066c:	bf94      	ite	ls
 800066e:	2001      	movls	r0, #1
 8000670:	2000      	movhi	r0, #0
 8000672:	f85d fb08 	ldr.w	pc, [sp], #8
 8000676:	bf00      	nop

08000678 <__aeabi_dcmpge>:
 8000678:	f84d ed08 	str.w	lr, [sp, #-8]!
 800067c:	f7ff ffce 	bl	800061c <__aeabi_cdrcmple>
 8000680:	bf94      	ite	ls
 8000682:	2001      	movls	r0, #1
 8000684:	2000      	movhi	r0, #0
 8000686:	f85d fb08 	ldr.w	pc, [sp], #8
 800068a:	bf00      	nop

0800068c <__aeabi_dcmpgt>:
 800068c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000690:	f7ff ffc4 	bl	800061c <__aeabi_cdrcmple>
 8000694:	bf34      	ite	cc
 8000696:	2001      	movcc	r0, #1
 8000698:	2000      	movcs	r0, #0
 800069a:	f85d fb08 	ldr.w	pc, [sp], #8
 800069e:	bf00      	nop

080006a0 <adsr_structinit>:
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0 };

void adsr_structinit(soft_adsr *adsr) {
	adsr->output = ENV_INIT;
	adsr->attack = 0.0f;
 80006a0:	2300      	movs	r3, #0
void adsr_structinit(soft_adsr *adsr) {
 80006a2:	b410      	push	{r4}
	adsr->output = ENV_INIT;
 80006a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	adsr->decay = 0.0f;
	adsr->sustain = 0.0f;
	adsr->release = 0.0f;
	adsr->stage = OFF;
 80006a8:	2403      	movs	r4, #3
	adsr->rate = 0.0f;
	adsr->rate_offset = 0.0f;
	adsr->cutoff = 0.0f;
	adsr->target = ENV_INIT;
	adsr->one_shot = 0;
 80006aa:	2100      	movs	r1, #0
	adsr->output = ENV_INIT;
 80006ac:	6002      	str	r2, [r0, #0]
	adsr->attack = 0.0f;
 80006ae:	6203      	str	r3, [r0, #32]
	adsr->decay = 0.0f;
 80006b0:	6243      	str	r3, [r0, #36]	; 0x24
	adsr->sustain = 0.0f;
 80006b2:	6283      	str	r3, [r0, #40]	; 0x28
	adsr->release = 0.0f;
 80006b4:	62c3      	str	r3, [r0, #44]	; 0x2c
	adsr->stage = OFF;
 80006b6:	7104      	strb	r4, [r0, #4]
	adsr->rate = 0.0f;
 80006b8:	6083      	str	r3, [r0, #8]
}
 80006ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	adsr->rate_offset = 0.0f;
 80006be:	60c3      	str	r3, [r0, #12]
	adsr->cutoff = 0.0f;
 80006c0:	6183      	str	r3, [r0, #24]
	adsr->target = ENV_INIT;
 80006c2:	61c2      	str	r2, [r0, #28]
	adsr->one_shot = 0;
 80006c4:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	0000      	movs	r0, r0
	...

080006d0 <run_linear_a_expo_r>:
}

void run_linear_a_expo_r(soft_adsr *adsr) {
	//one shot style smooth attack

	if (adsr->output < 0.01f) {
 80006d0:	ed90 7a00 	vldr	s14, [r0]
 80006d4:	eddf 7a36 	vldr	s15, [pc, #216]	; 80007b0 <run_linear_a_expo_r+0xe0>
void run_linear_a_expo_r(soft_adsr *adsr) {
 80006d8:	b510      	push	{r4, lr}
	if (adsr->output < 0.01f) {
 80006da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		adsr->one_shot = 0;
 80006e2:	bf44      	itt	mi
 80006e4:	2300      	movmi	r3, #0
 80006e6:	f880 3030 	strbmi.w	r3, [r0, #48]	; 0x30
	}

	if (adsr->stage == ATTACK) {
 80006ea:	7903      	ldrb	r3, [r0, #4]
void run_linear_a_expo_r(soft_adsr *adsr) {
 80006ec:	4604      	mov	r4, r0
	if (adsr->stage == ATTACK) {
 80006ee:	b9db      	cbnz	r3, 8000728 <run_linear_a_expo_r+0x58>

		adsr->output += SMOOTH_ATTACK_INCREMENT;
 80006f0:	edd0 7a00 	vldr	s15, [r0]
 80006f4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80007b4 <run_linear_a_expo_r+0xe4>
		adsr->rate = adsr->attack + adsr->attack_offset;
		//attack threshold
		if (adsr->output > 0.95f) {
 80006f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80007b8 <run_linear_a_expo_r+0xe8>
		adsr->output += SMOOTH_ATTACK_INCREMENT;
 80006fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000700:	edc0 7a00 	vstr	s15, [r0]
		adsr->rate = adsr->attack + adsr->attack_offset;
 8000704:	edd0 7a08 	vldr	s15, [r0, #32]
 8000708:	edd0 6a04 	vldr	s13, [r0, #16]
 800070c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8000710:	edc0 7a02 	vstr	s15, [r0, #8]
		if (adsr->output > 0.95f) {
 8000714:	edd0 7a00 	vldr	s15, [r0]
 8000718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	dd01      	ble.n	8000726 <run_linear_a_expo_r+0x56>
			adsr->stage = RELEASE;
 8000722:	2302      	movs	r3, #2
 8000724:	7103      	strb	r3, [r0, #4]
			adsr->cutoff = 0;
		}

		adsr->output += (adsr->target - adsr->output) * adsr->cutoff;
	}
}
 8000726:	bd10      	pop	{r4, pc}
		if (adsr->stage == RELEASE) {
 8000728:	7903      	ldrb	r3, [r0, #4]
 800072a:	2b02      	cmp	r3, #2
 800072c:	d02e      	beq.n	800078c <run_linear_a_expo_r+0xbc>
		adsr->cutoff = (adsr->rate + adsr->rate_offset) * 0.1f;
 800072e:	edd4 7a02 	vldr	s15, [r4, #8]
 8000732:	edd4 6a03 	vldr	s13, [r4, #12]
 8000736:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80007b4 <run_linear_a_expo_r+0xe4>
 800073a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800073e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000742:	edc4 7a06 	vstr	s15, [r4, #24]
		if (adsr->cutoff > 0.99) {
 8000746:	69a0      	ldr	r0, [r4, #24]
 8000748:	f7ff feca 	bl	80004e0 <__aeabi_f2d>
 800074c:	a316      	add	r3, pc, #88	; (adr r3, 80007a8 <run_linear_a_expo_r+0xd8>)
 800074e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000752:	f7ff ff9b 	bl	800068c <__aeabi_dcmpgt>
 8000756:	b108      	cbz	r0, 800075c <run_linear_a_expo_r+0x8c>
			adsr->cutoff = 0.99;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <run_linear_a_expo_r+0xec>)
 800075a:	61a3      	str	r3, [r4, #24]
		if (adsr->cutoff < 0.0) {
 800075c:	edd4 7a06 	vldr	s15, [r4, #24]
 8000760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000764:	2300      	movs	r3, #0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			adsr->cutoff = 0;
 800076a:	bf48      	it	mi
 800076c:	61a3      	strmi	r3, [r4, #24]
		adsr->output += (adsr->target - adsr->output) * adsr->cutoff;
 800076e:	ed94 7a07 	vldr	s14, [r4, #28]
 8000772:	ed94 6a00 	vldr	s12, [r4]
 8000776:	edd4 6a06 	vldr	s13, [r4, #24]
 800077a:	edd4 7a00 	vldr	s15, [r4]
 800077e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000782:	eee7 7a26 	vfma.f32	s15, s14, s13
 8000786:	edc4 7a00 	vstr	s15, [r4]
}
 800078a:	bd10      	pop	{r4, pc}
			adsr->rate = adsr->release + adsr->release_offset;
 800078c:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8000790:	ed90 7a05 	vldr	s14, [r0, #20]
 8000794:	ee77 7a87 	vadd.f32	s15, s15, s14
			adsr->target = 0.0f;
 8000798:	2300      	movs	r3, #0
			adsr->rate = adsr->release + adsr->release_offset;
 800079a:	edc0 7a02 	vstr	s15, [r0, #8]
			adsr->target = 0.0f;
 800079e:	61c3      	str	r3, [r0, #28]
 80007a0:	e7c5      	b.n	800072e <run_linear_a_expo_r+0x5e>
 80007a2:	bf00      	nop
 80007a4:	f3af 8000 	nop.w
 80007a8:	7ae147ae 	.word	0x7ae147ae
 80007ac:	3fefae14 	.word	0x3fefae14
 80007b0:	3c23d70a 	.word	0x3c23d70a
 80007b4:	3dcccccd 	.word	0x3dcccccd
 80007b8:	3f733333 	.word	0x3f733333
 80007bc:	3f7d70a4 	.word	0x3f7d70a4

080007c0 <set_adsr_parameters>:

void set_adsr_parameters(soft_adsr *adsr) {
	adsr->rate_offset = 0.0005f;
	adsr->attack = 7.0f;

	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007c0:	491b      	ldr	r1, [pc, #108]	; (8000830 <set_adsr_parameters+0x70>)
	adsr->rate_offset = 0.0005f;
 80007c2:	4a1c      	ldr	r2, [pc, #112]	; (8000834 <set_adsr_parameters+0x74>)
	adsr->attack = 7.0f;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <set_adsr_parameters+0x78>)
	adsr->rate_offset = 0.0005f;
 80007c6:	60c2      	str	r2, [r0, #12]
	adsr->attack = 7.0f;
 80007c8:	6203      	str	r3, [r0, #32]
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007ca:	890a      	ldrh	r2, [r1, #8]

	int16_t jin_offset;
	jin_offset = adc1_data_10b[DECAY_SLIDER] - (adc1_data_10b[DECAY_JACK] - 495);
 80007cc:	888b      	ldrh	r3, [r1, #4]
 80007ce:	8909      	ldrh	r1, [r1, #8]
		jin_offset = 0;
	}
	if (jin_offset > 1023) {
		jin_offset = 1023;
	}
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007d0:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 800083c <set_adsr_parameters+0x7c>
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007d4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8000840 <set_adsr_parameters+0x80>
	adsr->release = (decay_sum) / 100000.0f;
 80007d8:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8000844 <set_adsr_parameters+0x84>
	jin_offset = adc1_data_10b[DECAY_SLIDER] - (adc1_data_10b[DECAY_JACK] - 495);
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
void set_adsr_parameters(soft_adsr *adsr) {
 80007e2:	b430      	push	{r4, r5}
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007e4:	b292      	uxth	r2, r2
 80007e6:	4d18      	ldr	r5, [pc, #96]	; (8000848 <set_adsr_parameters+0x88>)
 80007e8:	4c18      	ldr	r4, [pc, #96]	; (800084c <set_adsr_parameters+0x8c>)
 80007ea:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80007ee:	edd4 6a00 	vldr	s13, [r4]
	jin_offset = adc1_data_10b[DECAY_SLIDER] - (adc1_data_10b[DECAY_JACK] - 495);
 80007f2:	1a5b      	subs	r3, r3, r1
 80007f4:	b21b      	sxth	r3, r3
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007f6:	f383 030a 	usat	r3, #10, r3
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007fa:	ee07 2a10 	vmov	s14, r2
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007fe:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 8000802:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	decay_sum = expo_lut[jin_offset] + 100.0f;
 8000806:	ee07 3a90 	vmov	s15, r3
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 800080a:	ee37 7a66 	vsub.f32	s14, s14, s13
	decay_sum = expo_lut[jin_offset] + 100.0f;
 800080e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 8000812:	eee7 6a25 	vfma.f32	s13, s14, s11
	decay_sum = expo_lut[jin_offset] + 100.0f;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <set_adsr_parameters+0x90>)
 8000818:	ee77 7a85 	vadd.f32	s15, s15, s10
	filtered_decay_jack += (expo_lut[adc1_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 800081c:	edc4 6a00 	vstr	s13, [r4]
	adsr->release = (decay_sum) / 100000.0f;
 8000820:	ee27 7a86 	vmul.f32	s14, s15, s12

}
 8000824:	bc30      	pop	{r4, r5}
	decay_sum = expo_lut[jin_offset] + 100.0f;
 8000826:	edc3 7a00 	vstr	s15, [r3]
	adsr->release = (decay_sum) / 100000.0f;
 800082a:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
}
 800082e:	4770      	bx	lr
 8000830:	20000b54 	.word	0x20000b54
 8000834:	3a03126f 	.word	0x3a03126f
 8000838:	40e00000 	.word	0x40e00000
 800083c:	42c80000 	.word	0x42c80000
 8000840:	3ca3d70a 	.word	0x3ca3d70a
 8000844:	3727c5ac 	.word	0x3727c5ac
 8000848:	20000000 	.word	0x20000000
 800084c:	20000894 	.word	0x20000894
 8000850:	200008b4 	.word	0x200008b4

08000854 <main_2OP_loop>:

//fast interrupt for audio
void main_2OP_loop() {
 8000854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000858:	2108      	movs	r1, #8
		if (!last_trig) {
 800085a:	4da1      	ldr	r5, [pc, #644]	; (8000ae0 <main_2OP_loop+0x28c>)
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 800085c:	48a1      	ldr	r0, [pc, #644]	; (8000ae4 <main_2OP_loop+0x290>)
			OP1.ADSR.stage = ATTACK;
 800085e:	4ca2      	ldr	r4, [pc, #648]	; (8000ae8 <main_2OP_loop+0x294>)
	check_trig();

	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;

	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 8000860:	4ea2      	ldr	r6, [pc, #648]	; (8000aec <main_2OP_loop+0x298>)
	if (ENV_AMT < 0.0f) {
		ENV_AMT = 0.0f;
	}

	//khz pot, 1p filter
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000862:	4fa3      	ldr	r7, [pc, #652]	; (8000af0 <main_2OP_loop+0x29c>)
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000864:	f002 f850 	bl	8002908 <HAL_GPIO_ReadPin>
		if (!last_trig) {
 8000868:	7829      	ldrb	r1, [r5, #0]
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 800086a:	4ba2      	ldr	r3, [pc, #648]	; (8000af4 <main_2OP_loop+0x2a0>)
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 800086c:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8000af8 <main_2OP_loop+0x2a4>
 8000870:	eddf 5aa2 	vldr	s11, [pc, #648]	; 8000afc <main_2OP_loop+0x2a8>
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 8000874:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 8000b00 <main_2OP_loop+0x2ac>
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000878:	fab0 f280 	clz	r2, r0
		if (!last_trig) {
 800087c:	4308      	orrs	r0, r1
 800087e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 8000882:	49a0      	ldr	r1, [pc, #640]	; (8000b04 <main_2OP_loop+0x2b0>)
			OP1.ADSR.stage = ATTACK;
 8000884:	bf08      	it	eq
 8000886:	7720      	strbeq	r0, [r4, #28]
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000888:	ea4f 1252 	mov.w	r2, r2, lsr #5
			OP1.ADSR.one_shot = 0;
 800088c:	bf08      	it	eq
 800088e:	f884 0048 	strbeq.w	r0, [r4, #72]	; 0x48
	trig = !HAL_GPIO_ReadPin(TRIG_GPIO_Port, TRIG_Pin);
 8000892:	701a      	strb	r2, [r3, #0]
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 8000894:	884b      	ldrh	r3, [r1, #2]
 8000896:	489c      	ldr	r0, [pc, #624]	; (8000b08 <main_2OP_loop+0x2b4>)
	last_trig = trig;
 8000898:	702a      	strb	r2, [r5, #0]
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 800089a:	f3c3 038d 	ubfx	r3, r3, #2, #14
 800089e:	f5c3 73e0 	rsb	r3, r3, #448	; 0x1c0
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	ed90 7a00 	vldr	s14, [r0]
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008aa:	8873      	ldrh	r3, [r6, #2]
		ENV_AMT = 0.0f;
 80008ac:	4d97      	ldr	r5, [pc, #604]	; (8000b0c <main_2OP_loop+0x2b8>)
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 80008ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b2:	eeb0 5a47 	vmov.f32	s10, s14
 80008b6:	ee97 5aa6 	vfnms.f32	s10, s15, s13
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008ba:	b29b      	uxth	r3, r3
	if (ENV_AMT < 0.0f) {
 80008bc:	2200      	movs	r2, #0
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008be:	ee06 3a90 	vmov	s13, r3
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 80008c2:	eea5 7a25 	vfma.f32	s14, s10, s11
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008c6:	88f3      	ldrh	r3, [r6, #6]
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 80008cc:	eef0 7a47 	vmov.f32	s15, s14
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008d0:	eea6 7a86 	vfma.f32	s14, s13, s12
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80008da:	3303      	adds	r3, #3
	if (ENV_AMT < 0.0f) {
 80008dc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80008e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		ENV_AMT = 0.0f;
 80008e4:	bf48      	it	mi
 80008e6:	602a      	strmi	r2, [r5, #0]

	//khz input, 1p filter
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008e8:	880a      	ldrh	r2, [r1, #0]
	ENV_AMT = (adc1_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 80008ea:	bf58      	it	pl
 80008ec:	ed85 7a00 	vstrpl	s14, [r5]
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008f0:	b292      	uxth	r2, r2
 80008f2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80008f6:	4986      	ldr	r1, [pc, #536]	; (8000b10 <main_2OP_loop+0x2bc>)
	ENV_OFFSET += (((((960 - (adc2_data[FM_JACK] >> 2)) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 80008f8:	edc0 7a00 	vstr	s15, [r0]
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008fc:	ee07 2a10 	vmov	s14, r2
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000900:	ee07 3a90 	vmov	s15, r3
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 8000904:	ed91 0a00 	vldr	s0, [r1]
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000908:	edd7 6a00 	vldr	s13, [r7]
 800090c:	ed9f 6a81 	vldr	s12, [pc, #516]	; 8000b14 <main_2OP_loop+0x2c0>
	//khz input, 2p adaptive filter
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 8000910:	4881      	ldr	r0, [pc, #516]	; (8000b18 <main_2OP_loop+0x2c4>)
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 8000912:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 800091a:	ee37 7a40 	vsub.f32	s14, s14, s0
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 800091e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 8000922:	eea7 0a06 	vfma.f32	s0, s14, s12
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000926:	eee7 6a86 	vfma.f32	s13, s15, s12
	filtered_khz_in += ((adc2_data[0] - 2048) - filtered_khz_in) * 0.05f;
 800092a:	ed81 0a00 	vstr	s0, [r1]
	khz_pot += ((1023 - adc1_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 800092e:	edc7 6a00 	vstr	s13, [r7]
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 8000932:	f000 f925 	bl	8000b80 <dynamic_smooth_tick>
 8000936:	4a79      	ldr	r2, [pc, #484]	; (8000b1c <main_2OP_loop+0x2c8>)
 8000938:	4b79      	ldr	r3, [pc, #484]	; (8000b20 <main_2OP_loop+0x2cc>)
 800093a:	ed92 6a00 	vldr	s12, [r2]

	//filter the sum
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 800093e:	f8df c218 	ldr.w	ip, [pc, #536]	; 8000b58 <main_2OP_loop+0x304>
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 8000942:	edd3 3a00 	vldr	s7, [r3]
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000946:	eddc 6a00 	vldr	s13, [ip]
 800094a:	edd7 5a00 	vldr	s11, [r7]
 800094e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000b24 <main_2OP_loop+0x2d0>

	//filtered fm ratio
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000952:	8833      	ldrh	r3, [r6, #0]
 8000954:	4874      	ldr	r0, [pc, #464]	; (8000b28 <main_2OP_loop+0x2d4>)
 8000956:	ed9f 4a75 	vldr	s8, [pc, #468]	; 8000b2c <main_2OP_loop+0x2d8>
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));

	if (adc1_data_10b[DECAY_SLIDER] > 1000) {
 800095a:	88b2      	ldrh	r2, [r6, #4]
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800095c:	eddf 4a67 	vldr	s9, [pc, #412]	; 8000afc <main_2OP_loop+0x2a8>
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 8000960:	4e73      	ldr	r6, [pc, #460]	; (8000b30 <main_2OP_loop+0x2dc>)
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 8000962:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8000b34 <main_2OP_loop+0x2e0>
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000966:	eddf 7a74 	vldr	s15, [pc, #464]	; 8000b38 <main_2OP_loop+0x2e4>
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 800096a:	4974      	ldr	r1, [pc, #464]	; (8000b3c <main_2OP_loop+0x2e8>)
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 800096c:	ee26 6a23 	vmul.f32	s12, s12, s7
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000970:	ee75 5ae6 	vsub.f32	s11, s11, s13
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 8000974:	ee26 0a00 	vmul.f32	s0, s12, s0
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000978:	b29b      	uxth	r3, r3
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 800097a:	ee75 5a80 	vadd.f32	s11, s11, s0
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800097e:	ee06 3a10 	vmov	s12, r3
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000982:	eee5 6a87 	vfma.f32	s13, s11, s14
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 8000986:	4b6e      	ldr	r3, [pc, #440]	; (8000b40 <main_2OP_loop+0x2ec>)
	OP->phase_index += OP->phase_increment;
 8000988:	690f      	ldr	r7, [r1, #16]
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800098a:	ed90 7a00 	vldr	s14, [r0]
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 800098e:	edcc 6a00 	vstr	s13, [ip]
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000992:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 8000996:	eefc 6ae6 	vcvt.u32.f32	s13, s13
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800099a:	eef0 5a47 	vmov.f32	s11, s14
 800099e:	eed6 5a04 	vfnms.f32	s11, s12, s8
	if (adc1_data_10b[DECAY_SLIDER] > 1000) {
 80009a2:	b292      	uxth	r2, r2
 80009a4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * khz_in_scaling * khz_correction;
 80009a8:	ed83 0a00 	vstr	s0, [r3]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 80009ac:	ee16 3a90 	vmov	r3, s13
 80009b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 80009b4:	eea5 7aa4 	vfma.f32	s14, s11, s9
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 80009b8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80009bc:	ee06 3a10 	vmov	s12, r3
	fm_ratio += ((adc1_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 80009c0:	ed80 7a00 	vstr	s14, [r0]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 80009c4:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 80009c8:	ee27 7a05 	vmul.f32	s14, s14, s10
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 80009cc:	ee66 6a27 	vmul.f32	s13, s12, s15
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 80009d0:	ee27 7a06 	vmul.f32	s14, s14, s12
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 80009d4:	ed84 6a02 	vstr	s12, [r4, #8]
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 80009d8:	ee67 7a27 	vmul.f32	s15, s14, s15
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 80009dc:	ed81 7a02 	vstr	s14, [r1, #8]
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 80009e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009e4:	ed95 6a00 	vldr	s12, [r5]
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 80009e8:	edc1 7a03 	vstr	s15, [r1, #12]
 80009ec:	ee17 0a90 	vmov	r0, s15
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009f0:	edd4 7a05 	vldr	s15, [r4, #20]
	OP->phase_index += OP->phase_increment;
 80009f4:	6925      	ldr	r5, [r4, #16]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009fa:	edd1 7a05 	vldr	s15, [r1, #20]
 80009fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a02:	ee27 7a06 	vmul.f32	s14, s14, s12
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000a06:	eefc 6ae6 	vcvt.u32.f32	s13, s13
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a0a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8000a0e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000a12:	ee16 6a90 	vmov	r6, s13
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		OP1.ADSR.output = 1.0f;
 8000a1a:	bf88      	it	hi
 8000a1c:	f04f 537e 	movhi.w	r3, #1065353216	; 0x3f800000
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a20:	ee17 2a10 	vmov	r2, s14
		OP1.ADSR.output = 1.0f;
 8000a24:	bf88      	it	hi
 8000a26:	61a3      	strhi	r3, [r4, #24]
	OP->phase_index += OP->phase_increment;
 8000a28:	4435      	add	r5, r6
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a2a:	ee17 3a90 	vmov	r3, s15
	OP->phase_index += OP->phase_increment;
 8000a2e:	4438      	add	r0, r7
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a30:	eb02 5295 	add.w	r2, r2, r5, lsr #22
 8000a34:	4e43      	ldr	r6, [pc, #268]	; (8000b44 <main_2OP_loop+0x2f0>)
	}

	operator_run(&OP1, OP1.ADSR.output);
 8000a36:	edd4 5a06 	vldr	s11, [r4, #24]
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000a3a:	edc4 6a03 	vstr	s13, [r4, #12]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a3e:	eb03 5390 	add.w	r3, r3, r0, lsr #22
 8000a42:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a4a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000a4e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
	operator_run(&OP2, OP1.ADSR.output * OP1.ADSR.output);
 8000a52:	edd4 6a06 	vldr	s13, [r4, #24]
 8000a56:	ed94 5a06 	vldr	s10, [r4, #24]

	OP1.modulation = (OP2.output) >> 3;

	//original
	voice1 = (OP1.output) >> 5;
 8000a5a:	4e3b      	ldr	r6, [pc, #236]	; (8000b48 <main_2OP_loop+0x2f4>)
	OP->phase_index += OP->phase_increment;
 8000a5c:	6108      	str	r0, [r1, #16]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a5e:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8000a62:	ee07 2a10 	vmov	s14, r2
 8000a66:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000a6a:	ee07 3a90 	vmov	s15, r3
 8000a6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	operator_run(&OP2, OP1.ADSR.output * OP1.ADSR.output);
 8000a76:	ee66 6a85 	vmul.f32	s13, s13, s10
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a7a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000a7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a8a:	ee17 2a10 	vmov	r2, s14
 8000a8e:	ee17 3a90 	vmov	r3, s15
	voice1 = (OP1.output) >> 5;
 8000a92:	1150      	asrs	r0, r2, #5
	OP->phase_index += OP->phase_increment;
 8000a94:	6125      	str	r5, [r4, #16]
	output = voice1;

	//hard clipping
	if (output > 2047) {
 8000a96:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
	OP1.modulation = (OP2.output) >> 3;
 8000a9a:	ea4f 05e3 	mov.w	r5, r3, asr #3
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a9e:	ed84 7a00 	vstr	s14, [r4]
	voice1 = (OP1.output) >> 5;
 8000aa2:	6030      	str	r0, [r6, #0]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000aa4:	edc1 7a00 	vstr	s15, [r1]
	OP1.modulation = (OP2.output) >> 3;
 8000aa8:	6165      	str	r5, [r4, #20]
	if (output > 2047) {
 8000aaa:	db0c      	blt.n	8000ac6 <main_2OP_loop+0x272>
		output = 2047;
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <main_2OP_loop+0x2f8>)
 8000aae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	f640 73ff 	movw	r3, #4095	; 0xfff
		output = -2047;
	}

	//DAC output
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, output + 2048);
}
 8000ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, output + 2048);
 8000abc:	4824      	ldr	r0, [pc, #144]	; (8000b50 <main_2OP_loop+0x2fc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	f001 bc23 	b.w	800230c <HAL_DAC_SetValue>
	if (output < -2047) {
 8000ac6:	4a23      	ldr	r2, [pc, #140]	; (8000b54 <main_2OP_loop+0x300>)
 8000ac8:	4290      	cmp	r0, r2
 8000aca:	da03      	bge.n	8000ad4 <main_2OP_loop+0x280>
		output = -2047;
 8000acc:	491f      	ldr	r1, [pc, #124]	; (8000b4c <main_2OP_loop+0x2f8>)
 8000ace:	2301      	movs	r3, #1
 8000ad0:	600a      	str	r2, [r1, #0]
 8000ad2:	e7f1      	b.n	8000ab8 <main_2OP_loop+0x264>
	output = voice1;
 8000ad4:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <main_2OP_loop+0x2f8>)
 8000ad6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8000ada:	6010      	str	r0, [r2, #0]
 8000adc:	e7ec      	b.n	8000ab8 <main_2OP_loop+0x264>
 8000ade:	bf00      	nop
 8000ae0:	200008a0 	.word	0x200008a0
 8000ae4:	48000400 	.word	0x48000400
 8000ae8:	20000840 	.word	0x20000840
 8000aec:	20000b54 	.word	0x20000b54
 8000af0:	20000898 	.word	0x20000898
 8000af4:	200008b2 	.word	0x200008b2
 8000af8:	3b000000 	.word	0x3b000000
 8000afc:	3c23d70a 	.word	0x3c23d70a
 8000b00:	3a23d70a 	.word	0x3a23d70a
 8000b04:	200008a4 	.word	0x200008a4
 8000b08:	20000838 	.word	0x20000838
 8000b0c:	2000083c 	.word	0x2000083c
 8000b10:	20000afc 	.word	0x20000afc
 8000b14:	3d4ccccd 	.word	0x3d4ccccd
 8000b18:	20000ad4 	.word	0x20000ad4
 8000b1c:	20000800 	.word	0x20000800
 8000b20:	200008ac 	.word	0x200008ac
 8000b24:	3da3d70a 	.word	0x3da3d70a
 8000b28:	200008c8 	.word	0x200008c8
 8000b2c:	3a001002 	.word	0x3a001002
 8000b30:	20000000 	.word	0x20000000
 8000b34:	42000000 	.word	0x42000000
 8000b38:	4727c5ac 	.word	0x4727c5ac
 8000b3c:	20000b04 	.word	0x20000b04
 8000b40:	20000830 	.word	0x20000830
 8000b44:	08003828 	.word	0x08003828
 8000b48:	20000af8 	.word	0x20000af8
 8000b4c:	2000089c 	.word	0x2000089c
 8000b50:	20000cf8 	.word	0x20000cf8
 8000b54:	fffff801 	.word	0xfffff801
 8000b58:	200008a8 	.word	0x200008a8

08000b5c <dynamic_smooth_init>:
	sensitivity = _sensitivity;
	wc = basefreq / 22050.0f;
	//gc = tan(3.14f * wc);
	gc = .00000712018209f;
	_smooth->g0 = 2*gc/(1+gc);
	_smooth->sense = sensitivity * 4.0f;
 8000b5c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8000b60:	ee60 0aa7 	vmul.f32	s1, s1, s15

	//tick values
	_smooth->low1 = 0.0f;
 8000b64:	2300      	movs	r3, #0
	_smooth->g0 = 2*gc/(1+gc);
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <dynamic_smooth_init+0x20>)
 8000b68:	6002      	str	r2, [r0, #0]
	_smooth->sense = sensitivity * 4.0f;
 8000b6a:	edc0 0a01 	vstr	s1, [r0, #4]
	_smooth->low1 = 0.0f;
 8000b6e:	6083      	str	r3, [r0, #8]
	_smooth->low2 = 0.0f;
 8000b70:	60c3      	str	r3, [r0, #12]
	_smooth->low1z = 0.0f;
 8000b72:	6103      	str	r3, [r0, #16]
	_smooth->low2z = 0.0f;
 8000b74:	6143      	str	r3, [r0, #20]
	_smooth->bandz = 0.0f;
 8000b76:	6183      	str	r3, [r0, #24]
	_smooth->out = 0.0f;
 8000b78:	61c3      	str	r3, [r0, #28]
}
 8000b7a:	4770      	bx	lr
 8000b7c:	376ee976 	.word	0x376ee976

08000b80 <dynamic_smooth_tick>:

float dynamic_smooth_tick(dynamic_smooth* _smooth, float in) {
	float g;
	_smooth->low1z = _smooth->low1;
 8000b80:	ed90 7a02 	vldr	s14, [r0, #8]
	_smooth->low2z = _smooth->low2;
 8000b84:	edd0 7a03 	vldr	s15, [r0, #12]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8000b88:	ed90 5a01 	vldr	s10, [r0, #4]
 8000b8c:	edd0 6a00 	vldr	s13, [r0]
	_smooth->low1z = _smooth->low1;
 8000b90:	ed80 7a04 	vstr	s14, [r0, #16]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8000b94:	ee37 6ac7 	vsub.f32	s12, s15, s14
	return ((a) < (b) ? a : b);
 8000b98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8000b9c:	eef0 4ac6 	vabs.f32	s9, s12
 8000ba0:	eee4 6a85 	vfma.f32	s13, s9, s10
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000ba4:	ee30 0a47 	vsub.f32	s0, s0, s14
	return ((a) < (b) ? a : b);
 8000ba8:	eef4 6ae5 	vcmpe.f32	s13, s11
 8000bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb0:	bf88      	it	hi
 8000bb2:	eef0 6a65 	vmovhi.f32	s13, s11
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000bb6:	eea0 7a26 	vfma.f32	s14, s0, s13
	_smooth->low2z = _smooth->low2;
 8000bba:	edc0 7a05 	vstr	s15, [r0, #20]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000bbe:	ee77 5a67 	vsub.f32	s11, s14, s15
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8000bc2:	ed80 6a06 	vstr	s12, [r0, #24]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000bc6:	eee5 7aa6 	vfma.f32	s15, s11, s13
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000bca:	ed80 7a02 	vstr	s14, [r0, #8]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000bce:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd2:	edc0 7a03 	vstr	s15, [r0, #12]

	return _smooth->low2;
}
 8000bd6:	4770      	bx	lr

08000bd8 <loop>:
#include "loop.h"
#include "main.h"

void loop(void) {

}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bdc:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bde:	2400      	movs	r4, #0
{
 8000be0:	b08d      	sub	sp, #52	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	4621      	mov	r1, r4
 8000be4:	2220      	movs	r2, #32
 8000be6:	a804      	add	r0, sp, #16
  ADC_MultiModeTypeDef multimode = {0};
 8000be8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000bec:	9403      	str	r4, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	f002 fe07 	bl	8003800 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bf2:	4845      	ldr	r0, [pc, #276]	; (8000d08 <MX_ADC1_Init+0x12c>)
 8000bf4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  hadc1.Init.GainCompensation = 0;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 6;
 8000bfc:	2306      	movs	r3, #6
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bfe:	2508      	movs	r5, #8
  hadc1.Instance = ADC1;
 8000c00:	6001      	str	r1, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c02:	6042      	str	r2, [r0, #4]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000c04:	f44f 6190 	mov.w	r1, #1152	; 0x480
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.NbrOfConversion = 6;
 8000c0c:	6203      	str	r3, [r0, #32]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c0e:	8384      	strh	r4, [r0, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c10:	2301      	movs	r3, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c12:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c16:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
  hadc1.Init.GainCompensation = 0;
 8000c1a:	6104      	str	r4, [r0, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c20:	63c4      	str	r4, [r0, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c22:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c26:	6185      	str	r5, [r0, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c28:	6143      	str	r3, [r0, #20]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c2a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	f000 fd0f 	bl	8001650 <HAL_ADC_Init>
 8000c32:	2800      	cmp	r0, #0
 8000c34:	d14f      	bne.n	8000cd6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c36:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c38:	4833      	ldr	r0, [pc, #204]	; (8000d08 <MX_ADC1_Init+0x12c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c3a:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c3c:	a901      	add	r1, sp, #4
 8000c3e:	f001 fa2b 	bl	8002098 <HAL_ADCEx_MultiModeConfigChannel>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	d15d      	bne.n	8000d02 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c46:	2206      	movs	r2, #6
 8000c48:	237f      	movs	r3, #127	; 0x7f
 8000c4a:	4c30      	ldr	r4, [pc, #192]	; (8000d0c <MX_ADC1_Init+0x130>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	482e      	ldr	r0, [pc, #184]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_1;
 8000c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000c52:	2506      	movs	r5, #6
 8000c54:	2204      	movs	r2, #4
 8000c56:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c58:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000c5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c62:	f000 fe47 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d148      	bne.n	8000cfc <MX_ADC1_Init+0x120>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c6a:	4a29      	ldr	r2, [pc, #164]	; (8000d10 <MX_ADC1_Init+0x134>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6c:	4826      	ldr	r0, [pc, #152]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_2;
 8000c6e:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_2;
 8000c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	f000 fe3d 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d13b      	bne.n	8000cf6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c7e:	4a25      	ldr	r2, [pc, #148]	; (8000d14 <MX_ADC1_Init+0x138>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c80:	4821      	ldr	r0, [pc, #132]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_3;
 8000c82:	2312      	movs	r3, #18
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000c84:	2405      	movs	r4, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_3;
 8000c88:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000c8c:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	f000 fe31 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000c92:	bb68      	cbnz	r0, 8000cf0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c94:	4a20      	ldr	r2, [pc, #128]	; (8000d18 <MX_ADC1_Init+0x13c>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c96:	481c      	ldr	r0, [pc, #112]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000c98:	2318      	movs	r3, #24
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000c9a:	2406      	movs	r4, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9c:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_4;
 8000c9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000ca2:	9406      	str	r4, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca4:	f000 fe26 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000ca8:	b9f8      	cbnz	r0, 8000cea <MX_ADC1_Init+0x10e>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <MX_ADC1_Init+0x140>)
  sConfig.Rank = ADC_REGULAR_RANK_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cac:	4816      	ldr	r0, [pc, #88]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_15;
 8000cae:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_15;
 8000cb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb8:	f000 fe1c 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000cbc:	b990      	cbnz	r0, 8000ce4 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <MX_ADC1_Init+0x144>)
  sConfig.Rank = ADC_REGULAR_RANK_6;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_ADC1_Init+0x12c>)
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000cc2:	f44f 7383 	mov.w	r3, #262	; 0x106
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc6:	a904      	add	r1, sp, #16
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ccc:	f000 fe12 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000cd0:	b920      	cbnz	r0, 8000cdc <MX_ADC1_Init+0x100>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd2:	b00d      	add	sp, #52	; 0x34
 8000cd4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000cd6:	f000 faff 	bl	80012d8 <Error_Handler>
 8000cda:	e7ac      	b.n	8000c36 <MX_ADC1_Init+0x5a>
    Error_Handler();
 8000cdc:	f000 fafc 	bl	80012d8 <Error_Handler>
}
 8000ce0:	b00d      	add	sp, #52	; 0x34
 8000ce2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000ce4:	f000 faf8 	bl	80012d8 <Error_Handler>
 8000ce8:	e7e9      	b.n	8000cbe <MX_ADC1_Init+0xe2>
    Error_Handler();
 8000cea:	f000 faf5 	bl	80012d8 <Error_Handler>
 8000cee:	e7dc      	b.n	8000caa <MX_ADC1_Init+0xce>
    Error_Handler();
 8000cf0:	f000 faf2 	bl	80012d8 <Error_Handler>
 8000cf4:	e7ce      	b.n	8000c94 <MX_ADC1_Init+0xb8>
    Error_Handler();
 8000cf6:	f000 faef 	bl	80012d8 <Error_Handler>
 8000cfa:	e7c0      	b.n	8000c7e <MX_ADC1_Init+0xa2>
    Error_Handler();
 8000cfc:	f000 faec 	bl	80012d8 <Error_Handler>
 8000d00:	e7b3      	b.n	8000c6a <MX_ADC1_Init+0x8e>
    Error_Handler();
 8000d02:	f000 fae9 	bl	80012d8 <Error_Handler>
 8000d06:	e79e      	b.n	8000c46 <MX_ADC1_Init+0x6a>
 8000d08:	20000bcc 	.word	0x20000bcc
 8000d0c:	04300002 	.word	0x04300002
 8000d10:	08600004 	.word	0x08600004
 8000d14:	0c900008 	.word	0x0c900008
 8000d18:	10c00010 	.word	0x10c00010
 8000d1c:	3ef08000 	.word	0x3ef08000
 8000d20:	cb840000 	.word	0xcb840000

08000d24 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000d24:	b530      	push	{r4, r5, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d28:	2220      	movs	r2, #32
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4668      	mov	r0, sp
 8000d2e:	f002 fd67 	bl	8003800 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d32:	4823      	ldr	r0, [pc, #140]	; (8000dc0 <MX_ADC2_Init+0x9c>)
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <MX_ADC2_Init+0xa0>)
 8000d36:	6003      	str	r3, [r0, #0]
  hadc2.Init.GainCompensation = 0;
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc2.Init.LowPowerAutoWait = DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.NbrOfConversion = 2;
 8000d38:	2302      	movs	r3, #2
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d3a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d3e:	f44f 62ac 	mov.w	r2, #1376	; 0x560
  hadc2.Init.NbrOfConversion = 2;
 8000d42:	6203      	str	r3, [r0, #32]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d44:	2300      	movs	r3, #0
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d46:	2408      	movs	r4, #8
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d48:	6041      	str	r1, [r0, #4]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d4a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d50:	2201      	movs	r2, #1
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d52:	8383      	strh	r3, [r0, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d54:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d58:	6184      	str	r4, [r0, #24]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d5a:	6301      	str	r1, [r0, #48]	; 0x30
  hadc2.Init.GainCompensation = 0;
 8000d5c:	6103      	str	r3, [r0, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d62:	63c3      	str	r3, [r0, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000d64:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d68:	6142      	str	r2, [r0, #20]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000d6a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d6e:	f000 fc6f 	bl	8001650 <HAL_ADC_Init>
 8000d72:	b9d8      	cbnz	r0, 8000dac <MX_ADC2_Init+0x88>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d74:	2203      	movs	r2, #3
 8000d76:	237f      	movs	r3, #127	; 0x7f
 8000d78:	4c13      	ldr	r4, [pc, #76]	; (8000dc8 <MX_ADC2_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <MX_ADC2_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_3;
 8000d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d80:	2506      	movs	r5, #6
 8000d82:	2204      	movs	r2, #4
 8000d84:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d86:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_3;
 8000d88:	e9cd 4500 	strd	r4, r5, [sp]
 8000d8c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d90:	f000 fdb0 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000d94:	b988      	cbnz	r0, 8000dba <MX_ADC2_Init+0x96>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <MX_ADC2_Init+0xa8>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <MX_ADC2_Init+0x9c>)
  sConfig.Channel = ADC_CHANNEL_4;
 8000d9a:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d9c:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_4;
 8000d9e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da2:	f000 fda7 	bl	80018f4 <HAL_ADC_ConfigChannel>
 8000da6:	b920      	cbnz	r0, 8000db2 <MX_ADC2_Init+0x8e>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000da8:	b009      	add	sp, #36	; 0x24
 8000daa:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000dac:	f000 fa94 	bl	80012d8 <Error_Handler>
 8000db0:	e7e0      	b.n	8000d74 <MX_ADC2_Init+0x50>
    Error_Handler();
 8000db2:	f000 fa91 	bl	80012d8 <Error_Handler>
}
 8000db6:	b009      	add	sp, #36	; 0x24
 8000db8:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8000dba:	f000 fa8d 	bl	80012d8 <Error_Handler>
 8000dbe:	e7ea      	b.n	8000d96 <MX_ADC2_Init+0x72>
 8000dc0:	20000b60 	.word	0x20000b60
 8000dc4:	50000100 	.word	0x50000100
 8000dc8:	0c900008 	.word	0x0c900008
 8000dcc:	10c00010 	.word	0x10c00010

08000dd0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	b09c      	sub	sp, #112	; 0x70

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	a80b      	add	r0, sp, #44	; 0x2c
 8000dda:	2244      	movs	r2, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8000de0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8000de4:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de6:	f002 fd0b 	bl	8003800 <memset>
  if(adcHandle->Instance==ADC1)
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df0:	d004      	beq.n	8000dfc <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 8000df2:	4a57      	ldr	r2, [pc, #348]	; (8000f50 <HAL_ADC_MspInit+0x180>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d061      	beq.n	8000ebc <HAL_ADC_MspInit+0xec>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000df8:	b01c      	add	sp, #112	; 0x70
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e00:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e06:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e08:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0a:	f002 f9a5 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	f040 8098 	bne.w	8000f44 <HAL_ADC_MspInit+0x174>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <HAL_ADC_MspInit+0x184>)
 8000e16:	6813      	ldr	r3, [r2, #0]
 8000e18:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e1e:	d109      	bne.n	8000e34 <HAL_ADC_MspInit+0x64>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e20:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <HAL_ADC_MspInit+0x188>)
 8000e22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e28:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e30:	9301      	str	r3, [sp, #4]
 8000e32:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	4b48      	ldr	r3, [pc, #288]	; (8000f58 <HAL_ADC_MspInit+0x188>)
    hdma_adc1.Instance = DMA1_Channel2;
 8000e36:	4d49      	ldr	r5, [pc, #292]	; (8000f5c <HAL_ADC_MspInit+0x18c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e42:	f002 0201 	and.w	r2, r2, #1
 8000e46:	9202      	str	r2, [sp, #8]
 8000e48:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e4c:	f042 0202 	orr.w	r2, r2, #2
 8000e50:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e60:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	a906      	add	r1, sp, #24
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f001 fc4d 	bl	800270c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e72:	2201      	movs	r2, #1
 8000e74:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e76:	483a      	ldr	r0, [pc, #232]	; (8000f60 <HAL_ADC_MspInit+0x190>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f001 fc44 	bl	800270c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel2;
 8000e84:	4937      	ldr	r1, [pc, #220]	; (8000f64 <HAL_ADC_MspInit+0x194>)
 8000e86:	6029      	str	r1, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e88:	2205      	movs	r2, #5
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e8a:	2380      	movs	r3, #128	; 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e8c:	606a      	str	r2, [r5, #4]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e90:	60ae      	str	r6, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e92:	60ee      	str	r6, [r5, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e94:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e98:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e9c:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea2:	6168      	str	r0, [r5, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ea4:	e9c5 1206 	strd	r1, r2, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ea8:	4628      	mov	r0, r5
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eaa:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000eac:	f001 fb3a 	bl	8002524 <HAL_DMA_Init>
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d144      	bne.n	8000f3e <HAL_ADC_MspInit+0x16e>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000eb4:	6565      	str	r5, [r4, #84]	; 0x54
 8000eb6:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8000eb8:	b01c      	add	sp, #112	; 0x70
 8000eba:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ec0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ec6:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ec8:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eca:	f002 f945 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d13b      	bne.n	8000f4a <HAL_ADC_MspInit+0x17a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ed2:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <HAL_ADC_MspInit+0x184>)
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ed8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000eda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000edc:	d109      	bne.n	8000ef2 <HAL_ADC_MspInit+0x122>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_ADC_MspInit+0x188>)
 8000ee0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ee6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000eee:	9304      	str	r3, [sp, #16]
 8000ef0:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_ADC_MspInit+0x188>)
    hdma_adc2.Instance = DMA1_Channel1;
 8000ef4:	4d1c      	ldr	r5, [pc, #112]	; (8000f68 <HAL_ADC_MspInit+0x198>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ef8:	f042 0201 	orr.w	r2, r2, #1
 8000efc:	64da      	str	r2, [r3, #76]	; 0x4c
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f06:	22c0      	movs	r2, #192	; 0xc0
 8000f08:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	9805      	ldr	r0, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	a906      	add	r1, sp, #24
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f16:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f001 fbf7 	bl	800270c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 8000f1e:	4913      	ldr	r1, [pc, #76]	; (8000f6c <HAL_ADC_MspInit+0x19c>)
 8000f20:	6029      	str	r1, [r5, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f22:	2224      	movs	r2, #36	; 0x24
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f24:	2380      	movs	r3, #128	; 0x80
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000f26:	606a      	str	r2, [r5, #4]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000f28:	612b      	str	r3, [r5, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f2a:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f2c:	60ee      	str	r6, [r5, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f2e:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f32:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f36:	2220      	movs	r2, #32
    hdma_adc2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f3c:	e7b1      	b.n	8000ea2 <HAL_ADC_MspInit+0xd2>
      Error_Handler();
 8000f3e:	f000 f9cb 	bl	80012d8 <Error_Handler>
 8000f42:	e7b7      	b.n	8000eb4 <HAL_ADC_MspInit+0xe4>
      Error_Handler();
 8000f44:	f000 f9c8 	bl	80012d8 <Error_Handler>
 8000f48:	e764      	b.n	8000e14 <HAL_ADC_MspInit+0x44>
      Error_Handler();
 8000f4a:	f000 f9c5 	bl	80012d8 <Error_Handler>
 8000f4e:	e7c0      	b.n	8000ed2 <HAL_ADC_MspInit+0x102>
 8000f50:	50000100 	.word	0x50000100
 8000f54:	2000082c 	.word	0x2000082c
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	20000c38 	.word	0x20000c38
 8000f60:	48000400 	.word	0x48000400
 8000f64:	4002001c 	.word	0x4002001c
 8000f68:	20000c98 	.word	0x20000c98
 8000f6c:	40020008 	.word	0x40020008

08000f70 <ADC_Start>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void ADC_Start() {
 8000f70:	b508      	push	{r3, lr}
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <ADC_Start+0x44>)
 8000f74:	217f      	movs	r1, #127	; 0x7f
 8000f76:	f001 f841 	bl	8001ffc <HAL_ADCEx_Calibration_Start>
 8000f7a:	b980      	cbnz	r0, 8000f9e <ADC_Start+0x2e>
		// Calibration Error
		Error_Handler();
	}
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <ADC_Start+0x48>)
 8000f7e:	217f      	movs	r1, #127	; 0x7f
 8000f80:	f001 f83c 	bl	8001ffc <HAL_ADCEx_Calibration_Start>
 8000f84:	b998      	cbnz	r0, 8000fae <ADC_Start+0x3e>
		// Calibration Error
		Error_Handler();
	}

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc1_data, NUM_ADC1_CHANNELS);
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <ADC_Start+0x4c>)
 8000f88:	480a      	ldr	r0, [pc, #40]	; (8000fb4 <ADC_Start+0x44>)
 8000f8a:	2206      	movs	r2, #6
 8000f8c:	f000 ff80 	bl	8001e90 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_data, NUM_ADC2_CHANNELS);
}
 8000f90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc2_data, NUM_ADC2_CHANNELS);
 8000f94:	490a      	ldr	r1, [pc, #40]	; (8000fc0 <ADC_Start+0x50>)
 8000f96:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <ADC_Start+0x48>)
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f000 bf79 	b.w	8001e90 <HAL_ADC_Start_DMA>
		Error_Handler();
 8000f9e:	f000 f99b 	bl	80012d8 <Error_Handler>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <ADC_Start+0x48>)
 8000fa4:	217f      	movs	r1, #127	; 0x7f
 8000fa6:	f001 f829 	bl	8001ffc <HAL_ADCEx_Calibration_Start>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d0eb      	beq.n	8000f86 <ADC_Start+0x16>
		Error_Handler();
 8000fae:	f000 f993 	bl	80012d8 <Error_Handler>
 8000fb2:	e7e8      	b.n	8000f86 <ADC_Start+0x16>
 8000fb4:	20000bcc 	.word	0x20000bcc
 8000fb8:	20000b60 	.word	0x20000b60
 8000fbc:	200008bc 	.word	0x200008bc
 8000fc0:	200008a4 	.word	0x200008a4

08000fc4 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fc8:	4668      	mov	r0, sp
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	2100      	movs	r1, #0
 8000fce:	f002 fc17 	bl	8003800 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fd2:	4816      	ldr	r0, [pc, #88]	; (800102c <MX_DAC1_Init+0x68>)
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <MX_DAC1_Init+0x6c>)
 8000fd6:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fd8:	f001 f938 	bl	800224c <HAL_DAC_Init>
 8000fdc:	b9d8      	cbnz	r0, 8001016 <MX_DAC1_Init+0x52>
  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
  sConfig.DAC_DMADoubleDataMode = DISABLE;
  sConfig.DAC_SignedFormat = DISABLE;
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fde:	2400      	movs	r4, #0
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000fe6:	e9cd 4504 	strd	r4, r5, [sp, #16]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000fea:	2200      	movs	r2, #0
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000fec:	2302      	movs	r3, #2
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fee:	2401      	movs	r4, #1
 8000ff0:	2500      	movs	r5, #0
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff2:	480e      	ldr	r0, [pc, #56]	; (800102c <MX_DAC1_Init+0x68>)
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ff4:	f8ad 2004 	strh.w	r2, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff8:	4669      	mov	r1, sp
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ffa:	e9cd 4506 	strd	r4, r5, [sp, #24]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ffe:	9300      	str	r3, [sp, #0]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001000:	f001 f9a2 	bl	8002348 <HAL_DAC_ConfigChannel>
 8001004:	b970      	cbnz	r0, 8001024 <MX_DAC1_Init+0x60>
  {
    Error_Handler();
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_DAC1_Init+0x68>)
 8001008:	4669      	mov	r1, sp
 800100a:	2210      	movs	r2, #16
 800100c:	f001 f99c 	bl	8002348 <HAL_DAC_ConfigChannel>
 8001010:	b920      	cbnz	r0, 800101c <MX_DAC1_Init+0x58>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001012:	b00d      	add	sp, #52	; 0x34
 8001014:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001016:	f000 f95f 	bl	80012d8 <Error_Handler>
 800101a:	e7e0      	b.n	8000fde <MX_DAC1_Init+0x1a>
    Error_Handler();
 800101c:	f000 f95c 	bl	80012d8 <Error_Handler>
}
 8001020:	b00d      	add	sp, #52	; 0x34
 8001022:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001024:	f000 f958 	bl	80012d8 <Error_Handler>
 8001028:	e7ed      	b.n	8001006 <MX_DAC1_Init+0x42>
 800102a:	bf00      	nop
 800102c:	20000cf8 	.word	0x20000cf8
 8001030:	50000800 	.word	0x50000800

08001034 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001034:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC1)
 8001036:	6801      	ldr	r1, [r0, #0]
 8001038:	4a16      	ldr	r2, [pc, #88]	; (8001094 <HAL_DAC_MspInit+0x60>)
{
 800103a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2300      	movs	r3, #0
  if(dacHandle->Instance==DAC1)
 800103e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001044:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001048:	9306      	str	r3, [sp, #24]
  if(dacHandle->Instance==DAC1)
 800104a:	d001      	beq.n	8001050 <HAL_DAC_MspInit+0x1c>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800104c:	b008      	add	sp, #32
 800104e:	bd10      	pop	{r4, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001050:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8001054:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_DAC1_CLK_ENABLE();
 800105c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800105e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001062:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001064:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001066:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
 800106a:	9100      	str	r1, [sp, #0]
 800106c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001070:	f041 0101 	orr.w	r1, r1, #1
 8001074:	64d1      	str	r1, [r2, #76]	; 0x4c
 8001076:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	9304      	str	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	f002 0201 	and.w	r2, r2, #1
 800107e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001080:	2303      	movs	r3, #3
 8001082:	2230      	movs	r2, #48	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001086:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f001 fb3e 	bl	800270c <HAL_GPIO_Init>
}
 8001090:	b008      	add	sp, #32
 8001092:	bd10      	pop	{r4, pc}
 8001094:	50000800 	.word	0x50000800

08001098 <DAC_Start>:
  /* USER CODE END DAC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void DAC_Start() {
 8001098:	b510      	push	{r4, lr}
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800109a:	4c09      	ldr	r4, [pc, #36]	; (80010c0 <DAC_Start+0x28>)
 800109c:	2100      	movs	r1, #0
 800109e:	4620      	mov	r0, r4
 80010a0:	f001 f8ea 	bl	8002278 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80010a4:	4620      	mov	r0, r4
 80010a6:	2110      	movs	r1, #16
 80010a8:	f001 f8e6 	bl	8002278 <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2047);
 80010ac:	2200      	movs	r2, #0
 80010ae:	4620      	mov	r0, r4
 80010b0:	4611      	mov	r1, r2
}
 80010b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2047);
 80010b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010ba:	f001 b927 	b.w	800230c <HAL_DAC_SetValue>
 80010be:	bf00      	nop
 80010c0:	20000cf8 	.word	0x20000cf8

080010c4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_DMA_Init+0x2c>)
 80010c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010c8:	f042 0204 	orr.w	r2, r2, #4
 80010cc:	649a      	str	r2, [r3, #72]	; 0x48
 80010ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
{
 80010d0:	b082      	sub	sp, #8
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010d2:	f002 0204 	and.w	r2, r2, #4
 80010d6:	9200      	str	r2, [sp, #0]
 80010d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010dc:	f042 0201 	orr.w	r2, r2, #1
 80010e0:	649a      	str	r2, [r3, #72]	; 0x48
 80010e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	9b01      	ldr	r3, [sp, #4]

}
 80010ec:	b002      	add	sp, #8
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000

080010f4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80010f4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f6:	2200      	movs	r2, #0
{
 80010f8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	e9cd 2205 	strd	r2, r2, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_GPIO_Init+0x48>)

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TRIG_Pin|VOCT_JUMPER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	480f      	ldr	r0, [pc, #60]	; (8001140 <MX_GPIO_Init+0x4c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001104:	f042 0201 	orr.w	r2, r2, #1
 8001108:	64da      	str	r2, [r3, #76]	; 0x4c
 800110a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800110c:	f002 0201 	and.w	r2, r2, #1
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001116:	f042 0202 	orr.w	r2, r2, #2
 800111a:	64da      	str	r2, [r3, #76]	; 0x4c
 800111c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = TRIG_Pin|VOCT_JUMPER_Pin;
 8001124:	2288      	movs	r2, #136	; 0x88
 8001126:	2300      	movs	r3, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = TRIG_Pin|VOCT_JUMPER_Pin;
 800112c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001130:	9d01      	ldr	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001132:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f001 faea 	bl	800270c <HAL_GPIO_Init>

}
 8001138:	b009      	add	sp, #36	; 0x24
 800113a:	bd30      	pop	{r4, r5, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b530      	push	{r4, r5, lr}
 8001146:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001148:	2238      	movs	r2, #56	; 0x38
 800114a:	2100      	movs	r1, #0
 800114c:	a806      	add	r0, sp, #24
 800114e:	f002 fb57 	bl	8003800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001152:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	f44f 7000 	mov.w	r0, #512	; 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	e9cd 3300 	strd	r3, r3, [sp]
 800115c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001160:	9304      	str	r3, [sp, #16]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001162:	f001 fbd7 	bl	8002914 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001166:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001170:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	f44f 7180 	mov.w	r1, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800117a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800117e:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001180:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001184:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f001 fc4a 	bl	8002a20 <HAL_RCC_OscConfig>
 800118c:	b108      	cbz	r0, 8001192 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001190:	e7fe      	b.n	8001190 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001194:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	2503      	movs	r5, #3
 8001198:	240f      	movs	r4, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	2200      	movs	r2, #0
 800119e:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	e9cd 4500 	strd	r4, r5, [sp]
 80011a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011aa:	f001 febd 	bl	8002f28 <HAL_RCC_ClockConfig>
 80011ae:	b108      	cbz	r0, 80011b4 <SystemClock_Config+0x70>
 80011b0:	b672      	cpsid	i
	while (1) {
 80011b2:	e7fe      	b.n	80011b2 <SystemClock_Config+0x6e>
}
 80011b4:	b015      	add	sp, #84	; 0x54
 80011b6:	bd30      	pop	{r4, r5, pc}

080011b8 <main>:
{
 80011b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_Init();
 80011ba:	f000 fa27 	bl	800160c <HAL_Init>
  SystemClock_Config();
 80011be:	f7ff ffc1 	bl	8001144 <SystemClock_Config>
  MX_GPIO_Init();
 80011c2:	f7ff ff97 	bl	80010f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c6:	f7ff ff7d 	bl	80010c4 <MX_DMA_Init>
  MX_ADC1_Init();
 80011ca:	f7ff fd07 	bl	8000bdc <MX_ADC1_Init>
  MX_ADC2_Init();
 80011ce:	f7ff fda9 	bl	8000d24 <MX_ADC2_Init>
  MX_DAC1_Init();
 80011d2:	f7ff fef7 	bl	8000fc4 <MX_DAC1_Init>
  MX_TIM2_Init();
 80011d6:	f000 f90b 	bl	80013f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011da:	f000 f943 	bl	8001464 <MX_TIM3_Init>
	ADC_Start();
 80011de:	f7ff fec7 	bl	8000f70 <ADC_Start>
	TIM_Start();
 80011e2:	f000 f9b5 	bl	8001550 <TIM_Start>
	DAC_Start();
 80011e6:	f7ff ff57 	bl	8001098 <DAC_Start>
	dynamic_smooth_init(&dynamic_smooth_a, 0.05f, 0.5f);
 80011ea:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80012a0 <main+0xe8>
 80011ee:	482d      	ldr	r0, [pc, #180]	; (80012a4 <main+0xec>)
	VREFINT_CAL = *VREFINT_CAL_ADDR;
 80011f0:	4f2d      	ldr	r7, [pc, #180]	; (80012a8 <main+0xf0>)
 80011f2:	4e2e      	ldr	r6, [pc, #184]	; (80012ac <main+0xf4>)
	dynamic_smooth_init(&dynamic_smooth_a, 0.05f, 0.5f);
 80011f4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80011f8:	f7ff fcb0 	bl	8000b5c <dynamic_smooth_init>
	adsr_structinit(&OP1.ADSR);
 80011fc:	482c      	ldr	r0, [pc, #176]	; (80012b0 <main+0xf8>)
 80011fe:	f7ff fa4f 	bl	80006a0 <adsr_structinit>
	VREFINT_CAL = *VREFINT_CAL_ADDR;
 8001202:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <main+0xfc>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	803b      	strh	r3, [r7, #0]
	while (adc1_data[VREFINT_PIN] == 0) {
 8001208:	8973      	ldrh	r3, [r6, #10]
 800120a:	b29b      	uxth	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0fb      	beq.n	8001208 <main+0x50>
 8001210:	4d29      	ldr	r5, [pc, #164]	; (80012b8 <main+0x100>)
 8001212:	4c2a      	ldr	r4, [pc, #168]	; (80012bc <main+0x104>)
		vdd_mv += ((3000.0f * VREFINT_CAL / (float)(adc1_data[VREFINT_PIN])) - vdd_mv) * 0.2f;
 8001214:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80012c0 <main+0x108>
 8001218:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 80012c4 <main+0x10c>
 800121c:	883a      	ldrh	r2, [r7, #0]
 800121e:	8970      	ldrh	r0, [r6, #10]
 8001220:	8821      	ldrh	r1, [r4, #0]
 8001222:	8823      	ldrh	r3, [r4, #0]
 8001224:	b292      	uxth	r2, r2
 8001226:	ee07 2a90 	vmov	s15, r2
 800122a:	b280      	uxth	r0, r0
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ee07 0a10 	vmov	s14, r0
 8001234:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8001238:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800123c:	b289      	uxth	r1, r1
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	b29b      	uxth	r3, r3
	for(int i=0; i<100000; i++) {
 8001244:	3d01      	subs	r5, #1
		vdd_mv += ((3000.0f * VREFINT_CAL / (float)(adc1_data[VREFINT_PIN])) - vdd_mv) * 0.2f;
 8001246:	ee07 1a10 	vmov	s14, r1
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800125a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800125e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001262:	ee17 3a90 	vmov	r3, s15
 8001266:	b29b      	uxth	r3, r3
 8001268:	8023      	strh	r3, [r4, #0]
	for(int i=0; i<100000; i++) {
 800126a:	d1d7      	bne.n	800121c <main+0x64>
	khz_correction = 3300.0f / vdd_mv;
 800126c:	8823      	ldrh	r3, [r4, #0]
 800126e:	eddf 6a16 	vldr	s13, [pc, #88]	; 80012c8 <main+0x110>
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <main+0x114>)
	khz_in_mv = adc2_data[KHZ_JACK] * 3300 >> 12;
 8001274:	4a16      	ldr	r2, [pc, #88]	; (80012d0 <main+0x118>)
 8001276:	4917      	ldr	r1, [pc, #92]	; (80012d4 <main+0x11c>)
	khz_correction = 3300.0f / vdd_mv;
 8001278:	b29b      	uxth	r3, r3
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	khz_in_mv = adc2_data[KHZ_JACK] * 3300 >> 12;
 8001282:	f640 43e4 	movw	r3, #3300	; 0xce4
	khz_correction = 3300.0f / vdd_mv;
 8001286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800128a:	ed80 7a00 	vstr	s14, [r0]
	khz_in_mv = adc2_data[KHZ_JACK] * 3300 >> 12;
 800128e:	8812      	ldrh	r2, [r2, #0]
 8001290:	b292      	uxth	r2, r2
 8001292:	fb03 f302 	mul.w	r3, r3, r2
 8001296:	0b1b      	lsrs	r3, r3, #12
 8001298:	800b      	strh	r3, [r1, #0]
		loop();
 800129a:	f7ff fc9d 	bl	8000bd8 <loop>
	while (1) {
 800129e:	e7fc      	b.n	800129a <main+0xe2>
 80012a0:	3d4ccccd 	.word	0x3d4ccccd
 80012a4:	20000ad4 	.word	0x20000ad4
 80012a8:	20000892 	.word	0x20000892
 80012ac:	200008bc 	.word	0x200008bc
 80012b0:	20000858 	.word	0x20000858
 80012b4:	1fff75aa 	.word	0x1fff75aa
 80012b8:	000186a0 	.word	0x000186a0
 80012bc:	20000890 	.word	0x20000890
 80012c0:	453b8000 	.word	0x453b8000
 80012c4:	3e4ccccd 	.word	0x3e4ccccd
 80012c8:	454e4000 	.word	0x454e4000
 80012cc:	200008ac 	.word	0x200008ac
 80012d0:	200008a4 	.word	0x200008a4
 80012d4:	20000834 	.word	0x20000834

080012d8 <Error_Handler>:
 80012d8:	b672      	cpsid	i
	while (1) {
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x2>

080012dc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_MspInit+0x30>)
 80012de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012e0:	f042 0201 	orr.w	r2, r2, #1
 80012e4:	661a      	str	r2, [r3, #96]	; 0x60
 80012e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80012e8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	f002 0201 	and.w	r2, r2, #1
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012f8:	659a      	str	r2, [r3, #88]	; 0x58
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001304:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8001306:	f001 bb83 	b.w	8002a10 <HAL_PWREx_DisableUCPDDeadBattery>
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000

08001310 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001310:	e7fe      	b.n	8001310 <NMI_Handler>
 8001312:	bf00      	nop

08001314 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <HardFault_Handler>
 8001316:	bf00      	nop

08001318 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <MemManage_Handler>
 800131a:	bf00      	nop

0800131c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <BusFault_Handler>
 800131e:	bf00      	nop

08001320 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler>
 8001322:	bf00      	nop

08001324 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop

08001328 <DebugMon_Handler>:
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop

0800132c <PendSV_Handler>:
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001330:	f000 b97c 	b.w	800162c <HAL_IncTick>

08001334 <TIM2_IRQHandler>:
#if 0
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
#endif
	if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <TIM2_IRQHandler+0x1c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	07d1      	lsls	r1, r2, #31
 800133c:	d502      	bpl.n	8001344 <TIM2_IRQHandler+0x10>
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	07d2      	lsls	r2, r2, #31
 8001342:	d400      	bmi.n	8001346 <TIM2_IRQHandler+0x12>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
			main_2OP_loop();
		}
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 8001344:	4770      	bx	lr
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8001346:	f06f 0201 	mvn.w	r2, #1
 800134a:	611a      	str	r2, [r3, #16]
			main_2OP_loop();
 800134c:	f7ff ba82 	b.w	8000854 <main_2OP_loop>
 8001350:	20000d58 	.word	0x20000d58

08001354 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001354:	b508      	push	{r3, lr}
#endif
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */
	if (__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET) {
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <TIM3_IRQHandler+0x6c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	07d1      	lsls	r1, r2, #31
 800135e:	d529      	bpl.n	80013b4 <TIM3_IRQHandler+0x60>
		if (__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) != RESET) {
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	07d2      	lsls	r2, r2, #31
 8001364:	d526      	bpl.n	80013b4 <TIM3_IRQHandler+0x60>
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);

			for (uint8_t i = 0; i < (NUM_ADC1_CHANNELS - 1); i++) {
				adc1_data_10b[i] = adc1_data[i] >> 2;
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <TIM3_IRQHandler+0x70>)
			}

			run_linear_a_expo_r(&OP1.ADSR);
 8001368:	4817      	ldr	r0, [pc, #92]	; (80013c8 <TIM3_IRQHandler+0x74>)
			__HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 800136a:	f06f 0101 	mvn.w	r1, #1
 800136e:	6119      	str	r1, [r3, #16]
				adc1_data_10b[i] = adc1_data[i] >> 2;
 8001370:	8811      	ldrh	r1, [r2, #0]
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <TIM3_IRQHandler+0x78>)
 8001374:	f3c1 018d 	ubfx	r1, r1, #2, #14
 8001378:	8019      	strh	r1, [r3, #0]
 800137a:	8851      	ldrh	r1, [r2, #2]
 800137c:	f3c1 018d 	ubfx	r1, r1, #2, #14
 8001380:	8059      	strh	r1, [r3, #2]
 8001382:	8891      	ldrh	r1, [r2, #4]
 8001384:	f3c1 018d 	ubfx	r1, r1, #2, #14
 8001388:	8099      	strh	r1, [r3, #4]
 800138a:	88d1      	ldrh	r1, [r2, #6]
 800138c:	f3c1 018d 	ubfx	r1, r1, #2, #14
 8001390:	80d9      	strh	r1, [r3, #6]
 8001392:	8912      	ldrh	r2, [r2, #8]
 8001394:	f3c2 028d 	ubfx	r2, r2, #2, #14
 8001398:	811a      	strh	r2, [r3, #8]
			run_linear_a_expo_r(&OP1.ADSR);
 800139a:	f7ff f999 	bl	80006d0 <run_linear_a_expo_r>
			set_adsr_parameters(&OP1.ADSR);
 800139e:	480a      	ldr	r0, [pc, #40]	; (80013c8 <TIM3_IRQHandler+0x74>)
 80013a0:	f7ff fa0e 	bl	80007c0 <set_adsr_parameters>

#ifndef VOCT
			if(HAL_GPIO_ReadPin(VOCT_JUMPER_GPIO_Port, VOCT_JUMPER_Pin) == 0) {
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <TIM3_IRQHandler+0x7c>)
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	f001 faae 	bl	8002908 <HAL_GPIO_ReadPin>
				khz_in_scaling = VOCT_SCALE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <TIM3_IRQHandler+0x80>)
			if(HAL_GPIO_ReadPin(VOCT_JUMPER_GPIO_Port, VOCT_JUMPER_Pin) == 0) {
 80013ae:	b910      	cbnz	r0, 80013b6 <TIM3_IRQHandler+0x62>
				khz_in_scaling = VOCT_SCALE;
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <TIM3_IRQHandler+0x84>)
 80013b2:	601a      	str	r2, [r3, #0]
			khz_in_scaling = VOCT_SCALE;
#endif
		}
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 80013b4:	bd08      	pop	{r3, pc}
				khz_in_scaling = WIDE_SCALE;
 80013b6:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	bd08      	pop	{r3, pc}
 80013be:	bf00      	nop
 80013c0:	20000d0c 	.word	0x20000d0c
 80013c4:	200008bc 	.word	0x200008bc
 80013c8:	20000858 	.word	0x20000858
 80013cc:	20000b54 	.word	0x20000b54
 80013d0:	48000400 	.word	0x48000400
 80013d4:	20000800 	.word	0x20000800
 80013d8:	3e16d5a4 	.word	0x3e16d5a4

080013dc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <SystemInit+0x10>)
 80013de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013f0:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f2:	481b      	ldr	r0, [pc, #108]	; (8001460 <MX_TIM2_Init+0x70>)
{
 80013f4:	b089      	sub	sp, #36	; 0x24
  htim2.Instance = TIM2;
 80013f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 1600;
 80013fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  htim2.Instance = TIM2;
 80013fe:	6003      	str	r3, [r0, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001400:	2300      	movs	r3, #0
 8001402:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001406:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim2.Init.Period = 1600;
 800140a:	60c2      	str	r2, [r0, #12]
  htim2.Init.Prescaler = 0;
 800140c:	6043      	str	r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001410:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	6083      	str	r3, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001418:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141a:	f001 ffe9 	bl	80033f0 <HAL_TIM_Base_Init>
 800141e:	b998      	cbnz	r0, 8001448 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001424:	480e      	ldr	r0, [pc, #56]	; (8001460 <MX_TIM2_Init+0x70>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001428:	a904      	add	r1, sp, #16
 800142a:	f002 f8a9 	bl	8003580 <HAL_TIM_ConfigClockSource>
 800142e:	b998      	cbnz	r0, 8001458 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001430:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001432:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <MX_TIM2_Init+0x70>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001436:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001438:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800143c:	f002 f974 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	b928      	cbnz	r0, 800144e <MX_TIM2_Init+0x5e>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001442:	b009      	add	sp, #36	; 0x24
 8001444:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001448:	f7ff ff46 	bl	80012d8 <Error_Handler>
 800144c:	e7e8      	b.n	8001420 <MX_TIM2_Init+0x30>
    Error_Handler();
 800144e:	f7ff ff43 	bl	80012d8 <Error_Handler>
}
 8001452:	b009      	add	sp, #36	; 0x24
 8001454:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001458:	f7ff ff3e 	bl	80012d8 <Error_Handler>
 800145c:	e7e8      	b.n	8001430 <MX_TIM2_Init+0x40>
 800145e:	bf00      	nop
 8001460:	20000d58 	.word	0x20000d58

08001464 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001464:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001466:	481a      	ldr	r0, [pc, #104]	; (80014d0 <MX_TIM3_Init+0x6c>)
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM3_Init+0x70>)
 800146a:	6003      	str	r3, [r0, #0]
{
 800146c:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 12800;
 8001470:	f44f 5248 	mov.w	r2, #12800	; 0x3200
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001474:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim3.Init.Period = 12800;
 800147c:	60c2      	str	r2, [r0, #12]
  htim3.Init.Prescaler = 0;
 800147e:	6043      	str	r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001480:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	6083      	str	r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148c:	f001 ffb0 	bl	80033f0 <HAL_TIM_Base_Init>
 8001490:	b998      	cbnz	r0, 80014ba <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	; (80014d0 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149a:	a904      	add	r1, sp, #16
 800149c:	f002 f870 	bl	8003580 <HAL_TIM_ConfigClockSource>
 80014a0:	b998      	cbnz	r0, 80014ca <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a2:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a4:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014a8:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014aa:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ae:	f002 f93b 	bl	8003728 <HAL_TIMEx_MasterConfigSynchronization>
 80014b2:	b928      	cbnz	r0, 80014c0 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	b009      	add	sp, #36	; 0x24
 80014b6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014ba:	f7ff ff0d 	bl	80012d8 <Error_Handler>
 80014be:	e7e8      	b.n	8001492 <MX_TIM3_Init+0x2e>
    Error_Handler();
 80014c0:	f7ff ff0a 	bl	80012d8 <Error_Handler>
}
 80014c4:	b009      	add	sp, #36	; 0x24
 80014c6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014ca:	f7ff ff05 	bl	80012d8 <Error_Handler>
 80014ce:	e7e8      	b.n	80014a2 <MX_TIM3_Init+0x3e>
 80014d0:	20000d0c 	.word	0x20000d0c
 80014d4:	40000400 	.word	0x40000400

080014d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d8:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM2)
 80014da:	6803      	ldr	r3, [r0, #0]
 80014dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80014e0:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM2)
 80014e2:	d005      	beq.n	80014f0 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_TIM_Base_MspInit+0x70>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d018      	beq.n	800151c <HAL_TIM_Base_MspInit+0x44>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80014ea:	b003      	add	sp, #12
 80014ec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f4:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	659a      	str	r2, [r3, #88]	; 0x58
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001508:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800150a:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800150c:	f000 fe3e 	bl	800218c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
}
 8001512:	b003      	add	sp, #12
 8001514:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001518:	f000 be70 	b.w	80021fc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_TIM_Base_MspInit+0x74>)
 800151e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001520:	f042 0202 	orr.w	r2, r2, #2
 8001524:	659a      	str	r2, [r3, #88]	; 0x58
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2101      	movs	r1, #1
 8001532:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001534:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001536:	f000 fe29 	bl	800218c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800153a:	201d      	movs	r0, #29
}
 800153c:	b003      	add	sp, #12
 800153e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001542:	f000 be5b 	b.w	80021fc <HAL_NVIC_EnableIRQ>
 8001546:	bf00      	nop
 8001548:	40000400 	.word	0x40000400
 800154c:	40021000 	.word	0x40021000

08001550 <TIM_Start>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void TIM_Start() {
 8001550:	b508      	push	{r3, lr}
	HAL_TIM_Base_Start_IT(&htim2);
 8001552:	4804      	ldr	r0, [pc, #16]	; (8001564 <TIM_Start+0x14>)
 8001554:	f001 ffda 	bl	800350c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
}
 8001558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_TIM_Base_Start_IT(&htim3);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <TIM_Start+0x18>)
 800155e:	f001 bfd5 	b.w	800350c <HAL_TIM_Base_Start_IT>
 8001562:	bf00      	nop
 8001564:	20000d58 	.word	0x20000d58
 8001568:	20000d0c 	.word	0x20000d0c

0800156c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800156e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001570:	f7ff ff34 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopForever+0xe>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopForever+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f002 f90d 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159e:	f7ff fe0b 	bl	80011b8 <main>

080015a2 <LoopForever>:

LoopForever:
    b LoopForever
 80015a2:	e7fe      	b.n	80015a2 <LoopForever>
  ldr   r0, =_estack
 80015a4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000810 	.word	0x20000810
  ldr r2, =_sidata
 80015b0:	08004040 	.word	0x08004040
  ldr r2, =_sbss
 80015b4:	20000810 	.word	0x20000810
  ldr r4, =_ebss
 80015b8:	20000da8 	.word	0x20000da8

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_InitTick+0x40>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	b90b      	cbnz	r3, 80015cc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015cc:	490d      	ldr	r1, [pc, #52]	; (8001604 <HAL_InitTick+0x44>)
 80015ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d2:	4605      	mov	r5, r0
 80015d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d8:	6808      	ldr	r0, [r1, #0]
 80015da:	fbb0 f0f3 	udiv	r0, r0, r3
 80015de:	f000 fe1b 	bl	8002218 <HAL_SYSTICK_Config>
 80015e2:	4604      	mov	r4, r0
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d1ef      	bne.n	80015c8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e8:	2d0f      	cmp	r5, #15
 80015ea:	d8ed      	bhi.n	80015c8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	4602      	mov	r2, r0
 80015ee:	4629      	mov	r1, r5
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f000 fdca 	bl	800218c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_InitTick+0x48>)
 80015fa:	4620      	mov	r0, r4
 80015fc:	601d      	str	r5, [r3, #0]
}
 80015fe:	bd38      	pop	{r3, r4, r5, pc}
 8001600:	20000808 	.word	0x20000808
 8001604:	20000804 	.word	0x20000804
 8001608:	2000080c 	.word	0x2000080c

0800160c <HAL_Init>:
{
 800160c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160e:	2003      	movs	r0, #3
 8001610:	f000 fda8 	bl	8002164 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	200f      	movs	r0, #15
 8001616:	f7ff ffd3 	bl	80015c0 <HAL_InitTick>
 800161a:	b110      	cbz	r0, 8001622 <HAL_Init+0x16>
    status = HAL_ERROR;
 800161c:	2401      	movs	r4, #1
}
 800161e:	4620      	mov	r0, r4
 8001620:	bd10      	pop	{r4, pc}
 8001622:	4604      	mov	r4, r0
    HAL_MspInit();
 8001624:	f7ff fe5a 	bl	80012dc <HAL_MspInit>
}
 8001628:	4620      	mov	r0, r4
 800162a:	bd10      	pop	{r4, pc}

0800162c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800162c:	4a03      	ldr	r2, [pc, #12]	; (800163c <HAL_IncTick+0x10>)
 800162e:	4904      	ldr	r1, [pc, #16]	; (8001640 <HAL_IncTick+0x14>)
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	440b      	add	r3, r1
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000da4 	.word	0x20000da4
 8001640:	20000808 	.word	0x20000808

08001644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001644:	4b01      	ldr	r3, [pc, #4]	; (800164c <HAL_GetTick+0x8>)
 8001646:	6818      	ldr	r0, [r3, #0]
}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000da4 	.word	0x20000da4

08001650 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001654:	2300      	movs	r3, #0
 8001656:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001658:	2800      	cmp	r0, #0
 800165a:	f000 80d0 	beq.w	80017fe <HAL_ADC_Init+0x1ae>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800165e:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001660:	4604      	mov	r4, r0
 8001662:	2d00      	cmp	r5, #0
 8001664:	f000 80b8 	beq.w	80017d8 <HAL_ADC_Init+0x188>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001668:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800166a:	6893      	ldr	r3, [r2, #8]
 800166c:	0098      	lsls	r0, r3, #2
 800166e:	d505      	bpl.n	800167c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001670:	6893      	ldr	r3, [r2, #8]
 8001672:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001676:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800167a:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800167c:	6893      	ldr	r3, [r2, #8]
 800167e:	00d9      	lsls	r1, r3, #3
 8001680:	d419      	bmi.n	80016b6 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <HAL_ADC_Init+0x1f0>)
 8001684:	486f      	ldr	r0, [pc, #444]	; (8001844 <HAL_ADC_Init+0x1f4>)
 8001686:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001688:	6891      	ldr	r1, [r2, #8]
 800168a:	099b      	lsrs	r3, r3, #6
 800168c:	fba0 0303 	umull	r0, r3, r0, r3
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8001696:	3301      	adds	r3, #1
 8001698:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80016a2:	6091      	str	r1, [r2, #8]
 80016a4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	b12b      	cbz	r3, 80016b6 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80016aa:	9b01      	ldr	r3, [sp, #4]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016b6:	6893      	ldr	r3, [r2, #8]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	d47f      	bmi.n	80017bc <HAL_ADC_Init+0x16c>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016bc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016cc:	6893      	ldr	r3, [r2, #8]
 80016ce:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 80016d2:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016d8:	d177      	bne.n	80017ca <HAL_ADC_Init+0x17a>
 80016da:	06de      	lsls	r6, r3, #27
 80016dc:	d475      	bmi.n	80017ca <HAL_ADC_Init+0x17a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016ea:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016ec:	07dd      	lsls	r5, r3, #31
 80016ee:	d40e      	bmi.n	800170e <HAL_ADC_Init+0xbe>
 80016f0:	4b55      	ldr	r3, [pc, #340]	; (8001848 <HAL_ADC_Init+0x1f8>)
 80016f2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80016f6:	6889      	ldr	r1, [r1, #8]
 80016f8:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016fa:	430b      	orrs	r3, r1
 80016fc:	07d9      	lsls	r1, r3, #31
 80016fe:	d406      	bmi.n	800170e <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001700:	4952      	ldr	r1, [pc, #328]	; (800184c <HAL_ADC_Init+0x1fc>)
 8001702:	6865      	ldr	r5, [r4, #4]
 8001704:	688b      	ldr	r3, [r1, #8]
 8001706:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800170a:	432b      	orrs	r3, r5
 800170c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 800170e:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8001712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001714:	432b      	orrs	r3, r5
 8001716:	430b      	orrs	r3, r1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001718:	7f65      	ldrb	r5, [r4, #29]
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800171a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                 hadc->Init.DataAlign                                                   |
 800171e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001722:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001724:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001728:	d064      	beq.n	80017f4 <HAL_ADC_Init+0x1a4>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800172a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800172c:	b121      	cbz	r1, 8001738 <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 800172e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001730:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001734:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001736:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001738:	68d6      	ldr	r6, [r2, #12]
 800173a:	4945      	ldr	r1, [pc, #276]	; (8001850 <HAL_ADC_Init+0x200>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800173c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800173e:	4031      	ands	r1, r6
 8001740:	430b      	orrs	r3, r1
 8001742:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001744:	6913      	ldr	r3, [r2, #16]
 8001746:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800174a:	432b      	orrs	r3, r5
 800174c:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800174e:	6893      	ldr	r3, [r2, #8]
 8001750:	071b      	lsls	r3, r3, #28
 8001752:	d424      	bmi.n	800179e <HAL_ADC_Init+0x14e>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001754:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001756:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800175a:	7f26      	ldrb	r6, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 800175c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800175e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001762:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001764:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001768:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800176c:	430b      	orrs	r3, r1
 800176e:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001770:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8001772:	2d00      	cmp	r5, #0
 8001774:	d046      	beq.n	8001804 <HAL_ADC_Init+0x1b4>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800177c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001780:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001784:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001788:	432b      	orrs	r3, r5
 800178a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800178e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001792:	2b01      	cmp	r3, #1
 8001794:	d042      	beq.n	800181c <HAL_ADC_Init+0x1cc>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001796:	6913      	ldr	r3, [r2, #16]
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800179e:	6963      	ldr	r3, [r4, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d01f      	beq.n	80017e4 <HAL_ADC_Init+0x194>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017a6:	f023 030f 	bic.w	r3, r3, #15
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017bc:	6893      	ldr	r3, [r2, #8]
 80017be:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c2:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80017c8:	d087      	beq.n	80016da <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80017d4:	b002      	add	sp, #8
 80017d6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 80017d8:	f7ff fafa 	bl	8000dd0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80017de:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80017e2:	e741      	b.n	8001668 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80017e6:	6a23      	ldr	r3, [r4, #32]
 80017e8:	f021 010f 	bic.w	r1, r1, #15
 80017ec:	3b01      	subs	r3, #1
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	e7db      	b.n	80017ac <HAL_ADC_Init+0x15c>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80017f6:	3901      	subs	r1, #1
 80017f8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80017fc:	e795      	b.n	800172a <HAL_ADC_Init+0xda>
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
}
 8001800:	b002      	add	sp, #8
 8001802:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800180a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800180e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001812:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001816:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800181a:	e7b8      	b.n	800178e <HAL_ADC_Init+0x13e>
        MODIFY_REG(hadc->Instance->CFGR2,
 800181c:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8001820:	6911      	ldr	r1, [r2, #16]
 8001822:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001824:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001828:	f021 0104 	bic.w	r1, r1, #4
 800182c:	4333      	orrs	r3, r6
 800182e:	430b      	orrs	r3, r1
 8001830:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001832:	432b      	orrs	r3, r5
 8001834:	430b      	orrs	r3, r1
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6113      	str	r3, [r2, #16]
 800183c:	e7af      	b.n	800179e <HAL_ADC_Init+0x14e>
 800183e:	bf00      	nop
 8001840:	20000804 	.word	0x20000804
 8001844:	053e2d63 	.word	0x053e2d63
 8001848:	50000100 	.word	0x50000100
 800184c:	50000300 	.word	0x50000300
 8001850:	fff04007 	.word	0xfff04007

08001854 <HAL_ADC_ConvCpltCallback>:
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_ADC_ConvHalfCpltCallback>:
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800185c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800185e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001860:	f7ff fffa 	bl	8001858 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001864:	bd08      	pop	{r3, pc}
 8001866:	bf00      	nop

08001868 <HAL_ADC_ErrorCallback>:
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop

0800186c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800186c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800186e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001870:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001874:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001878:	d11d      	bne.n	80018b6 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800187a:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800187c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001880:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001882:	680a      	ldr	r2, [r1, #0]
 8001884:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001888:	68ca      	ldr	r2, [r1, #12]
 800188a:	d01b      	beq.n	80018c4 <ADC_DMAConvCplt+0x58>
 800188c:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001890:	d10d      	bne.n	80018ae <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001892:	68ca      	ldr	r2, [r1, #12]
 8001894:	0494      	lsls	r4, r2, #18
 8001896:	d40a      	bmi.n	80018ae <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001898:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800189a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800189e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a2:	04d1      	lsls	r1, r2, #19
 80018a4:	d403      	bmi.n	80018ae <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ffd0 	bl	8001854 <HAL_ADC_ConvCpltCallback>
}
 80018b4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018b6:	06d2      	lsls	r2, r2, #27
 80018b8:	d40a      	bmi.n	80018d0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80018bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c2:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80018c4:	0790      	lsls	r0, r2, #30
 80018c6:	d5e7      	bpl.n	8001898 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ffc3 	bl	8001854 <HAL_ADC_ConvCpltCallback>
 80018ce:	e7f1      	b.n	80018b4 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ffc9 	bl	8001868 <HAL_ADC_ErrorCallback>
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80018da:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80018de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e2:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e4:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ec:	f7ff ffbc 	bl	8001868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f0:	bd08      	pop	{r3, pc}
 80018f2:	bf00      	nop

080018f4 <HAL_ADC_ConfigChannel>:
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80018f6:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 80018fa:	b083      	sub	sp, #12
 80018fc:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80018fe:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001900:	f04f 0000 	mov.w	r0, #0
 8001904:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001906:	f000 8143 	beq.w	8001b90 <HAL_ADC_ConfigChannel+0x29c>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800190a:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800190c:	2001      	movs	r0, #1
 800190e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001912:	6894      	ldr	r4, [r2, #8]
 8001914:	0766      	lsls	r6, r4, #29
 8001916:	d43d      	bmi.n	8001994 <HAL_ADC_ConfigChannel+0xa0>
  MODIFY_REG(*preg,
 8001918:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800191c:	09a6      	lsrs	r6, r4, #6
 800191e:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8001922:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8001926:	f004 041f 	and.w	r4, r4, #31
 800192a:	5977      	ldr	r7, [r6, r5]
 800192c:	f04f 0c1f 	mov.w	ip, #31
 8001930:	fa0c fc04 	lsl.w	ip, ip, r4
 8001934:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001938:	ea27 070c 	bic.w	r7, r7, ip
 800193c:	40a0      	lsls	r0, r4
 800193e:	4338      	orrs	r0, r7
 8001940:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001942:	6890      	ldr	r0, [r2, #8]
 8001944:	0745      	lsls	r5, r0, #29
 8001946:	f140 809a 	bpl.w	8001a7e <HAL_ADC_ConfigChannel+0x18a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800194a:	6890      	ldr	r0, [r2, #8]
 800194c:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800194e:	6894      	ldr	r4, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001950:	07e4      	lsls	r4, r4, #31
 8001952:	d530      	bpl.n	80019b6 <HAL_ADC_ConfigChannel+0xc2>
 8001954:	4604      	mov	r4, r0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001956:	49c2      	ldr	r1, [pc, #776]	; (8001c60 <HAL_ADC_ConfigChannel+0x36c>)
 8001958:	420c      	tst	r4, r1
 800195a:	d02a      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800195c:	49c1      	ldr	r1, [pc, #772]	; (8001c64 <HAL_ADC_ConfigChannel+0x370>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800195e:	4dc2      	ldr	r5, [pc, #776]	; (8001c68 <HAL_ADC_ConfigChannel+0x374>)
 8001960:	6888      	ldr	r0, [r1, #8]
 8001962:	42ac      	cmp	r4, r5
 8001964:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8001968:	d01d      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0xb2>
 800196a:	4dc0      	ldr	r5, [pc, #768]	; (8001c6c <HAL_ADC_ConfigChannel+0x378>)
 800196c:	42ac      	cmp	r4, r5
 800196e:	d01a      	beq.n	80019a6 <HAL_ADC_ConfigChannel+0xb2>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001970:	4dbf      	ldr	r5, [pc, #764]	; (8001c70 <HAL_ADC_ConfigChannel+0x37c>)
 8001972:	42ac      	cmp	r4, r5
 8001974:	f040 813e 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x300>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001978:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800197c:	d119      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800197e:	4cbd      	ldr	r4, [pc, #756]	; (8001c74 <HAL_ADC_ConfigChannel+0x380>)
 8001980:	42a2      	cmp	r2, r4
 8001982:	d016      	beq.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001984:	688a      	ldr	r2, [r1, #8]
 8001986:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800198a:	4316      	orrs	r6, r2
 800198c:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8001990:	608e      	str	r6, [r1, #8]
}
 8001992:	e003      	b.n	800199c <HAL_ADC_ConfigChannel+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001996:	f042 0220 	orr.w	r2, r2, #32
 800199a:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80019a2:	b003      	add	sp, #12
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019a6:	0201      	lsls	r1, r0, #8
 80019a8:	d403      	bmi.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80019aa:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80019ae:	f000 8102 	beq.w	8001bb6 <HAL_ADC_ConfigChannel+0x2c2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b2:	2000      	movs	r0, #0
 80019b4:	e7f2      	b.n	800199c <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019b6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80019b8:	4caf      	ldr	r4, [pc, #700]	; (8001c78 <HAL_ADC_ConfigChannel+0x384>)
 80019ba:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019be:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8001c88 <HAL_ADC_ConfigChannel+0x394>
 80019c2:	f006 0718 	and.w	r7, r6, #24
 80019c6:	40fc      	lsrs	r4, r7
 80019c8:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80019cc:	4004      	ands	r4, r0
 80019ce:	ea25 0507 	bic.w	r5, r5, r7
 80019d2:	432c      	orrs	r4, r5
 80019d4:	4566      	cmp	r6, ip
 80019d6:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80019da:	4604      	mov	r4, r0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80019dc:	d1bb      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x62>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80019de:	2f00      	cmp	r7, #0
 80019e0:	f000 80d9 	beq.w	8001b96 <HAL_ADC_ConfigChannel+0x2a2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019e8:	2c00      	cmp	r4, #0
 80019ea:	f000 8181 	beq.w	8001cf0 <HAL_ADC_ConfigChannel+0x3fc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80019ee:	fab4 f484 	clz	r4, r4
 80019f2:	3401      	adds	r4, #1
 80019f4:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019f8:	2c09      	cmp	r4, #9
 80019fa:	f240 8179 	bls.w	8001cf0 <HAL_ADC_ConfigChannel+0x3fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fe:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001a02:	2d00      	cmp	r5, #0
 8001a04:	f000 81d7 	beq.w	8001db6 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8001a08:	fab5 f585 	clz	r5, r5
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	06ad      	lsls	r5, r5, #26
 8001a10:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001a18:	2c00      	cmp	r4, #0
 8001a1a:	f000 81d1 	beq.w	8001dc0 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8001a1e:	fab4 f484 	clz	r4, r4
 8001a22:	3401      	adds	r4, #1
 8001a24:	f004 041f 	and.w	r4, r4, #31
 8001a28:	2601      	movs	r6, #1
 8001a2a:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001a2e:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a30:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001a34:	2800      	cmp	r0, #0
 8001a36:	f000 81c1 	beq.w	8001dbc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8001a3a:	fab0 f480 	clz	r4, r0
 8001a3e:	3401      	adds	r4, #1
 8001a40:	f004 041f 	and.w	r4, r4, #31
 8001a44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001a48:	f1a4 001e 	sub.w	r0, r4, #30
 8001a4c:	0500      	lsls	r0, r0, #20
 8001a4e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a52:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a54:	0dc7      	lsrs	r7, r0, #23
 8001a56:	f007 0704 	and.w	r7, r7, #4
 8001a5a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8001a5e:	688e      	ldr	r6, [r1, #8]
 8001a60:	597c      	ldr	r4, [r7, r5]
 8001a62:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001a66:	f04f 0c07 	mov.w	ip, #7
 8001a6a:	fa0c fc00 	lsl.w	ip, ip, r0
 8001a6e:	ea24 040c 	bic.w	r4, r4, ip
 8001a72:	fa06 f000 	lsl.w	r0, r6, r0
 8001a76:	4320      	orrs	r0, r4
 8001a78:	5178      	str	r0, [r7, r5]
 8001a7a:	680c      	ldr	r4, [r1, #0]
}
 8001a7c:	e76b      	b.n	8001956 <HAL_ADC_ConfigChannel+0x62>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a7e:	6890      	ldr	r0, [r2, #8]
 8001a80:	f010 0008 	ands.w	r0, r0, #8
 8001a84:	f040 8082 	bne.w	8001b8c <HAL_ADC_ConfigChannel+0x298>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a88:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001a8a:	680e      	ldr	r6, [r1, #0]
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001a8c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001a90:	f000 80c4 	beq.w	8001c1c <HAL_ADC_ConfigChannel+0x328>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a94:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8001a98:	f00c 0c04 	and.w	ip, ip, #4
 8001a9c:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001aa0:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8001aa4:	f85c 5007 	ldr.w	r5, [ip, r7]
 8001aa8:	f04f 0e07 	mov.w	lr, #7
 8001aac:	fa0e fe06 	lsl.w	lr, lr, r6
 8001ab0:	40b4      	lsls	r4, r6
 8001ab2:	ea25 050e 	bic.w	r5, r5, lr
 8001ab6:	432c      	orrs	r4, r5
 8001ab8:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001abc:	6954      	ldr	r4, [r2, #20]
 8001abe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8001ac2:	6154      	str	r4, [r2, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ac4:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ac8:	68d6      	ldr	r6, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001aca:	f1bc 0f04 	cmp.w	ip, #4
 8001ace:	d02e      	beq.n	8001b2e <HAL_ADC_ConfigChannel+0x23a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad0:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8001ad4:	f8df e1b4 	ldr.w	lr, [pc, #436]	; 8001c8c <HAL_ADC_ConfigChannel+0x398>
 8001ad8:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8001adc:	680f      	ldr	r7, [r1, #0]
 8001ade:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ae2:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8001ae6:	694d      	ldr	r5, [r1, #20]
 8001ae8:	0076      	lsls	r6, r6, #1
 8001aea:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8001aee:	40b5      	lsls	r5, r6
 8001af0:	ea47 070e 	orr.w	r7, r7, lr
 8001af4:	433d      	orrs	r5, r7
 8001af6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001afa:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afe:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8001b00:	698e      	ldr	r6, [r1, #24]
 8001b02:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8001b06:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8001b0a:	4335      	orrs	r5, r6
 8001b0c:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b10:	690e      	ldr	r6, [r1, #16]
 8001b12:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8001b14:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8001b18:	2f01      	cmp	r7, #1
 8001b1a:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8001b1e:	bf08      	it	eq
 8001b20:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8001b24:	4328      	orrs	r0, r5
 8001b26:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8001b2a:	6808      	ldr	r0, [r1, #0]
}
 8001b2c:	e70f      	b.n	800194e <HAL_ADC_ConfigChannel+0x5a>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b2e:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b30:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001b32:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001b34:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b38:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b3c:	2d00      	cmp	r5, #0
 8001b3e:	f040 80a7 	bne.w	8001c90 <HAL_ADC_ConfigChannel+0x39c>
 8001b42:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b46:	42ac      	cmp	r4, r5
 8001b48:	f000 8119 	beq.w	8001d7e <HAL_ADC_ConfigChannel+0x48a>
 8001b4c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001b4e:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b50:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b54:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001b58:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8001b5c:	42ae      	cmp	r6, r5
 8001b5e:	f000 80fc 	beq.w	8001d5a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b62:	68a6      	ldr	r6, [r4, #8]
 8001b64:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b66:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b6a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001b6e:	42ae      	cmp	r6, r5
 8001b70:	f000 80e2 	beq.w	8001d38 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b74:	68e6      	ldr	r6, [r4, #12]
 8001b76:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b78:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b7a:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001b7e:	42b5      	cmp	r5, r6
 8001b80:	f47f aee5 	bne.w	800194e <HAL_ADC_ConfigChannel+0x5a>
  MODIFY_REG(*preg,
 8001b84:	6820      	ldr	r0, [r4, #0]
 8001b86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001b8a:	6020      	str	r0, [r4, #0]
 8001b8c:	6808      	ldr	r0, [r1, #0]
}
 8001b8e:	e6de      	b.n	800194e <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8001b90:	2002      	movs	r0, #2
}
 8001b92:	b003      	add	sp, #12
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b96:	0e80      	lsrs	r0, r0, #26
 8001b98:	1c44      	adds	r4, r0, #1
 8001b9a:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b9e:	2e09      	cmp	r6, #9
 8001ba0:	d850      	bhi.n	8001c44 <HAL_ADC_ConfigChannel+0x350>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ba2:	06a5      	lsls	r5, r4, #26
 8001ba4:	2401      	movs	r4, #1
 8001ba6:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001baa:	40b4      	lsls	r4, r6
 8001bac:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001bb0:	4325      	orrs	r5, r4
 8001bb2:	0500      	lsls	r0, r0, #20
 8001bb4:	e74d      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bb6:	482b      	ldr	r0, [pc, #172]	; (8001c64 <HAL_ADC_ConfigChannel+0x370>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bb8:	4a30      	ldr	r2, [pc, #192]	; (8001c7c <HAL_ADC_ConfigChannel+0x388>)
 8001bba:	6881      	ldr	r1, [r0, #8]
 8001bbc:	4c30      	ldr	r4, [pc, #192]	; (8001c80 <HAL_ADC_ConfigChannel+0x38c>)
 8001bbe:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001bc2:	430e      	orrs	r6, r1
 8001bc4:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8001bc8:	6086      	str	r6, [r0, #8]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	0992      	lsrs	r2, r2, #6
 8001bce:	fba4 1202 	umull	r1, r2, r4, r2
 8001bd2:	0992      	lsrs	r2, r2, #6
 8001bd4:	3201      	adds	r2, #1
 8001bd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001bda:	0092      	lsls	r2, r2, #2
 8001bdc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001bde:	9a01      	ldr	r2, [sp, #4]
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	f43f aee6 	beq.w	80019b2 <HAL_ADC_ConfigChannel+0xbe>
            wait_loop_index--;
 8001be6:	9a01      	ldr	r2, [sp, #4]
 8001be8:	3a01      	subs	r2, #1
 8001bea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001bec:	9a01      	ldr	r2, [sp, #4]
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x2f2>
 8001bf2:	e6de      	b.n	80019b2 <HAL_ADC_ConfigChannel+0xbe>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bf4:	4d23      	ldr	r5, [pc, #140]	; (8001c84 <HAL_ADC_ConfigChannel+0x390>)
 8001bf6:	42ac      	cmp	r4, r5
 8001bf8:	f47f aedb 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0xbe>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bfc:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8001c00:	f47f aed7 	bne.w	80019b2 <HAL_ADC_ConfigChannel+0xbe>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001c04:	4c1b      	ldr	r4, [pc, #108]	; (8001c74 <HAL_ADC_ConfigChannel+0x380>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	f43f aed3 	beq.w	80019b2 <HAL_ADC_ConfigChannel+0xbe>
 8001c0c:	688a      	ldr	r2, [r1, #8]
 8001c0e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8001c12:	4332      	orrs	r2, r6
 8001c14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c18:	608a      	str	r2, [r1, #8]
}
 8001c1a:	e6bf      	b.n	800199c <HAL_ADC_ConfigChannel+0xa8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c1c:	0df5      	lsrs	r5, r6, #23
 8001c1e:	f102 0414 	add.w	r4, r2, #20
 8001c22:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8001c26:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8001c2a:	592f      	ldr	r7, [r5, r4]
 8001c2c:	f04f 0c07 	mov.w	ip, #7
 8001c30:	fa0c f606 	lsl.w	r6, ip, r6
 8001c34:	ea27 0606 	bic.w	r6, r7, r6
 8001c38:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c3a:	6954      	ldr	r4, [r2, #20]
 8001c3c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001c40:	6154      	str	r4, [r2, #20]
}
 8001c42:	e73f      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x1d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c44:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8001c48:	06a5      	lsls	r5, r4, #26
 8001c4a:	381e      	subs	r0, #30
 8001c4c:	2401      	movs	r4, #1
 8001c4e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8001c52:	fa04 f606 	lsl.w	r6, r4, r6
 8001c56:	0500      	lsls	r0, r0, #20
 8001c58:	4335      	orrs	r5, r6
 8001c5a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8001c5e:	e6f8      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15e>
 8001c60:	80080000 	.word	0x80080000
 8001c64:	50000300 	.word	0x50000300
 8001c68:	c3210000 	.word	0xc3210000
 8001c6c:	90c00010 	.word	0x90c00010
 8001c70:	c7520000 	.word	0xc7520000
 8001c74:	50000100 	.word	0x50000100
 8001c78:	0007ffff 	.word	0x0007ffff
 8001c7c:	20000804 	.word	0x20000804
 8001c80:	053e2d63 	.word	0x053e2d63
 8001c84:	cb840000 	.word	0xcb840000
 8001c88:	407f0000 	.word	0x407f0000
 8001c8c:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001c94:	b11d      	cbz	r5, 8001c9e <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8001c96:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c9a:	42ac      	cmp	r4, r5
 8001c9c:	d06f      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x48a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c9e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001ca0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ca2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ca6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001caa:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001cb2:	b11d      	cbz	r5, 8001cbc <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8001cb4:	fab5 f585 	clz	r5, r5
 8001cb8:	42ae      	cmp	r6, r5
 8001cba:	d04e      	beq.n	8001d5a <HAL_ADC_ConfigChannel+0x466>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cbc:	68a5      	ldr	r5, [r4, #8]
 8001cbe:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc0:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cc4:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001ccc:	b11d      	cbz	r5, 8001cd6 <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8001cce:	fab5 f585 	clz	r5, r5
 8001cd2:	42ae      	cmp	r6, r5
 8001cd4:	d030      	beq.n	8001d38 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001cd6:	68e5      	ldr	r5, [r4, #12]
 8001cd8:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cda:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cdc:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001ce4:	2d00      	cmp	r5, #0
 8001ce6:	f43f ae32 	beq.w	800194e <HAL_ADC_ConfigChannel+0x5a>
  return __builtin_clz(value);
 8001cea:	fab5 f585 	clz	r5, r5
 8001cee:	e746      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x28a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001cf4:	2d00      	cmp	r5, #0
 8001cf6:	d058      	beq.n	8001daa <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8001cf8:	fab5 f585 	clz	r5, r5
 8001cfc:	3501      	adds	r5, #1
 8001cfe:	06ad      	lsls	r5, r5, #26
 8001d00:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001d08:	2c00      	cmp	r4, #0
 8001d0a:	d04c      	beq.n	8001da6 <HAL_ADC_ConfigChannel+0x4b2>
  return __builtin_clz(value);
 8001d0c:	fab4 f484 	clz	r4, r4
 8001d10:	3401      	adds	r4, #1
 8001d12:	f004 041f 	and.w	r4, r4, #31
 8001d16:	2601      	movs	r6, #1
 8001d18:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d1c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d044      	beq.n	8001db0 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8001d26:	fab0 f480 	clz	r4, r0
 8001d2a:	3401      	adds	r4, #1
 8001d2c:	f004 041f 	and.w	r4, r4, #31
 8001d30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001d34:	0520      	lsls	r0, r4, #20
 8001d36:	e68c      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15e>
  MODIFY_REG(*preg,
 8001d38:	6838      	ldr	r0, [r7, #0]
 8001d3a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d3e:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d40:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d42:	68e5      	ldr	r5, [r4, #12]
 8001d44:	68e6      	ldr	r6, [r4, #12]
 8001d46:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d4a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d4e:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	d1c5      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x3ec>
 8001d54:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001d58:	e711      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x28a>
  MODIFY_REG(*preg,
 8001d5a:	6838      	ldr	r0, [r7, #0]
 8001d5c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d60:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d62:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d64:	68a5      	ldr	r5, [r4, #8]
 8001d66:	68a6      	ldr	r6, [r4, #8]
 8001d68:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d6c:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d70:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d74:	2d00      	cmp	r5, #0
 8001d76:	d1a7      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x3d4>
 8001d78:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001d7c:	e6f7      	b.n	8001b6e <HAL_ADC_ConfigChannel+0x27a>
  MODIFY_REG(*preg,
 8001d7e:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001d80:	4614      	mov	r4, r2
 8001d82:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d86:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d8a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d8c:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8001d8e:	6e56      	ldr	r6, [r2, #100]	; 0x64
 8001d90:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d94:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d98:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d9c:	2d00      	cmp	r5, #0
 8001d9e:	d186      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x3ba>
 8001da0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8001da4:	e6da      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x268>
 8001da6:	2402      	movs	r4, #2
 8001da8:	e7b8      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x428>
 8001daa:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001dae:	e7a9      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x410>
 8001db0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8001db4:	e64d      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15e>
 8001db6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001dba:	e62b      	b.n	8001a14 <HAL_ADC_ConfigChannel+0x120>
 8001dbc:	4801      	ldr	r0, [pc, #4]	; (8001dc4 <HAL_ADC_ConfigChannel+0x4d0>)
 8001dbe:	e648      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15e>
 8001dc0:	2402      	movs	r4, #2
 8001dc2:	e634      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x13a>
 8001dc4:	fe500000 	.word	0xfe500000

08001dc8 <ADC_Enable>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8001dcc:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dce:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8001dd0:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd2:	689a      	ldr	r2, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	07d2      	lsls	r2, r2, #31
 8001dd6:	d42c      	bmi.n	8001e32 <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	4a28      	ldr	r2, [pc, #160]	; (8001e7c <ADC_Enable+0xb4>)
 8001ddc:	4211      	tst	r1, r2
 8001dde:	4604      	mov	r4, r0
 8001de0:	d12a      	bne.n	8001e38 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8001de2:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001de4:	4926      	ldr	r1, [pc, #152]	; (8001e80 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 8001de6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dea:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001df4:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	d429      	bmi.n	8001e4e <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 8001dfa:	f7ff fc23 	bl	8001644 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8001e04:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e06:	d414      	bmi.n	8001e32 <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8001e08:	4e1e      	ldr	r6, [pc, #120]	; (8001e84 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e0a:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0c:	07d0      	lsls	r0, r2, #31
 8001e0e:	d404      	bmi.n	8001e1a <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4032      	ands	r2, r6
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e1a:	f7ff fc13 	bl	8001644 <HAL_GetTick>
 8001e1e:	1b43      	subs	r3, r0, r5
 8001e20:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e22:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e24:	d902      	bls.n	8001e2c <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	07d1      	lsls	r1, r2, #31
 8001e2a:	d505      	bpl.n	8001e38 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	07d2      	lsls	r2, r2, #31
 8001e30:	d5eb      	bpl.n	8001e0a <ADC_Enable+0x42>
  return HAL_OK;
 8001e32:	2000      	movs	r0, #0
}
 8001e34:	b002      	add	sp, #8
 8001e36:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e38:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	6e23      	ldr	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8001e42:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6623      	str	r3, [r4, #96]	; 0x60
}
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <ADC_Enable+0xc0>)
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <ADC_Enable+0xc4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	099b      	lsrs	r3, r3, #6
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	099b      	lsrs	r3, r3, #6
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0c6      	beq.n	8001dfa <ADC_Enable+0x32>
        wait_loop_index--;
 8001e6c:	9b01      	ldr	r3, [sp, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <ADC_Enable+0xa4>
 8001e78:	e7bf      	b.n	8001dfa <ADC_Enable+0x32>
 8001e7a:	bf00      	nop
 8001e7c:	8000003f 	.word	0x8000003f
 8001e80:	50000300 	.word	0x50000300
 8001e84:	7fffffc0 	.word	0x7fffffc0
 8001e88:	20000804 	.word	0x20000804
 8001e8c:	053e2d63 	.word	0x053e2d63

08001e90 <HAL_ADC_Start_DMA>:
{
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e94:	6803      	ldr	r3, [r0, #0]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e96:	4d37      	ldr	r5, [pc, #220]	; (8001f74 <HAL_ADC_Start_DMA+0xe4>)
 8001e98:	f8d5 8008 	ldr.w	r8, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e9c:	689d      	ldr	r5, [r3, #8]
 8001e9e:	076b      	lsls	r3, r5, #29
 8001ea0:	d412      	bmi.n	8001ec8 <HAL_ADC_Start_DMA+0x38>
    __HAL_LOCK(hadc);
 8001ea2:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	d00d      	beq.n	8001ec8 <HAL_ADC_Start_DMA+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001eac:	f008 081f 	and.w	r8, r8, #31
 8001eb0:	2301      	movs	r3, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001eb2:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 8001eb6:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001eba:	d908      	bls.n	8001ece <HAL_ADC_Start_DMA+0x3e>
      __HAL_UNLOCK(hadc);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
}
 8001ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmp_hal_status = HAL_BUSY;
 8001ec8:	2002      	movs	r0, #2
}
 8001eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001ece:	f240 2321 	movw	r3, #545	; 0x221
 8001ed2:	fa23 f308 	lsr.w	r3, r3, r8
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	f013 0501 	ands.w	r5, r3, #1
 8001edc:	d1ee      	bne.n	8001ebc <HAL_ADC_Start_DMA+0x2c>
      tmp_hal_status = ADC_Enable(hadc);
 8001ede:	460f      	mov	r7, r1
 8001ee0:	4616      	mov	r6, r2
 8001ee2:	f7ff ff71 	bl	8001dc8 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d13b      	bne.n	8001f62 <HAL_ADC_Start_DMA+0xd2>
        ADC_STATE_CLR_SET(hadc->State,
 8001eea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eec:	6821      	ldr	r1, [r4, #0]
 8001eee:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <HAL_ADC_Start_DMA+0xe8>)
        ADC_STATE_CLR_SET(hadc->State,
 8001ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001efc:	4291      	cmp	r1, r2
        ADC_STATE_CLR_SET(hadc->State,
 8001efe:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f00:	d033      	beq.n	8001f6a <HAL_ADC_Start_DMA+0xda>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f02:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001f04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f08:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <HAL_ADC_Start_DMA+0xec>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f10:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f14:	bf1c      	itt	ne
 8001f16:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8001f18:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8001f1c:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_ADC_Start_DMA+0xf0>)
 8001f20:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_ADC_Start_DMA+0xf4>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f24:	6302      	str	r2, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f26:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f28:	221c      	movs	r2, #28
        __HAL_UNLOCK(hadc);
 8001f2a:	2300      	movs	r3, #0
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f2c:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hadc);
 8001f2e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f32:	684b      	ldr	r3, [r1, #4]
 8001f34:	f043 0310 	orr.w	r3, r3, #16
 8001f38:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f3a:	68cd      	ldr	r5, [r1, #12]
 8001f3c:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f40:	4633      	mov	r3, r6
 8001f42:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f44:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f46:	3140      	adds	r1, #64	; 0x40
 8001f48:	f000 fb84 	bl	8002654 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f4c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001f4e:	6893      	ldr	r3, [r2, #8]
 8001f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6093      	str	r3, [r2, #8]
}
 8001f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8001f62:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
}
 8001f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f6a:	f1b8 0f00 	cmp.w	r8, #0
 8001f6e:	d0c8      	beq.n	8001f02 <HAL_ADC_Start_DMA+0x72>
 8001f70:	e7cb      	b.n	8001f0a <HAL_ADC_Start_DMA+0x7a>
 8001f72:	bf00      	nop
 8001f74:	50000300 	.word	0x50000300
 8001f78:	50000100 	.word	0x50000100
 8001f7c:	0800185d 	.word	0x0800185d
 8001f80:	0800186d 	.word	0x0800186d
 8001f84:	080018d9 	.word	0x080018d9

08001f88 <ADC_Disable>:
{
 8001f88:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f8a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	0795      	lsls	r5, r2, #30
 8001f90:	d502      	bpl.n	8001f98 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f92:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f9a:	07d4      	lsls	r4, r2, #31
 8001f9c:	d52c      	bpl.n	8001ff8 <ADC_Disable+0x70>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	f002 020d 	and.w	r2, r2, #13
 8001fa4:	2a01      	cmp	r2, #1
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	d009      	beq.n	8001fbe <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001faa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fac:	f043 0310 	orr.w	r3, r3, #16
 8001fb0:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8001fba:	2001      	movs	r0, #1
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001fc8:	2103      	movs	r1, #3
 8001fca:	f042 0202 	orr.w	r2, r2, #2
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8001fd2:	f7ff fb37 	bl	8001644 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8001fdc:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fde:	d50b      	bpl.n	8001ff8 <ADC_Disable+0x70>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fe0:	f7ff fb30 	bl	8001644 <HAL_GetTick>
 8001fe4:	1b40      	subs	r0, r0, r5
 8001fe6:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fe8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001fea:	d902      	bls.n	8001ff2 <ADC_Disable+0x6a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	07d2      	lsls	r2, r2, #31
 8001ff0:	d4db      	bmi.n	8001faa <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	07db      	lsls	r3, r3, #31
 8001ff6:	d4f3      	bmi.n	8001fe0 <ADC_Disable+0x58>
  return HAL_OK;
 8001ff8:	2000      	movs	r0, #0
}
 8001ffa:	bd38      	pop	{r3, r4, r5, pc}

08001ffc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8001ffc:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8002002:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002004:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002006:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002008:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800200a:	d03f      	beq.n	800208c <HAL_ADCEx_Calibration_Start+0x90>
 800200c:	2301      	movs	r3, #1
 800200e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002012:	4604      	mov	r4, r0
 8002014:	460d      	mov	r5, r1
 8002016:	f7ff ffb7 	bl	8001f88 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (tmp_hal_status == HAL_OK)
 800201c:	b9e8      	cbnz	r0, 800205a <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002022:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002026:	6822      	ldr	r2, [r4, #0]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002028:	491a      	ldr	r1, [pc, #104]	; (8002094 <HAL_ADCEx_Calibration_Start+0x98>)
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8002030:	6893      	ldr	r3, [r2, #8]
 8002032:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002036:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 800203a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800203e:	432b      	orrs	r3, r5
 8002040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002044:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002046:	6893      	ldr	r3, [r2, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	db0e      	blt.n	800206a <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002058:	e002      	b.n	8002060 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	f043 0310 	orr.w	r3, r3, #16
 800205e:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002060:	2300      	movs	r3, #0
 8002062:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002066:	b003      	add	sp, #12
 8002068:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800206a:	9b01      	ldr	r3, [sp, #4]
 800206c:	3301      	adds	r3, #1
 800206e:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002070:	9b01      	ldr	r3, [sp, #4]
 8002072:	428b      	cmp	r3, r1
 8002074:	d9e7      	bls.n	8002046 <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 8002076:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002078:	f023 0312 	bic.w	r3, r3, #18
 800207c:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8002080:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8002082:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8002084:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e7ec      	b.n	8002066 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 800208c:	2002      	movs	r0, #2
}
 800208e:	b003      	add	sp, #12
 8002090:	bd30      	pop	{r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	0004de01 	.word	0x0004de01

08002098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002098:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800209a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800209e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80020a0:	2a01      	cmp	r2, #1
{
 80020a2:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 80020a4:	d04f      	beq.n	8002146 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020a6:	6804      	ldr	r4, [r0, #0]
 80020a8:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020aa:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80020ac:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020ae:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80020b2:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80020b4:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80020b8:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80020ba:	d008      	beq.n	80020ce <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020c2:	f041 0120 	orr.w	r1, r1, #32
 80020c6:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80020c8:	b01c      	add	sp, #112	; 0x70
 80020ca:	bcf0      	pop	{r4, r5, r6, r7}
 80020cc:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ce:	4a23      	ldr	r2, [pc, #140]	; (800215c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80020d0:	6890      	ldr	r0, [r2, #8]
 80020d2:	0740      	lsls	r0, r0, #29
 80020d4:	d50b      	bpl.n	80020ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80020d6:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 80020e8:	b01c      	add	sp, #112	; 0x70
 80020ea:	bcf0      	pop	{r4, r5, r6, r7}
 80020ec:	4770      	bx	lr
 80020ee:	68a0      	ldr	r0, [r4, #8]
 80020f0:	0746      	lsls	r6, r0, #29
 80020f2:	d4f1      	bmi.n	80020d8 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020f4:	b1d5      	cbz	r5, 800212c <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020f6:	4e1a      	ldr	r6, [pc, #104]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80020f8:	684f      	ldr	r7, [r1, #4]
 80020fa:	68b0      	ldr	r0, [r6, #8]
 80020fc:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 8002100:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8002104:	4338      	orrs	r0, r7
 8002106:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 800210a:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800210c:	68a4      	ldr	r4, [r4, #8]
 800210e:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002110:	4320      	orrs	r0, r4
 8002112:	f010 0001 	ands.w	r0, r0, #1
 8002116:	d114      	bne.n	8002142 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 8002118:	68b4      	ldr	r4, [r6, #8]
 800211a:	688a      	ldr	r2, [r1, #8]
 800211c:	f424 6171 	bic.w	r1, r4, #3856	; 0xf10
 8002120:	4315      	orrs	r5, r2
 8002122:	f021 010f 	bic.w	r1, r1, #15
 8002126:	430d      	orrs	r5, r1
 8002128:	60b5      	str	r5, [r6, #8]
 800212a:	e7da      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800212c:	4d0c      	ldr	r5, [pc, #48]	; (8002160 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 800212e:	68a9      	ldr	r1, [r5, #8]
 8002130:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8002134:	60a9      	str	r1, [r5, #8]
 8002136:	68a1      	ldr	r1, [r4, #8]
 8002138:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800213a:	4308      	orrs	r0, r1
 800213c:	f010 0001 	ands.w	r0, r0, #1
 8002140:	d005      	beq.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002142:	2000      	movs	r0, #0
 8002144:	e7cd      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 8002146:	2002      	movs	r0, #2
}
 8002148:	b01c      	add	sp, #112	; 0x70
 800214a:	bcf0      	pop	{r4, r5, r6, r7}
 800214c:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800214e:	68aa      	ldr	r2, [r5, #8]
 8002150:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8002154:	f022 020f 	bic.w	r2, r2, #15
 8002158:	60aa      	str	r2, [r5, #8]
 800215a:	e7c2      	b.n	80020e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800215c:	50000100 	.word	0x50000100
 8002160:	50000300 	.word	0x50000300

08002164 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4908      	ldr	r1, [pc, #32]	; (8002188 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8002166:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216a:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216c:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8002170:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002172:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002180:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_NVIC_SetPriority+0x68>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002196:	f1c3 0507 	rsb	r5, r3, #7
 800219a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	bf28      	it	cs
 80021a2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a4:	2c06      	cmp	r4, #6
 80021a6:	d919      	bls.n	80021dc <HAL_NVIC_SetPriority+0x50>
 80021a8:	3b03      	subs	r3, #3
 80021aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021ae:	409c      	lsls	r4, r3
 80021b0:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021b8:	40ac      	lsls	r4, r5
 80021ba:	ea21 0104 	bic.w	r1, r1, r4
 80021be:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80021c0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80021c6:	db0c      	blt.n	80021e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80021cc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80021d0:	0109      	lsls	r1, r1, #4
 80021d2:	b2c9      	uxtb	r1, r1
 80021d4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80021d8:	bc30      	pop	{r4, r5}
 80021da:	4770      	bx	lr
 80021dc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021de:	4613      	mov	r3, r2
 80021e0:	e7e8      	b.n	80021b4 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_NVIC_SetPriority+0x6c>)
 80021e4:	f000 000f 	and.w	r0, r0, #15
 80021e8:	0109      	lsls	r1, r1, #4
 80021ea:	4403      	add	r3, r0
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	7619      	strb	r1, [r3, #24]
 80021f0:	bc30      	pop	{r4, r5}
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00
 80021f8:	e000ecfc 	.word	0xe000ecfc

080021fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80021fc:	2800      	cmp	r0, #0
 80021fe:	db07      	blt.n	8002210 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_NVIC_EnableIRQ+0x18>)
 8002202:	f000 011f 	and.w	r1, r0, #31
 8002206:	2301      	movs	r3, #1
 8002208:	0940      	lsrs	r0, r0, #5
 800220a:	408b      	lsls	r3, r1
 800220c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	3801      	subs	r0, #1
 800221a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800221e:	d20e      	bcs.n	800223e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002222:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	4c08      	ldr	r4, [pc, #32]	; (8002248 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002228:	20f0      	movs	r0, #240	; 0xf0
 800222a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002230:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002232:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002234:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8002236:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223a:	6019      	str	r1, [r3, #0]
 800223c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2001      	movs	r0, #1
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800224c:	b188      	cbz	r0, 8002272 <HAL_DAC_Init+0x26>
{
 800224e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002250:	7903      	ldrb	r3, [r0, #4]
 8002252:	4604      	mov	r4, r0
 8002254:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002258:	b13b      	cbz	r3, 800226a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800225a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800225c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800225e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8002260:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002262:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002264:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8002266:	4618      	mov	r0, r3
}
 8002268:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800226a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800226c:	f7fe fee2 	bl	8001034 <HAL_DAC_MspInit>
 8002270:	e7f3      	b.n	800225a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8002272:	2001      	movs	r0, #1
}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop

08002278 <HAL_DAC_Start>:
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002278:	2800      	cmp	r0, #0
 800227a:	d03e      	beq.n	80022fa <HAL_DAC_Start+0x82>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800227c:	7943      	ldrb	r3, [r0, #5]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d03d      	beq.n	80022fe <HAL_DAC_Start+0x86>
  __HAL_DAC_ENABLE(hdac, Channel);
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_DAC_Start+0x8c>)
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <HAL_DAC_Start+0x90>)
 8002286:	681b      	ldr	r3, [r3, #0]
{
 8002288:	b470      	push	{r4, r5, r6}
  __HAL_DAC_ENABLE(hdac, Channel);
 800228a:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 800228c:	2502      	movs	r5, #2
 800228e:	7105      	strb	r5, [r0, #4]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002290:	099b      	lsrs	r3, r3, #6
  __HAL_DAC_ENABLE(hdac, Channel);
 8002292:	6826      	ldr	r6, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8002298:	f001 0510 	and.w	r5, r1, #16
 800229c:	2201      	movs	r2, #1
{
 800229e:	b083      	sub	sp, #12
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a0:	099b      	lsrs	r3, r3, #6
  __HAL_DAC_ENABLE(hdac, Channel);
 80022a2:	40aa      	lsls	r2, r5
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a4:	3301      	adds	r3, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 80022a6:	4332      	orrs	r2, r6
 80022a8:	6022      	str	r2, [r4, #0]
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022aa:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 80022ac:	9b01      	ldr	r3, [sp, #4]
 80022ae:	b12b      	cbz	r3, 80022bc <HAL_DAC_Start+0x44>
  {
    wait_loop_index--;
 80022b0:	9b01      	ldr	r3, [sp, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
  while (wait_loop_index != 0UL)
 80022b6:	9b01      	ldr	r3, [sp, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f9      	bne.n	80022b0 <HAL_DAC_Start+0x38>
  }

  if (Channel == DAC_CHANNEL_1)
 80022bc:	b981      	cbnz	r1, 80022e0 <HAL_DAC_Start+0x68>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d103      	bne.n	80022d0 <HAL_DAC_Start+0x58>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80022c8:	6863      	ldr	r3, [r4, #4]
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6063      	str	r3, [r4, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022d0:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 80022d2:	2201      	movs	r2, #1
 80022d4:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 80022d6:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 80022d8:	4618      	mov	r0, r3
}
 80022da:	b003      	add	sp, #12
 80022dc:	bc70      	pop	{r4, r5, r6}
 80022de:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022e0:	6822      	ldr	r2, [r4, #0]
 80022e2:	2302      	movs	r3, #2
 80022e4:	f402 1278 	and.w	r2, r2, #4063232	; 0x3e0000
 80022e8:	fa03 f505 	lsl.w	r5, r3, r5
 80022ec:	42aa      	cmp	r2, r5
 80022ee:	d1ef      	bne.n	80022d0 <HAL_DAC_Start+0x58>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022f0:	6863      	ldr	r3, [r4, #4]
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6063      	str	r3, [r4, #4]
 80022f8:	e7ea      	b.n	80022d0 <HAL_DAC_Start+0x58>
    return HAL_ERROR;
 80022fa:	2001      	movs	r0, #1
 80022fc:	4770      	bx	lr
  __HAL_LOCK(hdac);
 80022fe:	2002      	movs	r0, #2
}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000804 	.word	0x20000804
 8002308:	053e2d63 	.word	0x053e2d63

0800230c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800230c:	b410      	push	{r4}
 800230e:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8002310:	2400      	movs	r4, #0
 8002312:	9401      	str	r4, [sp, #4]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002314:	b198      	cbz	r0, 800233e <HAL_DAC_SetValue+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002316:	6800      	ldr	r0, [r0, #0]
 8002318:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800231a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 800231c:	b151      	cbz	r1, 8002334 <HAL_DAC_SetValue+0x28>
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800231e:	9901      	ldr	r1, [sp, #4]
 8002320:	3114      	adds	r1, #20
 8002322:	440a      	add	r2, r1
 8002324:	9201      	str	r2, [sp, #4]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002326:	9a01      	ldr	r2, [sp, #4]

  /* Return function status */
  return HAL_OK;
 8002328:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	b003      	add	sp, #12
 800232e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002332:	4770      	bx	lr
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002334:	9901      	ldr	r1, [sp, #4]
 8002336:	3108      	adds	r1, #8
 8002338:	440a      	add	r2, r1
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	e7f3      	b.n	8002326 <HAL_DAC_SetValue+0x1a>
    return HAL_ERROR;
 800233e:	2001      	movs	r0, #1
}
 8002340:	b003      	add	sp, #12
 8002342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 80c8 	beq.w	80024de <HAL_DAC_ConfigChannel+0x196>
{
 800234e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002352:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8002354:	2900      	cmp	r1, #0
 8002356:	f000 80c4 	beq.w	80024e2 <HAL_DAC_ConfigChannel+0x19a>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800235a:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 800235c:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 800235e:	2b01      	cmp	r3, #1
 8002360:	4606      	mov	r6, r0
 8002362:	f000 80ca 	beq.w	80024fa <HAL_DAC_ConfigChannel+0x1b2>
 8002366:	4614      	mov	r4, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002368:	2302      	movs	r3, #2
  __HAL_LOCK(hdac);
 800236a:	2201      	movs	r2, #1

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800236c:	2f04      	cmp	r7, #4
  __HAL_LOCK(hdac);
 800236e:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002370:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002372:	d077      	beq.n	8002464 <HAL_DAC_ConfigChannel+0x11c>
 8002374:	6803      	ldr	r3, [r0, #0]
 8002376:	f004 0410 	and.w	r4, r4, #16
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800237a:	69ea      	ldr	r2, [r5, #28]
 800237c:	2a01      	cmp	r2, #1
 800237e:	d108      	bne.n	8002392 <HAL_DAC_ConfigChannel+0x4a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002380:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002382:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002384:	201f      	movs	r0, #31
 8002386:	40a0      	lsls	r0, r4
 8002388:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800238c:	40a2      	lsls	r2, r4
 800238e:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002392:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 8002394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002396:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800239a:	f04f 0807 	mov.w	r8, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800239e:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023a0:	fa08 f004 	lsl.w	r0, r8, r4
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80023a4:	f000 8099 	beq.w	80024da <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = 0x00000000UL;
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80023a8:	2902      	cmp	r1, #2
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023aa:	bf16      	itet	ne
 80023ac:	fabc f18c 	clzne	r1, ip
    connectOnChip = DAC_MCR_MODE1_0;
 80023b0:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80023b2:	0949      	lsrne	r1, r1, #5
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80023b4:	f44f 7880 	mov.w	r8, #256	; 0x100
 80023b8:	fa08 f804 	lsl.w	r8, r8, r4
 80023bc:	ea48 0800 	orr.w	r8, r8, r0
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023c0:	ea41 010c 	orr.w	r1, r1, ip
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80023c4:	ea22 0808 	bic.w	r8, r2, r8
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80023c8:	f895 c004 	ldrb.w	ip, [r5, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80023cc:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80023d0:	430f      	orrs	r7, r1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80023d2:	40a2      	lsls	r2, r4
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80023d4:	7969      	ldrb	r1, [r5, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80023d6:	f1bc 0f01 	cmp.w	ip, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80023da:	ea28 0802 	bic.w	r8, r8, r2
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80023de:	682a      	ldr	r2, [r5, #0]
 80023e0:	bf08      	it	eq
 80023e2:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80023e6:	2901      	cmp	r1, #1
 80023e8:	bf08      	it	eq
 80023ea:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80023ee:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80023f0:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80023f4:	d078      	beq.n	80024e8 <HAL_DAC_ConfigChannel+0x1a0>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80023f6:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023fa:	40a7      	lsls	r7, r4
 80023fc:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002400:	63df      	str	r7, [r3, #60]	; 0x3c
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002402:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 800240c:	40a5      	lsls	r5, r4
 800240e:	ea20 0005 	bic.w	r0, r0, r5
 8002412:	6018      	str	r0, [r3, #0]
  tmpreg1 = hdac->Instance->CR;
 8002414:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002416:	f640 75fe 	movw	r5, #4094	; 0xffe
 800241a:	40a5      	lsls	r5, r4
 800241c:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002420:	fa01 f004 	lsl.w	r0, r1, r4
 8002424:	4328      	orrs	r0, r5
  hdac->Instance->CR = tmpreg1;
 8002426:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	25c0      	movs	r5, #192	; 0xc0
 800242c:	40a5      	lsls	r5, r4
 800242e:	ea20 0005 	bic.w	r0, r0, r5
 8002432:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002434:	0192      	lsls	r2, r2, #6
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002436:	6e18      	ldr	r0, [r3, #96]	; 0x60
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002438:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800243c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002440:	f640 750f 	movw	r5, #3855	; 0xf0f
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002444:	430a      	orrs	r2, r1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002446:	fa05 f104 	lsl.w	r1, r5, r4
 800244a:	fa02 f404 	lsl.w	r4, r2, r4
 800244e:	ea20 0201 	bic.w	r2, r0, r1
 8002452:	4314      	orrs	r4, r2
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002454:	2101      	movs	r1, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002456:	2200      	movs	r2, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002458:	661c      	str	r4, [r3, #96]	; 0x60

  /* Return function status */
  return status;
 800245a:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 800245c:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 800245e:	7172      	strb	r2, [r6, #5]
}
 8002460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8002464:	f7ff f8ee 	bl	8001644 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002468:	6833      	ldr	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800246a:	4607      	mov	r7, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800246c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (Channel == DAC_CHANNEL_1)
 800246e:	b154      	cbz	r4, 8002486 <HAL_DAC_ConfigChannel+0x13e>
 8002470:	e018      	b.n	80024a4 <HAL_DAC_ConfigChannel+0x15c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002472:	f7ff f8e7 	bl	8001644 <HAL_GetTick>
 8002476:	1bc3      	subs	r3, r0, r7
 8002478:	2b01      	cmp	r3, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800247a:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800247c:	d902      	bls.n	8002484 <HAL_DAC_ConfigChannel+0x13c>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800247e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002480:	0411      	lsls	r1, r2, #16
 8002482:	d443      	bmi.n	800250c <HAL_DAC_ConfigChannel+0x1c4>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002486:	0412      	lsls	r2, r2, #16
 8002488:	d4f3      	bmi.n	8002472 <HAL_DAC_ConfigChannel+0x12a>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800248a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
 800248e:	e00d      	b.n	80024ac <HAL_DAC_ConfigChannel+0x164>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002490:	f7ff f8d8 	bl	8001644 <HAL_GetTick>
 8002494:	1bc3      	subs	r3, r0, r7
 8002496:	2b01      	cmp	r3, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002498:	6833      	ldr	r3, [r6, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800249a:	d902      	bls.n	80024a2 <HAL_DAC_ConfigChannel+0x15a>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	2a00      	cmp	r2, #0
 80024a0:	db34      	blt.n	800250c <HAL_DAC_ConfigChannel+0x1c4>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a4:	2a00      	cmp	r2, #0
 80024a6:	dbf3      	blt.n	8002490 <HAL_DAC_ConfigChannel+0x148>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80024a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80024ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024ae:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80024b0:	68af      	ldr	r7, [r5, #8]
 80024b2:	f004 0410 	and.w	r4, r4, #16
 80024b6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80024ba:	40a0      	lsls	r0, r4
 80024bc:	ea22 0200 	bic.w	r2, r2, r0
 80024c0:	40a1      	lsls	r1, r4
 80024c2:	430a      	orrs	r2, r1
 80024c4:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80024c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024c8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80024ca:	20ff      	movs	r0, #255	; 0xff
 80024cc:	40a0      	lsls	r0, r4
 80024ce:	ea22 0200 	bic.w	r2, r2, r0
 80024d2:	40a1      	lsls	r1, r4
 80024d4:	430a      	orrs	r2, r1
 80024d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80024d8:	e74f      	b.n	800237a <HAL_DAC_ConfigChannel+0x32>
    connectOnChip = 0x00000000UL;
 80024da:	2100      	movs	r1, #0
 80024dc:	e76a      	b.n	80023b4 <HAL_DAC_ConfigChannel+0x6c>
    return HAL_ERROR;
 80024de:	2001      	movs	r0, #1
}
 80024e0:	4770      	bx	lr
    return HAL_ERROR;
 80024e2:	2001      	movs	r0, #1
}
 80024e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80024e8:	f000 fe30 	bl	800314c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_DAC_ConfigChannel+0x1d4>)
 80024ee:	4298      	cmp	r0, r3
 80024f0:	d905      	bls.n	80024fe <HAL_DAC_ConfigChannel+0x1b6>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80024f2:	6833      	ldr	r3, [r6, #0]
 80024f4:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 80024f8:	e77f      	b.n	80023fa <HAL_DAC_ConfigChannel+0xb2>
  __HAL_LOCK(hdac);
 80024fa:	2002      	movs	r0, #2
 80024fc:	e7b0      	b.n	8002460 <HAL_DAC_ConfigChannel+0x118>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024fe:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_DAC_ConfigChannel+0x1d8>)
 8002500:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002502:	bf88      	it	hi
 8002504:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
 8002508:	6833      	ldr	r3, [r6, #0]
 800250a:	e776      	b.n	80023fa <HAL_DAC_ConfigChannel+0xb2>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800250c:	6933      	ldr	r3, [r6, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800250e:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	6133      	str	r3, [r6, #16]
            return HAL_TIMEOUT;
 8002516:	4610      	mov	r0, r2
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002518:	7132      	strb	r2, [r6, #4]
            return HAL_TIMEOUT;
 800251a:	e7a1      	b.n	8002460 <HAL_DAC_ConfigChannel+0x118>
 800251c:	09896800 	.word	0x09896800
 8002520:	04c4b400 	.word	0x04c4b400

08002524 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002524:	2800      	cmp	r0, #0
 8002526:	d07d      	beq.n	8002624 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_DMA_Init+0x104>)
 800252a:	4603      	mov	r3, r0
 800252c:	6800      	ldr	r0, [r0, #0]
 800252e:	4290      	cmp	r0, r2
{
 8002530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002534:	d962      	bls.n	80025fc <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002536:	493d      	ldr	r1, [pc, #244]	; (800262c <HAL_DMA_Init+0x108>)
 8002538:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 800253a:	4c3e      	ldr	r4, [pc, #248]	; (8002634 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800253c:	4401      	add	r1, r0
 800253e:	fba2 2101 	umull	r2, r1, r2, r1
 8002542:	0909      	lsrs	r1, r1, #4
 8002544:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002546:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	691e      	ldr	r6, [r3, #16]
 800254c:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 800254e:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002552:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002554:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 800264c <HAL_DMA_Init+0x128>
 8002558:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002628 <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255c:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 800255e:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 8002564:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002568:	4c31      	ldr	r4, [pc, #196]	; (8002630 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 800256a:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	69de      	ldr	r6, [r3, #28]
 8002570:	6459      	str	r1, [r3, #68]	; 0x44
 8002572:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002574:	b2c5      	uxtb	r5, r0
 8002576:	3d08      	subs	r5, #8
 8002578:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800257c:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002580:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002584:	4e2c      	ldr	r6, [pc, #176]	; (8002638 <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 8002586:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002588:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800258c:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002590:	4540      	cmp	r0, r8
 8002592:	bf88      	it	hi
 8002594:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 8002596:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800259a:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800259c:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8002650 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 80025a0:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80025a2:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80025a6:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025aa:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80025ae:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80025b2:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80025b6:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025b8:	d029      	beq.n	800260e <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025ba:	6858      	ldr	r0, [r3, #4]
 80025bc:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025be:	3801      	subs	r0, #1
 80025c0:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025c2:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025c6:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025ca:	d826      	bhi.n	800261a <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025cc:	491b      	ldr	r1, [pc, #108]	; (800263c <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025ce:	481c      	ldr	r0, [pc, #112]	; (8002640 <HAL_DMA_Init+0x11c>)
 80025d0:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025d2:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025d4:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025d6:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025d8:	f002 021f 	and.w	r2, r2, #31
 80025dc:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025e0:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80025e2:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80025e6:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025e8:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80025ec:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ee:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80025f0:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80025f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80025f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80025fc:	4911      	ldr	r1, [pc, #68]	; (8002644 <HAL_DMA_Init+0x120>)
 80025fe:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8002600:	4c11      	ldr	r4, [pc, #68]	; (8002648 <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002602:	4401      	add	r1, r0
 8002604:	fba2 2101 	umull	r2, r1, r2, r1
 8002608:	0909      	lsrs	r1, r1, #4
 800260a:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800260c:	e79b      	b.n	8002546 <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002612:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002616:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 800261a:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 800261c:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002620:	65da      	str	r2, [r3, #92]	; 0x5c
 8002622:	e7e2      	b.n	80025ea <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
}
 8002626:	4770      	bx	lr
 8002628:	40020407 	.word	0x40020407
 800262c:	bffdfbf8 	.word	0xbffdfbf8
 8002630:	cccccccd 	.word	0xcccccccd
 8002634:	40020400 	.word	0x40020400
 8002638:	40020800 	.word	0x40020800
 800263c:	1000823f 	.word	0x1000823f
 8002640:	40020940 	.word	0x40020940
 8002644:	bffdfff8 	.word	0xbffdfff8
 8002648:	40020000 	.word	0x40020000
 800264c:	40020820 	.word	0x40020820
 8002650:	40020880 	.word	0x40020880

08002654 <HAL_DMA_Start_IT>:
{
 8002654:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002656:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800265a:	2c01      	cmp	r4, #1
 800265c:	d053      	beq.n	8002706 <HAL_DMA_Start_IT+0xb2>
  if (HAL_DMA_STATE_READY == hdma->State)
 800265e:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8002662:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8002664:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002666:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 800266a:	d005      	beq.n	8002678 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800266c:	2300      	movs	r3, #0
 800266e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8002672:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8002674:	2002      	movs	r0, #2
}
 8002676:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002678:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800267a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002680:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002684:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002686:	6826      	ldr	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002688:	e9d0 c514 	ldrd	ip, r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE(hdma);
 800268c:	f026 0601 	bic.w	r6, r6, #1
 8002690:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002692:	f8c7 c004 	str.w	ip, [r7, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8002696:	b115      	cbz	r5, 800269e <HAL_DMA_Start_IT+0x4a>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002698:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 800269c:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800269e:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026a0:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026a2:	f006 0c1f 	and.w	ip, r6, #31
 80026a6:	2601      	movs	r6, #1
 80026a8:	fa06 fc0c 	lsl.w	ip, r6, ip
 80026ac:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80026ae:	f8c6 c004 	str.w	ip, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80026b2:	6063      	str	r3, [r4, #4]
    if (NULL != hdma->XferHalfCpltCallback)
 80026b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026b6:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 80026b8:	bf0b      	itete	eq
 80026ba:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 80026bc:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80026be:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 80026c0:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80026c2:	b1bb      	cbz	r3, 80026f4 <HAL_DMA_Start_IT+0xa0>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f043 030e 	orr.w	r3, r3, #14
 80026ca:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026cc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	03d2      	lsls	r2, r2, #15
 80026d2:	d503      	bpl.n	80026dc <HAL_DMA_Start_IT+0x88>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026da:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80026dc:	b11d      	cbz	r5, 80026e6 <HAL_DMA_Start_IT+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80026de:	682b      	ldr	r3, [r5, #0]
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ee:	2000      	movs	r0, #0
}
 80026f0:	bcf0      	pop	{r4, r5, r6, r7}
 80026f2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	f043 030a 	orr.w	r3, r3, #10
 8002702:	6023      	str	r3, [r4, #0]
 8002704:	e7e2      	b.n	80026cc <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8002706:	2002      	movs	r0, #2
}
 8002708:	bcf0      	pop	{r4, r5, r6, r7}
 800270a:	4770      	bx	lr

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002710:	680c      	ldr	r4, [r1, #0]
{
 8002712:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002714:	2c00      	cmp	r4, #0
 8002716:	f000 8084 	beq.w	8002822 <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00U;
 800271a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800271c:	f04f 0b01 	mov.w	fp, #1
 8002720:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002724:	ea1e 0a04 	ands.w	sl, lr, r4
 8002728:	d076      	beq.n	8002818 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800272a:	684e      	ldr	r6, [r1, #4]
 800272c:	f006 0203 	and.w	r2, r6, #3
 8002730:	1e55      	subs	r5, r2, #1
 8002732:	2d01      	cmp	r5, #1
 8002734:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002738:	d976      	bls.n	8002828 <HAL_GPIO_Init+0x11c>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	2a03      	cmp	r2, #3
 800273c:	f040 80ba 	bne.w	80028b4 <HAL_GPIO_Init+0x1a8>
 8002740:	fa02 f20c 	lsl.w	r2, r2, ip
 8002744:	43d5      	mvns	r5, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002746:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800274a:	ea0c 0505 	and.w	r5, ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002750:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002754:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002756:	d05f      	beq.n	8002818 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002758:	4d64      	ldr	r5, [pc, #400]	; (80028ec <HAL_GPIO_Init+0x1e0>)
 800275a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800275c:	f042 0201 	orr.w	r2, r2, #1
 8002760:	662a      	str	r2, [r5, #96]	; 0x60
 8002762:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002764:	f023 0c03 	bic.w	ip, r3, #3
 8002768:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 800276c:	f002 0201 	and.w	r2, r2, #1
 8002770:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
 8002774:	9203      	str	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002776:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800277c:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	270f      	movs	r7, #15
 8002784:	fa07 fe02 	lsl.w	lr, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002788:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800278c:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0xba>
 8002792:	4f57      	ldr	r7, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x1e4>)
 8002794:	42b8      	cmp	r0, r7
 8002796:	f000 8098 	beq.w	80028ca <HAL_GPIO_Init+0x1be>
 800279a:	4f56      	ldr	r7, [pc, #344]	; (80028f4 <HAL_GPIO_Init+0x1e8>)
 800279c:	42b8      	cmp	r0, r7
 800279e:	f000 8098 	beq.w	80028d2 <HAL_GPIO_Init+0x1c6>
 80027a2:	4f55      	ldr	r7, [pc, #340]	; (80028f8 <HAL_GPIO_Init+0x1ec>)
 80027a4:	42b8      	cmp	r0, r7
 80027a6:	f000 808a 	beq.w	80028be <HAL_GPIO_Init+0x1b2>
 80027aa:	4f54      	ldr	r7, [pc, #336]	; (80028fc <HAL_GPIO_Init+0x1f0>)
 80027ac:	42b8      	cmp	r0, r7
 80027ae:	f000 8096 	beq.w	80028de <HAL_GPIO_Init+0x1d2>
 80027b2:	4f53      	ldr	r7, [pc, #332]	; (8002900 <HAL_GPIO_Init+0x1f4>)
 80027b4:	42b8      	cmp	r0, r7
 80027b6:	bf0c      	ite	eq
 80027b8:	f04f 0e05 	moveq.w	lr, #5
 80027bc:	f04f 0e06 	movne.w	lr, #6
 80027c0:	fa0e f202 	lsl.w	r2, lr, r2
 80027c4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c6:	4a4f      	ldr	r2, [pc, #316]	; (8002904 <HAL_GPIO_Init+0x1f8>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	f8cc 5008 	str.w	r5, [ip, #8]
        temp = EXTI->RTSR1;
 80027cc:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80027ce:	ea6f 0c0a 	mvn.w	ip, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d2:	02f5      	lsls	r5, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80027d4:	4d4b      	ldr	r5, [pc, #300]	; (8002904 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 80027d6:	bf54      	ite	pl
 80027d8:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 80027dc:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80027e0:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR1;
 80027e2:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027e4:	02b2      	lsls	r2, r6, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80027e6:	4a47      	ldr	r2, [pc, #284]	; (8002904 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 80027e8:	bf54      	ite	pl
 80027ea:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 80027ee:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 80027f2:	60d5      	str	r5, [r2, #12]

        temp = EXTI->EMR1;
 80027f4:	6855      	ldr	r5, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80027f6:	4a43      	ldr	r2, [pc, #268]	; (8002904 <HAL_GPIO_Init+0x1f8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f8:	03b7      	lsls	r7, r6, #14
        temp &= ~(iocurrent);
 80027fa:	bf54      	ite	pl
 80027fc:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 8002800:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8002804:	6055      	str	r5, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002806:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	03f5      	lsls	r5, r6, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800280a:	4d3e      	ldr	r5, [pc, #248]	; (8002904 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 800280c:	bf54      	ite	pl
 800280e:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8002812:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002816:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002818:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800281a:	fa34 f203 	lsrs.w	r2, r4, r3
 800281e:	f47f af7f 	bne.w	8002720 <HAL_GPIO_Init+0x14>
  }
}
 8002822:	b005      	add	sp, #20
 8002824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002828:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800282e:	2503      	movs	r5, #3
 8002830:	fa05 f50c 	lsl.w	r5, r5, ip
 8002834:	ea28 0805 	bic.w	r8, r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002838:	fa07 f90c 	lsl.w	r9, r7, ip
 800283c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8002840:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002844:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002848:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002850:	fa09 fe03 	lsl.w	lr, r9, r3
 8002854:	ea4e 0e08 	orr.w	lr, lr, r8
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002858:	43ed      	mvns	r5, r5
        GPIOx->OTYPER = temp;
 800285a:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800285e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002862:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002864:	ea08 0805 	and.w	r8, r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	fa07 fe0c 	lsl.w	lr, r7, ip
 800286c:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002870:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8002872:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002876:	d002      	beq.n	800287e <HAL_GPIO_Init+0x172>
 8002878:	fa02 f20c 	lsl.w	r2, r2, ip
 800287c:	e763      	b.n	8002746 <HAL_GPIO_Init+0x3a>
        temp = GPIOx->AFR[position >> 3U];
 800287e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8002882:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002886:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800288a:	f8d8 7020 	ldr.w	r7, [r8, #32]
 800288e:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002890:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002892:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002896:	fa07 f90e 	lsl.w	r9, r7, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800289a:	270f      	movs	r7, #15
 800289c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80028a0:	9f01      	ldr	r7, [sp, #4]
 80028a2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028a6:	ea49 0e0e 	orr.w	lr, r9, lr
        GPIOx->AFR[position >> 3U] = temp;
 80028aa:	fa02 f20c 	lsl.w	r2, r2, ip
 80028ae:	f8c8 e020 	str.w	lr, [r8, #32]
 80028b2:	e748      	b.n	8002746 <HAL_GPIO_Init+0x3a>
 80028b4:	2503      	movs	r5, #3
 80028b6:	fa05 f50c 	lsl.w	r5, r5, ip
 80028ba:	43ed      	mvns	r5, r5
 80028bc:	e7cf      	b.n	800285e <HAL_GPIO_Init+0x152>
 80028be:	f04f 0e03 	mov.w	lr, #3
 80028c2:	fa0e f202 	lsl.w	r2, lr, r2
 80028c6:	4315      	orrs	r5, r2
 80028c8:	e77d      	b.n	80027c6 <HAL_GPIO_Init+0xba>
 80028ca:	fa0b f202 	lsl.w	r2, fp, r2
 80028ce:	4315      	orrs	r5, r2
 80028d0:	e779      	b.n	80027c6 <HAL_GPIO_Init+0xba>
 80028d2:	f04f 0e02 	mov.w	lr, #2
 80028d6:	fa0e f202 	lsl.w	r2, lr, r2
 80028da:	4315      	orrs	r5, r2
 80028dc:	e773      	b.n	80027c6 <HAL_GPIO_Init+0xba>
 80028de:	f04f 0e04 	mov.w	lr, #4
 80028e2:	fa0e f202 	lsl.w	r2, lr, r2
 80028e6:	4315      	orrs	r5, r2
 80028e8:	e76d      	b.n	80027c6 <HAL_GPIO_Init+0xba>
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	48001400 	.word	0x48001400
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002908:	6903      	ldr	r3, [r0, #16]
 800290a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800290c:	bf14      	ite	ne
 800290e:	2001      	movne	r0, #1
 8002910:	2000      	moveq	r0, #0
 8002912:	4770      	bx	lr

08002914 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002914:	4a3b      	ldr	r2, [pc, #236]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8002916:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002918:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800291a:	b968      	cbnz	r0, 8002938 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800291c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002924:	d014      	beq.n	8002950 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002926:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800292a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8002932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002936:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002938:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800293c:	d02f      	beq.n	800299e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800293e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002946:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002948:	2000      	movs	r0, #0
}
 800294a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800294e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002950:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002954:	4b2c      	ldr	r3, [pc, #176]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002956:	482d      	ldr	r0, [pc, #180]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002958:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800295c:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002960:	6811      	ldr	r1, [r2, #0]
 8002962:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002966:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800296a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800296c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002970:	2332      	movs	r3, #50	; 0x32
 8002972:	fb03 f304 	mul.w	r3, r3, r4
 8002976:	fba0 0303 	umull	r0, r3, r0, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002982:	d506      	bpl.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002984:	e000      	b.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x74>
 8002986:	b123      	cbz	r3, 8002992 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002988:	6951      	ldr	r1, [r2, #20]
 800298a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800298c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002990:	d4f9      	bmi.n	8002986 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	055c      	lsls	r4, r3, #21
 8002998:	d5d6      	bpl.n	8002948 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 800299a:	2003      	movs	r0, #3
 800299c:	e7c9      	b.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d009      	beq.n	80029bc <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 80029ac:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 80029b4:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 80029ba:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029bc:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80029c2:	4812      	ldr	r0, [pc, #72]	; (8002a0c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029c4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80029c8:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029cc:	6811      	ldr	r1, [r2, #0]
 80029ce:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80029d2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80029d6:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029d8:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029da:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029dc:	2332      	movs	r3, #50	; 0x32
 80029de:	fb03 f304 	mul.w	r3, r3, r4
 80029e2:	fba0 0303 	umull	r0, r3, r0, r3
 80029e6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e8:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029ea:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ee:	d5d0      	bpl.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80029f0:	e001      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0xe2>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0cd      	beq.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x7e>
 80029f6:	6951      	ldr	r1, [r2, #20]
 80029f8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80029fa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029fe:	d5c8      	bpl.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002a00:	e7f7      	b.n	80029f2 <HAL_PWREx_ControlVoltageScaling+0xde>
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000
 8002a08:	20000804 	.word	0x20000804
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002a10:	4a02      	ldr	r2, [pc, #8]	; (8002a1c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002a12:	6893      	ldr	r3, [r2, #8]
 8002a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a18:	6093      	str	r3, [r2, #8]
}
 8002a1a:	4770      	bx	lr
 8002a1c:	40007000 	.word	0x40007000

08002a20 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a20:	2800      	cmp	r0, #0
 8002a22:	f000 8200 	beq.w	8002e26 <HAL_RCC_OscConfig+0x406>
{
 8002a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a2a:	6803      	ldr	r3, [r0, #0]
 8002a2c:	07d9      	lsls	r1, r3, #31
{
 8002a2e:	b082      	sub	sp, #8
 8002a30:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a32:	d52d      	bpl.n	8002a90 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a34:	49af      	ldr	r1, [pc, #700]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002a36:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002a3e:	2a0c      	cmp	r2, #12
 8002a40:	f000 8107 	beq.w	8002c52 <HAL_RCC_OscConfig+0x232>
 8002a44:	2a08      	cmp	r2, #8
 8002a46:	f000 8109 	beq.w	8002c5c <HAL_RCC_OscConfig+0x23c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4a:	6863      	ldr	r3, [r4, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	f000 8177 	beq.w	8002d42 <HAL_RCC_OscConfig+0x322>
 8002a54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a58:	f000 81d8 	beq.w	8002e0c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	4da5      	ldr	r5, [pc, #660]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002a5e:	682a      	ldr	r2, [r5, #0]
 8002a60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a64:	602a      	str	r2, [r5, #0]
 8002a66:	682a      	ldr	r2, [r5, #0]
 8002a68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a6c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 816c 	bne.w	8002d4c <HAL_RCC_OscConfig+0x32c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fe fde6 	bl	8001644 <HAL_GetTick>
 8002a78:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fde2 	bl	8001644 <HAL_GetTick>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	2864      	cmp	r0, #100	; 0x64
 8002a84:	f200 817f 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	039f      	lsls	r7, r3, #14
 8002a8c:	d4f6      	bmi.n	8002a7c <HAL_RCC_OscConfig+0x5c>
 8002a8e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a90:	079e      	lsls	r6, r3, #30
 8002a92:	d528      	bpl.n	8002ae6 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a94:	4a97      	ldr	r2, [pc, #604]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002a96:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a98:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a9a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	f000 8130 	beq.w	8002d04 <HAL_RCC_OscConfig+0x2e4>
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	f000 8132 	beq.w	8002d0e <HAL_RCC_OscConfig+0x2ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aac:	4d91      	ldr	r5, [pc, #580]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 815a 	beq.w	8002d68 <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aba:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fdc2 	bl	8001644 <HAL_GetTick>
 8002ac0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fdbe 	bl	8001644 <HAL_GetTick>
 8002ac8:	1b80      	subs	r0, r0, r6
 8002aca:	2802      	cmp	r0, #2
 8002acc:	f200 815b 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad0:	682b      	ldr	r3, [r5, #0]
 8002ad2:	0558      	lsls	r0, r3, #21
 8002ad4:	d5f6      	bpl.n	8002ac4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad6:	686b      	ldr	r3, [r5, #4]
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002ade:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ae2:	606b      	str	r3, [r5, #4]
 8002ae4:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	071a      	lsls	r2, r3, #28
 8002ae8:	d519      	bpl.n	8002b1e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aea:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aec:	4d81      	ldr	r5, [pc, #516]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 809a 	beq.w	8002c28 <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSI_ENABLE();
 8002af4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fda0 	bl	8001644 <HAL_GetTick>
 8002b04:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b06:	e005      	b.n	8002b14 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fd9c 	bl	8001644 <HAL_GetTick>
 8002b0c:	1b80      	subs	r0, r0, r6
 8002b0e:	2802      	cmp	r0, #2
 8002b10:	f200 8139 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002b18:	079b      	lsls	r3, r3, #30
 8002b1a:	d5f5      	bpl.n	8002b08 <HAL_RCC_OscConfig+0xe8>
 8002b1c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	075e      	lsls	r6, r3, #29
 8002b20:	d541      	bpl.n	8002ba6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b22:	4b74      	ldr	r3, [pc, #464]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002b24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b26:	00d5      	lsls	r5, r2, #3
 8002b28:	f100 8131 	bmi.w	8002d8e <HAL_RCC_OscConfig+0x36e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b3e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b40:	4e6d      	ldr	r6, [pc, #436]	; (8002cf8 <HAL_RCC_OscConfig+0x2d8>)
 8002b42:	6833      	ldr	r3, [r6, #0]
 8002b44:	05d8      	lsls	r0, r3, #23
 8002b46:	f140 8150 	bpl.w	8002dea <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4a:	68a3      	ldr	r3, [r4, #8]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	f000 8120 	beq.w	8002d92 <HAL_RCC_OscConfig+0x372>
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	f000 8169 	beq.w	8002e2a <HAL_RCC_OscConfig+0x40a>
 8002b58:	4e66      	ldr	r6, [pc, #408]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002b5a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002b66:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002b6a:	f022 0204 	bic.w	r2, r2, #4
 8002b6e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8114 	bne.w	8002da0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fd64 	bl	8001644 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002b80:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b82:	e005      	b.n	8002b90 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fd5e 	bl	8001644 <HAL_GetTick>
 8002b88:	1bc0      	subs	r0, r0, r7
 8002b8a:	4540      	cmp	r0, r8
 8002b8c:	f200 80fb 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b90:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002b94:	079b      	lsls	r3, r3, #30
 8002b96:	d4f5      	bmi.n	8002b84 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b98:	b125      	cbz	r5, 8002ba4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4a56      	ldr	r2, [pc, #344]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002b9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba4:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba6:	069d      	lsls	r5, r3, #26
 8002ba8:	d518      	bpl.n	8002bdc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002baa:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002bac:	4d51      	ldr	r5, [pc, #324]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8107 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_HSI48_ENABLE();
 8002bb4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fd40 	bl	8001644 <HAL_GetTick>
 8002bc4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bc6:	e005      	b.n	8002bd4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bc8:	f7fe fd3c 	bl	8001644 <HAL_GetTick>
 8002bcc:	1b80      	subs	r0, r0, r6
 8002bce:	2802      	cmp	r0, #2
 8002bd0:	f200 80d9 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bd4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002bd8:	0798      	lsls	r0, r3, #30
 8002bda:	d5f5      	bpl.n	8002bc8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bdc:	69e0      	ldr	r0, [r4, #28]
 8002bde:	2800      	cmp	r0, #0
 8002be0:	f000 8084 	beq.w	8002cec <HAL_RCC_OscConfig+0x2cc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002be4:	4d43      	ldr	r5, [pc, #268]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002be6:	68ab      	ldr	r3, [r5, #8]
 8002be8:	f003 030c 	and.w	r3, r3, #12
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	f000 812a 	beq.w	8002e46 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bf4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bfc:	d03b      	beq.n	8002c76 <HAL_RCC_OscConfig+0x256>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fe fd21 	bl	8001644 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c02:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8002c04:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c06:	e005      	b.n	8002c14 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fd1c 	bl	8001644 <HAL_GetTick>
 8002c0c:	1b40      	subs	r0, r0, r5
 8002c0e:	2802      	cmp	r0, #2
 8002c10:	f200 80b9 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	d1f5      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e8>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c1c:	68e1      	ldr	r1, [r4, #12]
 8002c1e:	4a37      	ldr	r2, [pc, #220]	; (8002cfc <HAL_RCC_OscConfig+0x2dc>)
 8002c20:	400a      	ands	r2, r1
      }
    }
  }
  }

  return HAL_OK;
 8002c22:	4618      	mov	r0, r3
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002c24:	60e2      	str	r2, [r4, #12]
 8002c26:	e062      	b.n	8002cee <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_LSI_DISABLE();
 8002c28:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c2c:	f023 0301 	bic.w	r3, r3, #1
 8002c30:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002c34:	f7fe fd06 	bl	8001644 <HAL_GetTick>
 8002c38:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c3a:	e005      	b.n	8002c48 <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3c:	f7fe fd02 	bl	8001644 <HAL_GetTick>
 8002c40:	1b80      	subs	r0, r0, r6
 8002c42:	2802      	cmp	r0, #2
 8002c44:	f200 809f 	bhi.w	8002d86 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c48:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c4c:	079f      	lsls	r7, r3, #30
 8002c4e:	d4f5      	bmi.n	8002c3c <HAL_RCC_OscConfig+0x21c>
 8002c50:	e764      	b.n	8002b1c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c52:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c56:	2903      	cmp	r1, #3
 8002c58:	f47f aef7 	bne.w	8002a4a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	4a25      	ldr	r2, [pc, #148]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	0392      	lsls	r2, r2, #14
 8002c62:	f57f af15 	bpl.w	8002a90 <HAL_RCC_OscConfig+0x70>
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	f47f af11 	bne.w	8002a90 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
}
 8002c70:	b002      	add	sp, #8
 8002c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8002c76:	f7fe fce5 	bl	8001644 <HAL_GetTick>
 8002c7a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_OscConfig+0x268>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fce1 	bl	8001644 <HAL_GetTick>
 8002c82:	1b80      	subs	r0, r0, r6
 8002c84:	2802      	cmp	r0, #2
 8002c86:	d87e      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	019a      	lsls	r2, r3, #6
 8002c8c:	d4f7      	bmi.n	8002c7e <HAL_RCC_OscConfig+0x25e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	68e9      	ldr	r1, [r5, #12]
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_RCC_OscConfig+0x2e0>)
 8002c92:	6a22      	ldr	r2, [r4, #32]
 8002c94:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002c96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c98:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c9a:	400b      	ands	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8002ca2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002ca6:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8002caa:	3801      	subs	r0, #1
 8002cac:	0849      	lsrs	r1, r1, #1
 8002cae:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002cb2:	3901      	subs	r1, #1
 8002cb4:	0852      	lsrs	r2, r2, #1
 8002cb6:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002cc0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002cc2:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc4:	4e0b      	ldr	r6, [pc, #44]	; (8002cf4 <HAL_RCC_OscConfig+0x2d4>)
        __HAL_RCC_PLL_ENABLE();
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	68eb      	ldr	r3, [r5, #12]
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002cd4:	f7fe fcb6 	bl	8001644 <HAL_GetTick>
 8002cd8:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	e004      	b.n	8002ce6 <HAL_RCC_OscConfig+0x2c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fcb2 	bl	8001644 <HAL_GetTick>
 8002ce0:	1b00      	subs	r0, r0, r4
 8002ce2:	2802      	cmp	r0, #2
 8002ce4:	d84f      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	6833      	ldr	r3, [r6, #0]
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	d5f7      	bpl.n	8002cdc <HAL_RCC_OscConfig+0x2bc>
  return HAL_OK;
 8002cec:	2000      	movs	r0, #0
}
 8002cee:	b002      	add	sp, #8
 8002cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	feeefffc 	.word	0xfeeefffc
 8002d00:	019f800c 	.word	0x019f800c
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d04:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d08:	2a02      	cmp	r2, #2
 8002d0a:	f47f aece 	bne.w	8002aaa <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	055d      	lsls	r5, r3, #21
 8002d14:	d502      	bpl.n	8002d1c <HAL_RCC_OscConfig+0x2fc>
 8002d16:	68e3      	ldr	r3, [r4, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0a8      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4a64      	ldr	r2, [pc, #400]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
 8002d1e:	6920      	ldr	r0, [r4, #16]
 8002d20:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d22:	4964      	ldr	r1, [pc, #400]	; (8002eb4 <HAL_RCC_OscConfig+0x494>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002d28:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002d2c:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d2e:	6808      	ldr	r0, [r1, #0]
 8002d30:	f7fe fc46 	bl	80015c0 <HAL_InitTick>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	d19a      	bne.n	8002c6e <HAL_RCC_OscConfig+0x24e>
 8002d38:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	071a      	lsls	r2, r3, #28
 8002d3c:	f57f aeef 	bpl.w	8002b1e <HAL_RCC_OscConfig+0xfe>
 8002d40:	e6d3      	b.n	8002aea <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	4a5b      	ldr	r2, [pc, #364]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fc7a 	bl	8001644 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d50:	4e57      	ldr	r6, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8002d52:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d54:	e004      	b.n	8002d60 <HAL_RCC_OscConfig+0x340>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d56:	f7fe fc75 	bl	8001644 <HAL_GetTick>
 8002d5a:	1b40      	subs	r0, r0, r5
 8002d5c:	2864      	cmp	r0, #100	; 0x64
 8002d5e:	d812      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x366>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d60:	6833      	ldr	r3, [r6, #0]
 8002d62:	039b      	lsls	r3, r3, #14
 8002d64:	d5f7      	bpl.n	8002d56 <HAL_RCC_OscConfig+0x336>
 8002d66:	e692      	b.n	8002a8e <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d70:	f7fe fc68 	bl	8001644 <HAL_GetTick>
 8002d74:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d76:	682b      	ldr	r3, [r5, #0]
 8002d78:	0559      	lsls	r1, r3, #21
 8002d7a:	d5dd      	bpl.n	8002d38 <HAL_RCC_OscConfig+0x318>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fc62 	bl	8001644 <HAL_GetTick>
 8002d80:	1b80      	subs	r0, r0, r6
 8002d82:	2802      	cmp	r0, #2
 8002d84:	d9f7      	bls.n	8002d76 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
}
 8002d88:	b002      	add	sp, #8
 8002d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2500      	movs	r5, #0
 8002d90:	e6d6      	b.n	8002b40 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d92:	4a47      	ldr	r2, [pc, #284]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
 8002d94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002da0:	f7fe fc50 	bl	8001644 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da4:	4f42      	ldr	r7, [pc, #264]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8002da6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dac:	e004      	b.n	8002db8 <HAL_RCC_OscConfig+0x398>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe fc49 	bl	8001644 <HAL_GetTick>
 8002db2:	1b80      	subs	r0, r0, r6
 8002db4:	4540      	cmp	r0, r8
 8002db6:	d8e6      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x366>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dbc:	079a      	lsls	r2, r3, #30
 8002dbe:	d5f6      	bpl.n	8002dae <HAL_RCC_OscConfig+0x38e>
 8002dc0:	e6ea      	b.n	8002b98 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8002dc2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002dc6:	f023 0301 	bic.w	r3, r3, #1
 8002dca:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002dce:	f7fe fc39 	bl	8001644 <HAL_GetTick>
 8002dd2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_OscConfig+0x3c0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd6:	f7fe fc35 	bl	8001644 <HAL_GetTick>
 8002dda:	1b80      	subs	r0, r0, r6
 8002ddc:	2802      	cmp	r0, #2
 8002dde:	d8d2      	bhi.n	8002d86 <HAL_RCC_OscConfig+0x366>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002de4:	0799      	lsls	r1, r3, #30
 8002de6:	d4f6      	bmi.n	8002dd6 <HAL_RCC_OscConfig+0x3b6>
 8002de8:	e6f8      	b.n	8002bdc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dea:	6833      	ldr	r3, [r6, #0]
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002df2:	f7fe fc27 	bl	8001644 <HAL_GetTick>
 8002df6:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df8:	6833      	ldr	r3, [r6, #0]
 8002dfa:	05d9      	lsls	r1, r3, #23
 8002dfc:	f53f aea5 	bmi.w	8002b4a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7fe fc20 	bl	8001644 <HAL_GetTick>
 8002e04:	1bc0      	subs	r0, r0, r7
 8002e06:	2802      	cmp	r0, #2
 8002e08:	d9f6      	bls.n	8002df8 <HAL_RCC_OscConfig+0x3d8>
 8002e0a:	e7bc      	b.n	8002d86 <HAL_RCC_OscConfig+0x366>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e10:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e22:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e24:	e792      	b.n	8002d4c <HAL_RCC_OscConfig+0x32c>
    return HAL_ERROR;
 8002e26:	2001      	movs	r0, #1
}
 8002e28:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2a:	4b21      	ldr	r3, [pc, #132]	; (8002eb0 <HAL_RCC_OscConfig+0x490>)
 8002e2c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e30:	f042 0204 	orr.w	r2, r2, #4
 8002e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002e38:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002e3c:	f042 0201 	orr.w	r2, r2, #1
 8002e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e44:	e7ac      	b.n	8002da0 <HAL_RCC_OscConfig+0x380>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e46:	2801      	cmp	r0, #1
 8002e48:	f43f af51 	beq.w	8002cee <HAL_RCC_OscConfig+0x2ce>
      temp_pllckcfg = RCC->PLLCFGR;
 8002e4c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	6a22      	ldr	r2, [r4, #32]
 8002e50:	f003 0103 	and.w	r1, r3, #3
 8002e54:	4291      	cmp	r1, r2
 8002e56:	f47f af0a 	bne.w	8002c6e <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e60:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002e66:	f47f af02 	bne.w	8002c6e <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e70:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002e74:	f47f aefb 	bne.w	8002c6e <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e78:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e7a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002e82:	f47f aef4 	bne.w	8002c6e <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e86:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e88:	0852      	lsrs	r2, r2, #1
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e90:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002e94:	f47f aeeb 	bne.w	8002c6e <HAL_RCC_OscConfig+0x24e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e98:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002e9a:	0852      	lsrs	r2, r2, #1
 8002e9c:	3a01      	subs	r2, #1
 8002e9e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8002ea6:	bf14      	ite	ne
 8002ea8:	2001      	movne	r0, #1
 8002eaa:	2000      	moveq	r0, #0
 8002eac:	e71f      	b.n	8002cee <HAL_RCC_OscConfig+0x2ce>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	2000080c 	.word	0x2000080c

08002eb8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002eb8:	4b18      	ldr	r3, [pc, #96]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x64>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	f002 020c 	and.w	r2, r2, #12
 8002ec0:	2a04      	cmp	r2, #4
 8002ec2:	d027      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	f002 020c 	and.w	r2, r2, #12
 8002eca:	2a08      	cmp	r2, #8
 8002ecc:	d024      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	f002 020c 	and.w	r2, r2, #12
 8002ed4:	2a0c      	cmp	r2, #12
 8002ed6:	d001      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8002ed8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8002eda:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002edc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ede:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee0:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee2:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 8002eea:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eec:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ef0:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef4:	bf0c      	ite	eq
 8002ef6:	480a      	ldreq	r0, [pc, #40]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef8:	480a      	ldrne	r0, [pc, #40]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002efa:	fbb0 f0f2 	udiv	r0, r0, r2
 8002efe:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x64>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8002f0e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8002f12:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8002f14:	4803      	ldr	r0, [pc, #12]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002f16:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8002f18:	4801      	ldr	r0, [pc, #4]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x68>)
 8002f1a:	4770      	bx	lr
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	007a1200 	.word	0x007a1200
 8002f24:	00f42400 	.word	0x00f42400

08002f28 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	f000 80ef 	beq.w	800310c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2e:	4a7f      	ldr	r2, [pc, #508]	; (800312c <HAL_RCC_ClockConfig+0x204>)
{
 8002f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	428b      	cmp	r3, r1
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4604      	mov	r4, r0
 8002f40:	d20c      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	6813      	ldr	r3, [r2, #0]
 8002f44:	f023 030f 	bic.w	r3, r3, #15
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4c:	6813      	ldr	r3, [r2, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	428b      	cmp	r3, r1
 8002f54:	d002      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002f56:	2001      	movs	r0, #1
}
 8002f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	07de      	lsls	r6, r3, #31
 8002f60:	d563      	bpl.n	800302a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f62:	6862      	ldr	r2, [r4, #4]
 8002f64:	2a03      	cmp	r2, #3
 8002f66:	f000 809a 	beq.w	800309e <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6a:	4b71      	ldr	r3, [pc, #452]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f6e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f70:	f000 8091 	beq.w	8003096 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f74:	055b      	lsls	r3, r3, #21
 8002f76:	d5ee      	bpl.n	8002f56 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f78:	f7ff ff9e 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8002f7c:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCC_ClockConfig+0x20c>)
 8002f7e:	4298      	cmp	r0, r3
 8002f80:	f200 80c6 	bhi.w	8003110 <HAL_RCC_ClockConfig+0x1e8>
 8002f84:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f86:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4e69      	ldr	r6, [pc, #420]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8002f8c:	68b3      	ldr	r3, [r6, #8]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	431a      	orrs	r2, r3
 8002f94:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8002f96:	f7fe fb55 	bl	8001644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f9a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002f9e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa0:	e004      	b.n	8002fac <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fe fb4f 	bl	8001644 <HAL_GetTick>
 8002fa6:	1bc0      	subs	r0, r0, r7
 8002fa8:	4540      	cmp	r0, r8
 8002faa:	d871      	bhi.n	8003090 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fac:	68b3      	ldr	r3, [r6, #8]
 8002fae:	6862      	ldr	r2, [r4, #4]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fb8:	d1f3      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	079f      	lsls	r7, r3, #30
 8002fbe:	d436      	bmi.n	800302e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8002fc0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8002fc4:	d103      	bne.n	8002fce <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002fc6:	68b3      	ldr	r3, [r6, #8]
 8002fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fcc:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fce:	4e57      	ldr	r6, [pc, #348]	; (800312c <HAL_RCC_ClockConfig+0x204>)
 8002fd0:	6833      	ldr	r3, [r6, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	42ab      	cmp	r3, r5
 8002fd8:	d846      	bhi.n	8003068 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	075a      	lsls	r2, r3, #29
 8002fde:	d506      	bpl.n	8002fee <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fe0:	4953      	ldr	r1, [pc, #332]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8002fe2:	68e0      	ldr	r0, [r4, #12]
 8002fe4:	688a      	ldr	r2, [r1, #8]
 8002fe6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fea:	4302      	orrs	r2, r0
 8002fec:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	071b      	lsls	r3, r3, #28
 8002ff0:	d507      	bpl.n	8003002 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff2:	4a4f      	ldr	r2, [pc, #316]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8002ff4:	6921      	ldr	r1, [r4, #16]
 8002ff6:	6893      	ldr	r3, [r2, #8]
 8002ff8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ffc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003000:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003002:	f7ff ff59 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8003006:	4a4a      	ldr	r2, [pc, #296]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8003008:	4c4b      	ldr	r4, [pc, #300]	; (8003138 <HAL_RCC_ClockConfig+0x210>)
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	494b      	ldr	r1, [pc, #300]	; (800313c <HAL_RCC_ClockConfig+0x214>)
 800300e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003012:	4603      	mov	r3, r0
 8003014:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8003016:	484a      	ldr	r0, [pc, #296]	; (8003140 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	40d3      	lsrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003020:	6800      	ldr	r0, [r0, #0]
}
 8003022:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8003026:	f7fe bacb 	b.w	80015c0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800302a:	0798      	lsls	r0, r3, #30
 800302c:	d5cf      	bpl.n	8002fce <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	0758      	lsls	r0, r3, #29
 8003030:	d504      	bpl.n	800303c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003032:	493f      	ldr	r1, [pc, #252]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8003034:	688a      	ldr	r2, [r1, #8]
 8003036:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800303a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303c:	0719      	lsls	r1, r3, #28
 800303e:	d506      	bpl.n	800304e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003040:	4a3b      	ldr	r2, [pc, #236]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8003042:	6893      	ldr	r3, [r2, #8]
 8003044:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003048:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800304c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304e:	4a38      	ldr	r2, [pc, #224]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8003050:	68a1      	ldr	r1, [r4, #8]
 8003052:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4e35      	ldr	r6, [pc, #212]	; (800312c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800305a:	430b      	orrs	r3, r1
 800305c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800305e:	6833      	ldr	r3, [r6, #0]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	42ab      	cmp	r3, r5
 8003066:	d9b8      	bls.n	8002fda <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003068:	6833      	ldr	r3, [r6, #0]
 800306a:	f023 030f 	bic.w	r3, r3, #15
 800306e:	432b      	orrs	r3, r5
 8003070:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003072:	f7fe fae7 	bl	8001644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800307a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800307c:	6833      	ldr	r3, [r6, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	42ab      	cmp	r3, r5
 8003084:	d0a9      	beq.n	8002fda <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003086:	f7fe fadd 	bl	8001644 <HAL_GetTick>
 800308a:	1bc0      	subs	r0, r0, r7
 800308c:	4540      	cmp	r0, r8
 800308e:	d9f5      	bls.n	800307c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 8003090:	2003      	movs	r0, #3
}
 8003092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	039a      	lsls	r2, r3, #14
 8003098:	f53f af6e 	bmi.w	8002f78 <HAL_RCC_ClockConfig+0x50>
 800309c:	e75b      	b.n	8002f56 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309e:	4824      	ldr	r0, [pc, #144]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 80030a0:	6801      	ldr	r1, [r0, #0]
 80030a2:	0189      	lsls	r1, r1, #6
 80030a4:	f57f af57 	bpl.w	8002f56 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030a8:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030aa:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ac:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ae:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b2:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80030b6:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80030b8:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030bc:	bf0c      	ite	eq
 80030be:	4921      	ldreq	r1, [pc, #132]	; (8003144 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030c0:	4921      	ldrne	r1, [pc, #132]	; (8003148 <HAL_RCC_ClockConfig+0x220>)
 80030c2:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030c6:	4e1a      	ldr	r6, [pc, #104]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80030c8:	4f1a      	ldr	r7, [pc, #104]	; (8003134 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030ca:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80030ce:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030d2:	68f0      	ldr	r0, [r6, #12]
 80030d4:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80030d8:	3001      	adds	r0, #1
 80030da:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80030dc:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80030e0:	42b9      	cmp	r1, r7
 80030e2:	d920      	bls.n	8003126 <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80030e4:	68b1      	ldr	r1, [r6, #8]
 80030e6:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x1d0>
 80030ec:	f013 0902 	ands.w	r9, r3, #2
 80030f0:	f43f af4b 	beq.w	8002f8a <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80030f4:	68a3      	ldr	r3, [r4, #8]
 80030f6:	b9b3      	cbnz	r3, 8003126 <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030f8:	490d      	ldr	r1, [pc, #52]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 80030fa:	688b      	ldr	r3, [r1, #8]
 80030fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003104:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003106:	f04f 0980 	mov.w	r9, #128	; 0x80
 800310a:	e73e      	b.n	8002f8a <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800310c:	2001      	movs	r0, #1
}
 800310e:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003110:	4a07      	ldr	r2, [pc, #28]	; (8003130 <HAL_RCC_ClockConfig+0x208>)
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800311c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800311e:	6862      	ldr	r2, [r4, #4]
 8003120:	f04f 0980 	mov.w	r9, #128	; 0x80
 8003124:	e731      	b.n	8002f8a <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003126:	f04f 0900 	mov.w	r9, #0
 800312a:	e72e      	b.n	8002f8a <HAL_RCC_ClockConfig+0x62>
 800312c:	40022000 	.word	0x40022000
 8003130:	40021000 	.word	0x40021000
 8003134:	04c4b400 	.word	0x04c4b400
 8003138:	08004028 	.word	0x08004028
 800313c:	20000804 	.word	0x20000804
 8003140:	2000080c 	.word	0x2000080c
 8003144:	007a1200 	.word	0x007a1200
 8003148:	00f42400 	.word	0x00f42400

0800314c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800314c:	4b01      	ldr	r3, [pc, #4]	; (8003154 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000804 	.word	0x20000804

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315c:	6803      	ldr	r3, [r0, #0]
{
 800315e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003160:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 8003164:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003166:	d056      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003168:	4b9f      	ldr	r3, [pc, #636]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800316a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800316c:	00d5      	lsls	r5, r2, #3
 800316e:	f140 810c 	bpl.w	800338a <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003174:	4d9d      	ldr	r5, [pc, #628]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003176:	682b      	ldr	r3, [r5, #0]
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317e:	f7fe fa61 	bl	8001644 <HAL_GetTick>
 8003182:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003184:	e005      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fa5d 	bl	8001644 <HAL_GetTick>
 800318a:	1b83      	subs	r3, r0, r6
 800318c:	2b02      	cmp	r3, #2
 800318e:	f200 8107 	bhi.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003192:	682b      	ldr	r3, [r5, #0]
 8003194:	05d8      	lsls	r0, r3, #23
 8003196:	d5f6      	bpl.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003198:	4d93      	ldr	r5, [pc, #588]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800319a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800319e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80031a2:	d027      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80031a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d025      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031aa:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80031b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031be:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c6:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031c8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80031cc:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031d0:	f140 8108 	bpl.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe fa36 	bl	8001644 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80031dc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe fa30 	bl	8001644 <HAL_GetTick>
 80031e4:	1b80      	subs	r0, r0, r6
 80031e6:	4540      	cmp	r0, r8
 80031e8:	f200 80da 	bhi.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ec:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80031f0:	079b      	lsls	r3, r3, #30
 80031f2:	d5f5      	bpl.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
 80031f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f6:	497c      	ldr	r1, [pc, #496]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80031f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80031fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003200:	4313      	orrs	r3, r2
 8003202:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003206:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003208:	b127      	cbz	r7, 8003214 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4a77      	ldr	r2, [pc, #476]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800320c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800320e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003212:	6593      	str	r3, [r2, #88]	; 0x58
 8003214:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003216:	07de      	lsls	r6, r3, #31
 8003218:	d508      	bpl.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321a:	4973      	ldr	r1, [pc, #460]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800321c:	6865      	ldr	r5, [r4, #4]
 800321e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003222:	f022 0203 	bic.w	r2, r2, #3
 8003226:	432a      	orrs	r2, r5
 8003228:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800322c:	079d      	lsls	r5, r3, #30
 800322e:	d508      	bpl.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003230:	496d      	ldr	r1, [pc, #436]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003232:	68a5      	ldr	r5, [r4, #8]
 8003234:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003238:	f022 020c 	bic.w	r2, r2, #12
 800323c:	432a      	orrs	r2, r5
 800323e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003242:	0759      	lsls	r1, r3, #29
 8003244:	d508      	bpl.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003246:	4968      	ldr	r1, [pc, #416]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003248:	68e5      	ldr	r5, [r4, #12]
 800324a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800324e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003252:	432a      	orrs	r2, r5
 8003254:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003258:	071a      	lsls	r2, r3, #28
 800325a:	d508      	bpl.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800325c:	4962      	ldr	r1, [pc, #392]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800325e:	6925      	ldr	r5, [r4, #16]
 8003260:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003264:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003268:	432a      	orrs	r2, r5
 800326a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800326e:	069f      	lsls	r7, r3, #26
 8003270:	d508      	bpl.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003272:	495d      	ldr	r1, [pc, #372]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003274:	6965      	ldr	r5, [r4, #20]
 8003276:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800327a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800327e:	432a      	orrs	r2, r5
 8003280:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003284:	065e      	lsls	r6, r3, #25
 8003286:	d508      	bpl.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003288:	4957      	ldr	r1, [pc, #348]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800328a:	69a5      	ldr	r5, [r4, #24]
 800328c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003290:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003294:	432a      	orrs	r2, r5
 8003296:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800329a:	061d      	lsls	r5, r3, #24
 800329c:	d508      	bpl.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800329e:	4952      	ldr	r1, [pc, #328]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032a0:	69e5      	ldr	r5, [r4, #28]
 80032a2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032a6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80032aa:	432a      	orrs	r2, r5
 80032ac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032b0:	05d9      	lsls	r1, r3, #23
 80032b2:	d508      	bpl.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032b4:	494c      	ldr	r1, [pc, #304]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032b6:	6a25      	ldr	r5, [r4, #32]
 80032b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80032c0:	432a      	orrs	r2, r5
 80032c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032c6:	059a      	lsls	r2, r3, #22
 80032c8:	d508      	bpl.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ca:	4947      	ldr	r1, [pc, #284]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032d2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80032d6:	432a      	orrs	r2, r5
 80032d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032dc:	055f      	lsls	r7, r3, #21
 80032de:	d50b      	bpl.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e0:	4941      	ldr	r1, [pc, #260]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032e2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80032e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80032e8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80032ec:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032ee:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032f6:	d055      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80032f8:	051e      	lsls	r6, r3, #20
 80032fa:	d50b      	bpl.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032fc:	493a      	ldr	r1, [pc, #232]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80032fe:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003300:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003304:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003308:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800330a:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800330e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003312:	d04c      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003314:	04dd      	lsls	r5, r3, #19
 8003316:	d50b      	bpl.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003318:	4933      	ldr	r1, [pc, #204]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800331a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800331c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003320:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003324:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003326:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800332a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800332e:	d043      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003330:	0499      	lsls	r1, r3, #18
 8003332:	d50b      	bpl.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003334:	492c      	ldr	r1, [pc, #176]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003336:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003338:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800333c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003340:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003342:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003346:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800334a:	d03a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800334c:	045a      	lsls	r2, r3, #17
 800334e:	d50b      	bpl.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003350:	4925      	ldr	r1, [pc, #148]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003352:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003354:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003358:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800335c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800335e:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003362:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003366:	d031      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	d50b      	bpl.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800336c:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800336e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003370:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003374:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003378:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800337a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800337e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003382:	d028      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 8003384:	b002      	add	sp, #8
 8003386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800338c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003390:	659a      	str	r2, [r3, #88]	; 0x58
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800339c:	2701      	movs	r7, #1
 800339e:	e6e9      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 80033a0:	2003      	movs	r0, #3
 80033a2:	e731      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a4:	68ca      	ldr	r2, [r1, #12]
 80033a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033aa:	60ca      	str	r2, [r1, #12]
 80033ac:	e7a4      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033ae:	68ca      	ldr	r2, [r1, #12]
 80033b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033b4:	60ca      	str	r2, [r1, #12]
 80033b6:	e7ad      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	68ca      	ldr	r2, [r1, #12]
 80033ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033be:	60ca      	str	r2, [r1, #12]
 80033c0:	e7b6      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c2:	68ca      	ldr	r2, [r1, #12]
 80033c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033c8:	60ca      	str	r2, [r1, #12]
 80033ca:	e7bf      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033cc:	68ca      	ldr	r2, [r1, #12]
 80033ce:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033d2:	60ca      	str	r2, [r1, #12]
 80033d4:	e7c8      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80033d6:	68d3      	ldr	r3, [r2, #12]
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	60d3      	str	r3, [r2, #12]
}
 80033de:	b002      	add	sp, #8
 80033e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e4:	4613      	mov	r3, r2
 80033e6:	e706      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40007000 	.word	0x40007000

080033f0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	2800      	cmp	r0, #0
 80033f2:	f000 8086 	beq.w	8003502 <HAL_TIM_Base_Init+0x112>
{
 80033f6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033fc:	4604      	mov	r4, r0
 80033fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_TIM_Base_Init+0x102>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003406:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003408:	493f      	ldr	r1, [pc, #252]	; (8003508 <HAL_TIM_Base_Init+0x118>)
  htim->State = HAL_TIM_STATE_BUSY;
 800340a:	2202      	movs	r2, #2
 800340c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003410:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8003412:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003414:	d059      	beq.n	80034ca <HAL_TIM_Base_Init+0xda>
 8003416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341a:	d021      	beq.n	8003460 <HAL_TIM_Base_Init+0x70>
 800341c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8003420:	428b      	cmp	r3, r1
 8003422:	d01d      	beq.n	8003460 <HAL_TIM_Base_Init+0x70>
 8003424:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003428:	428b      	cmp	r3, r1
 800342a:	d019      	beq.n	8003460 <HAL_TIM_Base_Init+0x70>
 800342c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8003430:	428b      	cmp	r3, r1
 8003432:	d04a      	beq.n	80034ca <HAL_TIM_Base_Init+0xda>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003434:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8003438:	428b      	cmp	r3, r1
 800343a:	d05f      	beq.n	80034fc <HAL_TIM_Base_Init+0x10c>
 800343c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003440:	428b      	cmp	r3, r1
 8003442:	d05b      	beq.n	80034fc <HAL_TIM_Base_Init+0x10c>
 8003444:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003448:	428b      	cmp	r3, r1
 800344a:	d057      	beq.n	80034fc <HAL_TIM_Base_Init+0x10c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800344e:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003450:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003456:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003458:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800345c:	6299      	str	r1, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800345e:	e010      	b.n	8003482 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8003460:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003462:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003464:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003466:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800346a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800346c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003470:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	432a      	orrs	r2, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003478:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800347a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800347c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800347e:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003480:	6299      	str	r1, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003482:	2201      	movs	r2, #1
 8003484:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	07d2      	lsls	r2, r2, #31
 800348a:	d503      	bpl.n	8003494 <HAL_TIM_Base_Init+0xa4>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003494:	2301      	movs	r3, #1
 8003496:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800349e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80034a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80034a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80034aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80034be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80034c6:	2000      	movs	r0, #0
}
 80034c8:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80034ca:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034cc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034ce:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80034d4:	432a      	orrs	r2, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80034d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034da:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034e0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80034e2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	68e2      	ldr	r2, [r4, #12]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034e8:	6862      	ldr	r2, [r4, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80034ec:	6962      	ldr	r2, [r4, #20]
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
 80034f0:	e7c7      	b.n	8003482 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80034f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034f6:	f7fd ffef 	bl	80014d8 <HAL_TIM_Base_MspInit>
 80034fa:	e784      	b.n	8003406 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fe:	69a1      	ldr	r1, [r4, #24]
 8003500:	e7e9      	b.n	80034d6 <HAL_TIM_Base_Init+0xe6>
    return HAL_ERROR;
 8003502:	2001      	movs	r0, #1
}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40012c00 	.word	0x40012c00

0800350c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800350c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003510:	2b01      	cmp	r3, #1
 8003512:	d122      	bne.n	800355a <HAL_TIM_Base_Start_IT+0x4e>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003516:	4917      	ldr	r1, [pc, #92]	; (8003574 <HAL_TIM_Base_Start_IT+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	2202      	movs	r2, #2
 800351a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800351e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003528:	d019      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d016      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_TIM_Base_Start_IT+0x6c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
 8003536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
 800353e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
 8003546:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003556:	2000      	movs	r0, #0
 8003558:	4770      	bx	lr
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	4a06      	ldr	r2, [pc, #24]	; (800357c <HAL_TIM_Base_Start_IT+0x70>)
 8003562:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003564:	2a06      	cmp	r2, #6
 8003566:	d002      	beq.n	800356e <HAL_TIM_Base_Start_IT+0x62>
 8003568:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800356c:	d1ef      	bne.n	800354e <HAL_TIM_Base_Start_IT+0x42>
  return HAL_OK;
 800356e:	2000      	movs	r0, #0
}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	00010007 	.word	0x00010007

08003580 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003580:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	f000 8089 	beq.w	800369c <HAL_TIM_ConfigClockSource+0x11c>
 800358a:	4602      	mov	r2, r0
{
 800358c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800358e:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003590:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003592:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003596:	2001      	movs	r0, #1
 8003598:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800359c:	68a6      	ldr	r6, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800359e:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a0:	4d5e      	ldr	r5, [pc, #376]	; (800371c <HAL_TIM_ConfigClockSource+0x19c>)
  switch (sClockSourceConfig->ClockSource)
 80035a2:	2b70      	cmp	r3, #112	; 0x70
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035a4:	ea05 0506 	and.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 80035a8:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80035aa:	f000 80a5 	beq.w	80036f8 <HAL_TIM_ConfigClockSource+0x178>
 80035ae:	d827      	bhi.n	8003600 <HAL_TIM_ConfigClockSource+0x80>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d075      	beq.n	80036a0 <HAL_TIM_ConfigClockSource+0x120>
 80035b4:	d93d      	bls.n	8003632 <HAL_TIM_ConfigClockSource+0xb2>
 80035b6:	2b60      	cmp	r3, #96	; 0x60
 80035b8:	d11a      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ba:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035bc:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	684e      	ldr	r6, [r1, #4]
 80035c0:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c2:	f020 0010 	bic.w	r0, r0, #16
 80035c6:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c8:	69a1      	ldr	r1, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ce:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80035d2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035d6:	ea41 3105 	orr.w	r1, r1, r5, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035da:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80035dc:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035de:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80035e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035e8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ec:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80035ee:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80035f2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80035f8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80035fc:	bcf0      	pop	{r4, r5, r6, r7}
 80035fe:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003604:	d067      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x156>
 8003606:	d938      	bls.n	800367a <HAL_TIM_ConfigClockSource+0xfa>
 8003608:	4945      	ldr	r1, [pc, #276]	; (8003720 <HAL_TIM_ConfigClockSource+0x1a0>)
 800360a:	428b      	cmp	r3, r1
 800360c:	d006      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 800360e:	d92d      	bls.n	800366c <HAL_TIM_ConfigClockSource+0xec>
 8003610:	4944      	ldr	r1, [pc, #272]	; (8003724 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003612:	428b      	cmp	r3, r1
 8003614:	d002      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 8003616:	3130      	adds	r1, #48	; 0x30
 8003618:	428b      	cmp	r3, r1
 800361a:	d1e9      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  tmpsmcr = TIMx->SMCR;
 800361c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800361e:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003622:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003626:	4303      	orrs	r3, r0
 8003628:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800362c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2000      	movs	r0, #0
}
 8003630:	e7de      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d126      	bne.n	8003684 <HAL_TIM_ConfigClockSource+0x104>
  tmpccer = TIMx->CCER;
 8003636:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003638:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	6848      	ldr	r0, [r1, #4]
 800363c:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800363e:	f026 0601 	bic.w	r6, r6, #1
 8003642:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003644:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800364e:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003654:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003656:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003658:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800365a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003662:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003666:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003668:	2000      	movs	r0, #0
}
 800366a:	e7c1      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 800366c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003670:	d0d4      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 8003672:	3910      	subs	r1, #16
 8003674:	428b      	cmp	r3, r1
 8003676:	d0d1      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 8003678:	e7ba      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 800367e:	bf18      	it	ne
 8003680:	2001      	movne	r0, #1
 8003682:	e7b5      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8003684:	d8b4      	bhi.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
 8003686:	2b20      	cmp	r3, #32
 8003688:	d0c8      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 800368a:	d903      	bls.n	8003694 <HAL_TIM_ConfigClockSource+0x114>
 800368c:	2b30      	cmp	r3, #48	; 0x30
 800368e:	d0c5      	beq.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
 8003690:	2001      	movs	r0, #1
 8003692:	e7ad      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
 8003694:	f033 0110 	bics.w	r1, r3, #16
 8003698:	d1aa      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
 800369a:	e7bf      	b.n	800361c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800369c:	2002      	movs	r0, #2
}
 800369e:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80036a0:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a2:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a4:	6848      	ldr	r0, [r1, #4]
 80036a6:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a8:	f026 0601 	bic.w	r6, r6, #1
 80036ac:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ae:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80036b8:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036ba:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80036be:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80036c0:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80036c2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036cc:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80036d0:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2000      	movs	r0, #0
}
 80036d4:	e78c      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d6:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80036da:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80036dc:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036de:	432b      	orrs	r3, r5
 80036e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e8:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ea:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ec:	68a3      	ldr	r3, [r4, #8]
 80036ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f2:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036f4:	2000      	movs	r0, #0
      break;
 80036f6:	e77b      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036f8:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 80036fc:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80036fe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003700:	432b      	orrs	r3, r5
 8003702:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003706:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800370a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800370c:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 800370e:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003710:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003714:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2000      	movs	r0, #0
      break;
 8003718:	e76a      	b.n	80035f0 <HAL_TIM_ConfigClockSource+0x70>
 800371a:	bf00      	nop
 800371c:	ffce0088 	.word	0xffce0088
 8003720:	00100030 	.word	0x00100030
 8003724:	00100040 	.word	0x00100040

08003728 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003728:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d03c      	beq.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0x82>
{
 8003730:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003732:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003734:	4c1e      	ldr	r4, [pc, #120]	; (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800373c:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 800373e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003740:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003742:	d026      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8003744:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003748:	42a2      	cmp	r2, r4
 800374a:	d022      	beq.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800374c:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800374e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003756:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003758:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800375c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800375e:	d00a      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 8003762:	429a      	cmp	r2, r3
 8003764:	d007      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376a:	429a      	cmp	r2, r3
 800376c:	d003      	beq.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800376e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8003772:	429a      	cmp	r2, r3
 8003774:	d104      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003776:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003778:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800377c:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800377e:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003780:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003782:	2201      	movs	r2, #1
 8003784:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003788:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800378c:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800378e:	4618      	mov	r0, r3
}
 8003790:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003792:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003796:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800379a:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800379c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80037a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a4:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 80037a6:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a8:	e7e5      	b.n	8003776 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  __HAL_LOCK(htim);
 80037aa:	2002      	movs	r0, #2
}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40012c00 	.word	0x40012c00
 80037b4:	40000400 	.word	0x40000400

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4d0d      	ldr	r5, [pc, #52]	; (80037f0 <__libc_init_array+0x38>)
 80037bc:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	2600      	movs	r6, #0
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	4d0b      	ldr	r5, [pc, #44]	; (80037f8 <__libc_init_array+0x40>)
 80037ca:	4c0c      	ldr	r4, [pc, #48]	; (80037fc <__libc_init_array+0x44>)
 80037cc:	f000 f820 	bl	8003810 <_init>
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	2600      	movs	r6, #0
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	08004038 	.word	0x08004038
 80037f4:	08004038 	.word	0x08004038
 80037f8:	08004038 	.word	0x08004038
 80037fc:	0800403c 	.word	0x0800403c

08003800 <memset>:
 8003800:	4402      	add	r2, r0
 8003802:	4603      	mov	r3, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
