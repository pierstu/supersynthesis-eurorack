
2OPFM_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002348  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080024d0  080024d0  000124d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cd0  08002cd0  0002080c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cd0  08002cd0  0002080c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cd0  08002cd0  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cd0  08002cd0  00012cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000080c  20000000  08002cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  2000080c  080034e4  0002080c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c8c  080034e4  00020c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017454  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300d  00000000  00000000  00037c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00006d03  00000000  00000000  0003ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  000419a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  000420c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e745  00000000  00000000  00043610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f814  00000000  00000000  00061d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adbe0  00000000  00000000  00071569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011f149  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014a4  00000000  00000000  0011f19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000080c 	.word	0x2000080c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024b8 	.word	0x080024b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000810 	.word	0x20000810
 80001c4:	080024b8 	.word	0x080024b8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__gedf2>:
 8000540:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000544:	e006      	b.n	8000554 <__cmpdf2+0x4>
 8000546:	bf00      	nop

08000548 <__ledf2>:
 8000548:	f04f 0c01 	mov.w	ip, #1
 800054c:	e002      	b.n	8000554 <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__cmpdf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000558:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800055c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000560:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000564:	bf18      	it	ne
 8000566:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800056a:	d01b      	beq.n	80005a4 <__cmpdf2+0x54>
 800056c:	b001      	add	sp, #4
 800056e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000572:	bf0c      	ite	eq
 8000574:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000578:	ea91 0f03 	teqne	r1, r3
 800057c:	bf02      	ittt	eq
 800057e:	ea90 0f02 	teqeq	r0, r2
 8000582:	2000      	moveq	r0, #0
 8000584:	4770      	bxeq	lr
 8000586:	f110 0f00 	cmn.w	r0, #0
 800058a:	ea91 0f03 	teq	r1, r3
 800058e:	bf58      	it	pl
 8000590:	4299      	cmppl	r1, r3
 8000592:	bf08      	it	eq
 8000594:	4290      	cmpeq	r0, r2
 8000596:	bf2c      	ite	cs
 8000598:	17d8      	asrcs	r0, r3, #31
 800059a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800059e:	f040 0001 	orr.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005ac:	d102      	bne.n	80005b4 <__cmpdf2+0x64>
 80005ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005b2:	d107      	bne.n	80005c4 <__cmpdf2+0x74>
 80005b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d1d6      	bne.n	800056c <__cmpdf2+0x1c>
 80005be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005c2:	d0d3      	beq.n	800056c <__cmpdf2+0x1c>
 80005c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <__aeabi_cdrcmple>:
 80005cc:	4684      	mov	ip, r0
 80005ce:	4610      	mov	r0, r2
 80005d0:	4662      	mov	r2, ip
 80005d2:	468c      	mov	ip, r1
 80005d4:	4619      	mov	r1, r3
 80005d6:	4663      	mov	r3, ip
 80005d8:	e000      	b.n	80005dc <__aeabi_cdcmpeq>
 80005da:	bf00      	nop

080005dc <__aeabi_cdcmpeq>:
 80005dc:	b501      	push	{r0, lr}
 80005de:	f7ff ffb7 	bl	8000550 <__cmpdf2>
 80005e2:	2800      	cmp	r0, #0
 80005e4:	bf48      	it	mi
 80005e6:	f110 0f00 	cmnmi.w	r0, #0
 80005ea:	bd01      	pop	{r0, pc}

080005ec <__aeabi_dcmpeq>:
 80005ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f0:	f7ff fff4 	bl	80005dc <__aeabi_cdcmpeq>
 80005f4:	bf0c      	ite	eq
 80005f6:	2001      	moveq	r0, #1
 80005f8:	2000      	movne	r0, #0
 80005fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fe:	bf00      	nop

08000600 <__aeabi_dcmplt>:
 8000600:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000604:	f7ff ffea 	bl	80005dc <__aeabi_cdcmpeq>
 8000608:	bf34      	ite	cc
 800060a:	2001      	movcc	r0, #1
 800060c:	2000      	movcs	r0, #0
 800060e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000612:	bf00      	nop

08000614 <__aeabi_dcmple>:
 8000614:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000618:	f7ff ffe0 	bl	80005dc <__aeabi_cdcmpeq>
 800061c:	bf94      	ite	ls
 800061e:	2001      	movls	r0, #1
 8000620:	2000      	movhi	r0, #0
 8000622:	f85d fb08 	ldr.w	pc, [sp], #8
 8000626:	bf00      	nop

08000628 <__aeabi_dcmpge>:
 8000628:	f84d ed08 	str.w	lr, [sp, #-8]!
 800062c:	f7ff ffce 	bl	80005cc <__aeabi_cdrcmple>
 8000630:	bf94      	ite	ls
 8000632:	2001      	movls	r0, #1
 8000634:	2000      	movhi	r0, #0
 8000636:	f85d fb08 	ldr.w	pc, [sp], #8
 800063a:	bf00      	nop

0800063c <__aeabi_dcmpgt>:
 800063c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000640:	f7ff ffc4 	bl	80005cc <__aeabi_cdrcmple>
 8000644:	bf34      	ite	cc
 8000646:	2001      	movcc	r0, #1
 8000648:	2000      	movcs	r0, #0
 800064a:	f85d fb08 	ldr.w	pc, [sp], #8
 800064e:	bf00      	nop

08000650 <adsr_structinit>:
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0 };

void adsr_structinit(soft_adsr *adsr) {
	adsr->output = ENV_INIT;
	adsr->attack = 0.0f;
 8000650:	2300      	movs	r3, #0
void adsr_structinit(soft_adsr *adsr) {
 8000652:	b410      	push	{r4}
	adsr->output = ENV_INIT;
 8000654:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	adsr->decay = 0.0f;
	adsr->sustain = 0.0f;
	adsr->release = 0.0f;
	adsr->stage = OFF;
 8000658:	2403      	movs	r4, #3
	adsr->rate = 0.0f;
	adsr->rate_offset = 0.0f;
	adsr->cutoff = 0.0f;
	adsr->target = ENV_INIT;
	adsr->one_shot = 0;
 800065a:	2100      	movs	r1, #0
	adsr->output = ENV_INIT;
 800065c:	6002      	str	r2, [r0, #0]
	adsr->attack = 0.0f;
 800065e:	6203      	str	r3, [r0, #32]
	adsr->decay = 0.0f;
 8000660:	6243      	str	r3, [r0, #36]	; 0x24
	adsr->sustain = 0.0f;
 8000662:	6283      	str	r3, [r0, #40]	; 0x28
	adsr->release = 0.0f;
 8000664:	62c3      	str	r3, [r0, #44]	; 0x2c
	adsr->stage = OFF;
 8000666:	7104      	strb	r4, [r0, #4]
	adsr->rate = 0.0f;
 8000668:	6083      	str	r3, [r0, #8]
}
 800066a:	f85d 4b04 	ldr.w	r4, [sp], #4
	adsr->rate_offset = 0.0f;
 800066e:	60c3      	str	r3, [r0, #12]
	adsr->cutoff = 0.0f;
 8000670:	6183      	str	r3, [r0, #24]
	adsr->target = ENV_INIT;
 8000672:	61c2      	str	r2, [r0, #28]
	adsr->one_shot = 0;
 8000674:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	0000      	movs	r0, r0
	...

08000680 <run_linear_a_expo_r>:
}

void run_linear_a_expo_r(soft_adsr *adsr) {
	//one shot style smooth attack

	if (adsr->output < 0.01f) {
 8000680:	ed90 7a00 	vldr	s14, [r0]
 8000684:	eddf 7a36 	vldr	s15, [pc, #216]	; 8000760 <run_linear_a_expo_r+0xe0>
void run_linear_a_expo_r(soft_adsr *adsr) {
 8000688:	b510      	push	{r4, lr}
	if (adsr->output < 0.01f) {
 800068a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800068e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		adsr->one_shot = 0;
 8000692:	bf44      	itt	mi
 8000694:	2300      	movmi	r3, #0
 8000696:	f880 3030 	strbmi.w	r3, [r0, #48]	; 0x30
	}

	if (adsr->stage == ATTACK) {
 800069a:	7903      	ldrb	r3, [r0, #4]
void run_linear_a_expo_r(soft_adsr *adsr) {
 800069c:	4604      	mov	r4, r0
	if (adsr->stage == ATTACK) {
 800069e:	b9db      	cbnz	r3, 80006d8 <run_linear_a_expo_r+0x58>

		adsr->output += SMOOTH_ATTACK_INCREMENT;
 80006a0:	edd0 7a00 	vldr	s15, [r0]
 80006a4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8000764 <run_linear_a_expo_r+0xe4>
		adsr->rate = adsr->attack + adsr->attack_offset;
		//attack threshold
		if (adsr->output > 0.95f) {
 80006a8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8000768 <run_linear_a_expo_r+0xe8>
		adsr->output += SMOOTH_ATTACK_INCREMENT;
 80006ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006b0:	edc0 7a00 	vstr	s15, [r0]
		adsr->rate = adsr->attack + adsr->attack_offset;
 80006b4:	edd0 7a08 	vldr	s15, [r0, #32]
 80006b8:	edd0 6a04 	vldr	s13, [r0, #16]
 80006bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006c0:	edc0 7a02 	vstr	s15, [r0, #8]
		if (adsr->output > 0.95f) {
 80006c4:	edd0 7a00 	vldr	s15, [r0]
 80006c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d0:	dd01      	ble.n	80006d6 <run_linear_a_expo_r+0x56>
			adsr->stage = RELEASE;
 80006d2:	2302      	movs	r3, #2
 80006d4:	7103      	strb	r3, [r0, #4]
			adsr->cutoff = 0;
		}

		adsr->output += (adsr->target - adsr->output) * adsr->cutoff;
	}
}
 80006d6:	bd10      	pop	{r4, pc}
		if (adsr->stage == RELEASE) {
 80006d8:	7903      	ldrb	r3, [r0, #4]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d02e      	beq.n	800073c <run_linear_a_expo_r+0xbc>
		adsr->cutoff = (adsr->rate + adsr->rate_offset) * 0.1f;
 80006de:	edd4 7a02 	vldr	s15, [r4, #8]
 80006e2:	edd4 6a03 	vldr	s13, [r4, #12]
 80006e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000764 <run_linear_a_expo_r+0xe4>
 80006ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80006ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f2:	edc4 7a06 	vstr	s15, [r4, #24]
		if (adsr->cutoff > 0.99) {
 80006f6:	69a0      	ldr	r0, [r4, #24]
 80006f8:	f7ff feca 	bl	8000490 <__aeabi_f2d>
 80006fc:	a316      	add	r3, pc, #88	; (adr r3, 8000758 <run_linear_a_expo_r+0xd8>)
 80006fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000702:	f7ff ff9b 	bl	800063c <__aeabi_dcmpgt>
 8000706:	b108      	cbz	r0, 800070c <run_linear_a_expo_r+0x8c>
			adsr->cutoff = 0.99;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <run_linear_a_expo_r+0xec>)
 800070a:	61a3      	str	r3, [r4, #24]
		if (adsr->cutoff < 0.0) {
 800070c:	edd4 7a06 	vldr	s15, [r4, #24]
 8000710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000714:	2300      	movs	r3, #0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			adsr->cutoff = 0;
 800071a:	bf48      	it	mi
 800071c:	61a3      	strmi	r3, [r4, #24]
		adsr->output += (adsr->target - adsr->output) * adsr->cutoff;
 800071e:	ed94 7a07 	vldr	s14, [r4, #28]
 8000722:	ed94 6a00 	vldr	s12, [r4]
 8000726:	edd4 6a06 	vldr	s13, [r4, #24]
 800072a:	edd4 7a00 	vldr	s15, [r4]
 800072e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8000732:	eee7 7a26 	vfma.f32	s15, s14, s13
 8000736:	edc4 7a00 	vstr	s15, [r4]
}
 800073a:	bd10      	pop	{r4, pc}
			adsr->rate = adsr->release + adsr->release_offset;
 800073c:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8000740:	ed90 7a05 	vldr	s14, [r0, #20]
 8000744:	ee77 7a87 	vadd.f32	s15, s15, s14
			adsr->target = 0.0f;
 8000748:	2300      	movs	r3, #0
			adsr->rate = adsr->release + adsr->release_offset;
 800074a:	edc0 7a02 	vstr	s15, [r0, #8]
			adsr->target = 0.0f;
 800074e:	61c3      	str	r3, [r0, #28]
 8000750:	e7c5      	b.n	80006de <run_linear_a_expo_r+0x5e>
 8000752:	bf00      	nop
 8000754:	f3af 8000 	nop.w
 8000758:	7ae147ae 	.word	0x7ae147ae
 800075c:	3fefae14 	.word	0x3fefae14
 8000760:	3c23d70a 	.word	0x3c23d70a
 8000764:	3dcccccd 	.word	0x3dcccccd
 8000768:	3f733333 	.word	0x3f733333
 800076c:	3f7d70a4 	.word	0x3f7d70a4

08000770 <check_gate>:
	OP->amplitude = 1.0f;
	OP->frequency = 440.0f;
	OP->phase_increment = ((4294967295) * (OP->frequency)) / 44100.0f;
}

void check_gate() {
 8000770:	b510      	push	{r4, lr}
	//read gate
	gate = !HAL_GPIO_ReadPin(GATE_PORT, GATE_PIN);
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f001 fd46 	bl	8002208 <HAL_GPIO_ReadPin>

	//if low to high transition occurs
	if (gate) {
		if (!last_gate) {
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <check_gate+0x30>)
	gate = !HAL_GPIO_ReadPin(GATE_PORT, GATE_PIN);
 800077e:	4909      	ldr	r1, [pc, #36]	; (80007a4 <check_gate+0x34>)
		if (!last_gate) {
 8000780:	7814      	ldrb	r4, [r2, #0]
	gate = !HAL_GPIO_ReadPin(GATE_PORT, GATE_PIN);
 8000782:	fab0 f380 	clz	r3, r0
		if (!last_gate) {
 8000786:	4320      	orrs	r0, r4
	gate = !HAL_GPIO_ReadPin(GATE_PORT, GATE_PIN);
 8000788:	095b      	lsrs	r3, r3, #5
		if (!last_gate) {
 800078a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	gate = !HAL_GPIO_ReadPin(GATE_PORT, GATE_PIN);
 800078e:	700b      	strb	r3, [r1, #0]
		if (!last_gate) {
 8000790:	d103      	bne.n	800079a <check_gate+0x2a>
			OP1.ADSR.stage = RELEASE;
			OP1.ADSR.one_shot = 0;
#else
			//OP1.phase_index = 0;
			//OP2.phase_index = 0;
			OP1.ADSR.stage = ATTACK;
 8000792:	4905      	ldr	r1, [pc, #20]	; (80007a8 <check_gate+0x38>)
 8000794:	7708      	strb	r0, [r1, #28]
			//OP1.ADSR.output = 1.0f;
			OP1.ADSR.one_shot = 0;
 8000796:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
#endif

		}
	}

	last_gate = gate;
 800079a:	7013      	strb	r3, [r2, #0]

}
 800079c:	bd10      	pop	{r4, pc}
 800079e:	bf00      	nop
 80007a0:	200008ab 	.word	0x200008ab
 80007a4:	2000088c 	.word	0x2000088c
 80007a8:	2000083c 	.word	0x2000083c

080007ac <set_adsr_parameters>:

void set_adsr_parameters(soft_adsr *adsr) {
	adsr->rate_offset = 0.0005f;
	adsr->attack = 7.0f;

	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <set_adsr_parameters+0x6c>)
 80007ae:	491b      	ldr	r1, [pc, #108]	; (800081c <set_adsr_parameters+0x70>)

	int16_t jin_offset;
	jin_offset = adc_data_10b[DECAY_SLIDER] - (adc_data_10b[DECAY_JACK] - 495);
 80007b0:	8953      	ldrh	r3, [r2, #10]
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007b2:	8812      	ldrh	r2, [r2, #0]
		jin_offset = 0;
	}
	if (jin_offset > 1023) {
		jin_offset = 1023;
	}
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007b4:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 8000820 <set_adsr_parameters+0x74>
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007b8:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 80007bc:	eddf 5a19 	vldr	s11, [pc, #100]	; 8000824 <set_adsr_parameters+0x78>
	adsr->release = (decay_sum) / 100000.0f;
 80007c0:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8000828 <set_adsr_parameters+0x7c>
	jin_offset = adc_data_10b[DECAY_SLIDER] - (adc_data_10b[DECAY_JACK] - 495);
 80007c4:	f203 13ef 	addw	r3, r3, #495	; 0x1ef
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	b21b      	sxth	r3, r3
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007cc:	f383 030a 	usat	r3, #10, r3
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <set_adsr_parameters+0x80>)
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007d2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007d6:	edd2 6a00 	vldr	s13, [r2]
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007da:	4915      	ldr	r1, [pc, #84]	; (8000830 <set_adsr_parameters+0x84>)
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007dc:	ee07 ca10 	vmov	s14, ip
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007e0:	ee07 3a90 	vmov	s15, r3
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007ec:	ee37 7a66 	vsub.f32	s14, s14, s13
	decay_sum = expo_lut[jin_offset] + 100.0f;
 80007f0:	ee77 7a85 	vadd.f32	s15, s15, s10
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 80007f4:	eee7 6a25 	vfma.f32	s13, s14, s11
void set_adsr_parameters(soft_adsr *adsr) {
 80007f8:	b410      	push	{r4}
	adsr->release = (decay_sum) / 100000.0f;
 80007fa:	ee27 7a86 	vmul.f32	s14, s15, s12
	adsr->rate_offset = 0.0005f;
 80007fe:	4c0d      	ldr	r4, [pc, #52]	; (8000834 <set_adsr_parameters+0x88>)
	adsr->attack = 7.0f;
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <set_adsr_parameters+0x8c>)
	adsr->rate_offset = 0.0005f;
 8000802:	60c4      	str	r4, [r0, #12]
	decay_sum = expo_lut[jin_offset] + 100.0f;
 8000804:	edc1 7a00 	vstr	s15, [r1]
	adsr->attack = 7.0f;
 8000808:	6203      	str	r3, [r0, #32]

}
 800080a:	f85d 4b04 	ldr.w	r4, [sp], #4
	filtered_decay_jack += (expo_lut[adc_data_10b[DECAY_JACK]] - filtered_decay_jack) * 0.02f;
 800080e:	edc2 6a00 	vstr	s13, [r2]
	adsr->release = (decay_sum) / 100000.0f;
 8000812:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
}
 8000816:	4770      	bx	lr
 8000818:	200008b4 	.word	0x200008b4
 800081c:	20000000 	.word	0x20000000
 8000820:	42c80000 	.word	0x42c80000
 8000824:	3ca3d70a 	.word	0x3ca3d70a
 8000828:	3727c5ac 	.word	0x3727c5ac
 800082c:	20000890 	.word	0x20000890
 8000830:	200008ac 	.word	0x200008ac
 8000834:	3a03126f 	.word	0x3a03126f
 8000838:	40e00000 	.word	0x40e00000

0800083c <main_2OP_loop>:
	set_adsr_parameters(&OP1.ADSR);
}


//fast interrupt for audio
void main_2OP_loop() {
 800083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	ENV_OFFSET += (((((960 - adc_data_10b[FM_JACK]) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 800083e:	4c95      	ldr	r4, [pc, #596]	; (8000a94 <main_2OP_loop+0x258>)
 8000840:	4a95      	ldr	r2, [pc, #596]	; (8000a98 <main_2OP_loop+0x25c>)
 8000842:	8863      	ldrh	r3, [r4, #2]
 8000844:	edd2 7a00 	vldr	s15, [r2]
 8000848:	ed9f 5a94 	vldr	s10, [pc, #592]	; 8000a9c <main_2OP_loop+0x260>
 800084c:	eddf 5a94 	vldr	s11, [pc, #592]	; 8000aa0 <main_2OP_loop+0x264>

	ENV_AMT = (adc_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 8000850:	8921      	ldrh	r1, [r4, #8]
 8000852:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8000aa4 <main_2OP_loop+0x268>
	ENV_OFFSET += (((((960 - adc_data_10b[FM_JACK]) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 8000856:	f5c3 73e0 	rsb	r3, r3, #448	; 0x1c0
 800085a:	ee07 3a10 	vmov	s14, r3
 800085e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000862:	eef0 4a67 	vmov.f32	s9, s15
 8000866:	eed7 4a05 	vfnms.f32	s9, s14, s10
	ENV_AMT = (adc_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 800086a:	ee06 1a90 	vmov	s13, r1
	ENV_OFFSET += (((((960 - adc_data_10b[FM_JACK]) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 800086e:	eee4 7aa5 	vfma.f32	s15, s9, s11
	ENV_AMT = (adc_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 8000872:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000876:	eeb0 7a67 	vmov.f32	s14, s15
 800087a:	eea6 7a86 	vfma.f32	s14, s13, s12
	ENV_OFFSET += (((((960 - adc_data_10b[FM_JACK]) - 512)) / 512.0f) - ENV_OFFSET) * 0.01f;
 800087e:	edc2 7a00 	vstr	s15, [r2]

	if (ENV_AMT < 0.0f) {
 8000882:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	f100 80f8 	bmi.w	8000a7e <main_2OP_loop+0x242>
	ENV_AMT = (adc_data_10b[FM_SLIDER] / 1600.0f) + ENV_OFFSET;
 800088e:	4e86      	ldr	r6, [pc, #536]	; (8000aa8 <main_2OP_loop+0x26c>)
 8000890:	ed86 7a00 	vstr	s14, [r6]
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;

#ifdef KHZ_PRE_FILTER

	//khz input, 1p filter
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 8000894:	4a85      	ldr	r2, [pc, #532]	; (8000aac <main_2OP_loop+0x270>)
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 8000896:	88e3      	ldrh	r3, [r4, #6]
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 8000898:	8812      	ldrh	r2, [r2, #0]
 800089a:	4985      	ldr	r1, [pc, #532]	; (8000ab0 <main_2OP_loop+0x274>)
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 800089c:	4d85      	ldr	r5, [pc, #532]	; (8000ab4 <main_2OP_loop+0x278>)
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 800089e:	ed91 0a00 	vldr	s0, [r1]
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008a2:	edd5 6a00 	vldr	s13, [r5]
 80008a6:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8000ab8 <main_2OP_loop+0x27c>
	//khz input, 2p adaptive filter
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 80008aa:	4884      	ldr	r0, [pc, #528]	; (8000abc <main_2OP_loop+0x280>)
#else
	//khz input, 2p adaptive filter
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (voct_data[0] - 2048)) * KHZ_IN_SCALING;
#endif

	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 80008ac:	4f84      	ldr	r7, [pc, #528]	; (8000ac0 <main_2OP_loop+0x284>)
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008ae:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008b2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008b6:	3303      	adds	r3, #3
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008b8:	ee07 2a10 	vmov	s14, r2
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008bc:	ee07 3a90 	vmov	s15, r3
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008c8:	ee37 7a40 	vsub.f32	s14, s14, s0
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008d0:	eea7 0a06 	vfma.f32	s0, s14, s12
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008d4:	eee7 6a86 	vfma.f32	s13, s15, s12
	filtered_khz_in += ((voct_data[0] - 2048) - filtered_khz_in) * 0.05f;
 80008d8:	ed81 0a00 	vstr	s0, [r1]
	khz_pot += ((1023 - adc_data_10b[KHZ_POT]) - khz_pot) * 0.05f;
 80008dc:	edc5 6a00 	vstr	s13, [r5]
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 80008e0:	f000 f93e 	bl	8000b60 <dynamic_smooth_tick>
 80008e4:	4b77      	ldr	r3, [pc, #476]	; (8000ac4 <main_2OP_loop+0x288>)

	//filtered fm ratio
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 80008e6:	4a78      	ldr	r2, [pc, #480]	; (8000ac8 <main_2OP_loop+0x28c>)
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 80008e8:	ed93 7a00 	vldr	s14, [r3]
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 80008ec:	88a3      	ldrh	r3, [r4, #4]
 80008ee:	ed92 6a00 	vldr	s12, [r2]
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 80008f2:	edd7 5a00 	vldr	s11, [r7]
 80008f6:	ed95 5a00 	vldr	s10, [r5]
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 80008fa:	eddf 3a74 	vldr	s7, [pc, #464]	; 8000acc <main_2OP_loop+0x290>
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 80008fe:	ed9f 4a74 	vldr	s8, [pc, #464]	; 8000ad0 <main_2OP_loop+0x294>
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000902:	eddf 4a67 	vldr	s9, [pc, #412]	; 8000aa0 <main_2OP_loop+0x264>
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));

	if (adc_data_10b[DECAY_SLIDER] > 1000) {
 8000906:	f8b4 c00a 	ldrh.w	ip, [r4, #10]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 800090a:	4c72      	ldr	r4, [pc, #456]	; (8000ad4 <main_2OP_loop+0x298>)
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 800090c:	eddf 6a72 	vldr	s13, [pc, #456]	; 8000ad8 <main_2OP_loop+0x29c>
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000910:	eddf 7a72 	vldr	s15, [pc, #456]	; 8000adc <main_2OP_loop+0x2a0>
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 8000914:	4972      	ldr	r1, [pc, #456]	; (8000ae0 <main_2OP_loop+0x2a4>)
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 8000916:	4873      	ldr	r0, [pc, #460]	; (8000ae4 <main_2OP_loop+0x2a8>)
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 8000918:	eeb5 3a00 	vmov.f32	s6, #80	; 0x3e800000  0.250
 800091c:	ee27 7a03 	vmul.f32	s14, s14, s6
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000920:	eeb0 3a46 	vmov.f32	s6, s12
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 8000924:	ee27 0a00 	vmul.f32	s0, s14, s0
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000928:	ee07 3a10 	vmov	s14, r3
 800092c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000930:	ee35 5a65 	vsub.f32	s10, s10, s11
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000934:	ee97 3a23 	vfnms.f32	s6, s14, s7
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 8000938:	4b6b      	ldr	r3, [pc, #428]	; (8000ae8 <main_2OP_loop+0x2ac>)
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 800093a:	ee35 5a00 	vadd.f32	s10, s10, s0
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800093e:	eea3 6a24 	vfma.f32	s12, s6, s9
	if (adc_data_10b[DECAY_SLIDER] > 1000) {
 8000942:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000946:	eee5 5a04 	vfma.f32	s11, s10, s8
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 800094a:	eeb0 7a46 	vmov.f32	s14, s12
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 800094e:	eebc 6ae5 	vcvt.u32.f32	s12, s11
	khz_in = dynamic_smooth_tick(&dynamic_smooth_a, (filtered_khz_in)) * KHZ_IN_SCALING * khz_correction;
 8000952:	ed83 0a00 	vstr	s0, [r3]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 8000956:	ee16 3a10 	vmov	r3, s12
 800095a:	f3c3 0309 	ubfx	r3, r3, #0, #10
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 800095e:	ee67 6a26 	vmul.f32	s13, s14, s13
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 8000962:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
	fm_ratio += ((adc_data_10b[RATIO_POT] / 2047.0f) - fm_ratio) * 0.01f;
 8000966:	ed82 7a00 	vstr	s14, [r2]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 800096a:	ee06 3a10 	vmov	s12, r3
 800096e:	eeb8 6a46 	vcvt.f32.u32	s12, s12
	freqSum += ((khz_in + khz_pot) - freqSum) * 0.08f;
 8000972:	edc7 5a00 	vstr	s11, [r7]
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 8000976:	ee66 6a86 	vmul.f32	s13, s13, s12
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 800097a:	ee26 7a27 	vmul.f32	s14, s12, s15
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 800097e:	ee66 7aa7 	vmul.f32	s15, s13, s15
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 8000982:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 8000986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 800098a:	ee17 5a10 	vmov	r5, s14
	OP2.phase_increment = ((42949.6710f) * (OP2.frequency));
 800098e:	ee17 4a90 	vmov	r4, s15
 8000992:	edc0 7a03 	vstr	s15, [r0, #12]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000996:	edd1 7a05 	vldr	s15, [r1, #20]
	OP1.phase_increment = ((42949.6710f) * (OP1.frequency));
 800099a:	ed81 7a03 	vstr	s14, [r1, #12]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 800099e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009a2:	edd0 7a05 	vldr	s15, [r0, #20]
	OP1.frequency = expo_lut[(uint16_t) (freqSum) & 1023];
 80009a6:	ed81 6a02 	vstr	s12, [r1, #8]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009aa:	ed96 6a00 	vldr	s12, [r6]
	OP->phase_index += OP->phase_increment;
 80009ae:	690f      	ldr	r7, [r1, #16]
 80009b0:	6906      	ldr	r6, [r0, #16]
	OP2.frequency = OP1.frequency * (fm_ratio * 32.0f);
 80009b2:	edc0 6a02 	vstr	s13, [r0, #8]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009ba:	ee27 7a06 	vmul.f32	s14, s14, s12
 80009be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80009c2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80009c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		OP1.ADSR.output = 1.0f;
 80009ca:	bf88      	it	hi
 80009cc:	f04f 537e 	movhi.w	r3, #1065353216	; 0x3f800000
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009d0:	ee17 2a10 	vmov	r2, s14
		OP1.ADSR.output = 1.0f;
 80009d4:	bf88      	it	hi
 80009d6:	618b      	strhi	r3, [r1, #24]
	OP->phase_index += OP->phase_increment;
 80009d8:	443d      	add	r5, r7
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009da:	ee17 3a90 	vmov	r3, s15
	OP->phase_index += OP->phase_increment;
 80009de:	4434      	add	r4, r6
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009e0:	eb02 5295 	add.w	r2, r2, r5, lsr #22
 80009e4:	4e41      	ldr	r6, [pc, #260]	; (8000aec <main_2OP_loop+0x2b0>)
	}

	operator_run(&OP1, OP1.ADSR.output);
 80009e6:	edd1 5a06 	vldr	s11, [r1, #24]
	operator_run(&OP2, OP1.ADSR.output * OP1.ADSR.output);
 80009ea:	edd1 6a06 	vldr	s13, [r1, #24]
 80009ee:	ed91 5a06 	vldr	s10, [r1, #24]
	OP->phase_index += OP->phase_increment;
 80009f2:	6104      	str	r4, [r0, #16]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 80009f4:	eb03 5394 	add.w	r3, r3, r4, lsr #22
 80009f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80009fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a00:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000a04:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]

	OP1.modulation = (OP2.output) >> 3;

	//original
	voice1 = (OP1.output) >> 5;
 8000a08:	4e39      	ldr	r6, [pc, #228]	; (8000af0 <main_2OP_loop+0x2b4>)
	OP->phase_index += OP->phase_increment;
 8000a0a:	610d      	str	r5, [r1, #16]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a0c:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8000a10:	ee07 2a10 	vmov	s14, r2
 8000a14:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	operator_run(&OP2, OP1.ADSR.output * OP1.ADSR.output);
 8000a24:	ee66 6a85 	vmul.f32	s13, s13, s10
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a28:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000a2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a30:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a38:	ee17 2a10 	vmov	r2, s14
 8000a3c:	ee17 3a90 	vmov	r3, s15
	voice1 = (OP1.output) >> 5;
 8000a40:	1154      	asrs	r4, r2, #5
	OP1.modulation = (OP2.output) >> 3;
 8000a42:	10dd      	asrs	r5, r3, #3
	output = voice1;


	//hard clipping
	if (output > 2047) {
 8000a44:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a48:	ed81 7a00 	vstr	s14, [r1]
	voice1 = (OP1.output) >> 5;
 8000a4c:	6034      	str	r4, [r6, #0]
	OP->output = (big_sine_wave[((OP->phase_index >> 22) + (int32_t) (OP->modulation * ENV_AMT)) & 1023] - 32768) * envelope;
 8000a4e:	edc0 7a00 	vstr	s15, [r0]
	OP1.modulation = (OP2.output) >> 3;
 8000a52:	614d      	str	r5, [r1, #20]
	if (output > 2047) {
 8000a54:	db09      	blt.n	8000a6a <main_2OP_loop+0x22e>
		output = 2047;
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <main_2OP_loop+0x2b8>)
 8000a58:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	f640 70ff 	movw	r0, #4095	; 0xfff
		output = -2047;
	}

	//DAC output
	dac1_ch1((output) + 2048);
}
 8000a62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	dac1_ch1((output) + 2048);
 8000a66:	f000 b859 	b.w	8000b1c <dac1_ch1>
	if (output < -2047) {
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <main_2OP_loop+0x2bc>)
 8000a6c:	429c      	cmp	r4, r3
 8000a6e:	da0a      	bge.n	8000a86 <main_2OP_loop+0x24a>
		output = -2047;
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <main_2OP_loop+0x2b8>)
 8000a72:	2001      	movs	r0, #1
 8000a74:	6013      	str	r3, [r2, #0]
}
 8000a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	dac1_ch1((output) + 2048);
 8000a7a:	f000 b84f 	b.w	8000b1c <dac1_ch1>
		ENV_AMT = 0.0f;
 8000a7e:	4e0a      	ldr	r6, [pc, #40]	; (8000aa8 <main_2OP_loop+0x26c>)
 8000a80:	2100      	movs	r1, #0
 8000a82:	6031      	str	r1, [r6, #0]
 8000a84:	e706      	b.n	8000894 <main_2OP_loop+0x58>
	output = voice1;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <main_2OP_loop+0x2b8>)
 8000a88:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 8000a8c:	601c      	str	r4, [r3, #0]
 8000a8e:	b280      	uxth	r0, r0
 8000a90:	e7e7      	b.n	8000a62 <main_2OP_loop+0x226>
 8000a92:	bf00      	nop
 8000a94:	200008b4 	.word	0x200008b4
 8000a98:	20000834 	.word	0x20000834
 8000a9c:	3b000000 	.word	0x3b000000
 8000aa0:	3c23d70a 	.word	0x3c23d70a
 8000aa4:	3a23d70a 	.word	0x3a23d70a
 8000aa8:	20000838 	.word	0x20000838
 8000aac:	20000b5c 	.word	0x20000b5c
 8000ab0:	20000b04 	.word	0x20000b04
 8000ab4:	20000894 	.word	0x20000894
 8000ab8:	3d4ccccd 	.word	0x3d4ccccd
 8000abc:	20000adc 	.word	0x20000adc
 8000ac0:	200008a0 	.word	0x200008a0
 8000ac4:	200008a4 	.word	0x200008a4
 8000ac8:	200008c0 	.word	0x200008c0
 8000acc:	3a001002 	.word	0x3a001002
 8000ad0:	3da3d70a 	.word	0x3da3d70a
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	42000000 	.word	0x42000000
 8000adc:	4727c5ac 	.word	0x4727c5ac
 8000ae0:	2000083c 	.word	0x2000083c
 8000ae4:	20000b0c 	.word	0x20000b0c
 8000ae8:	2000082c 	.word	0x2000082c
 8000aec:	080024d0 	.word	0x080024d0
 8000af0:	20000b00 	.word	0x20000b00
 8000af4:	20000898 	.word	0x20000898
 8000af8:	fffff801 	.word	0xfffff801

08000afc <dac2_ch1>:
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000afc:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000b00:	fa93 f3a3 	rbit	r3, r3
  */
__STATIC_INLINE void LL_DAC_ConvertData12RightAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  register __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12RX_REGOFFSET_MASK));
  
  MODIFY_REG(*preg,
 8000b04:	4904      	ldr	r1, [pc, #16]	; (8000b18 <dac2_ch1+0x1c>)
 8000b06:	688b      	ldr	r3, [r1, #8]
 8000b08:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	4318      	orrs	r0, r3
 8000b12:	6088      	str	r0, [r1, #8]
#include "dac.h"
#include "main.h"

inline void dac2_ch1(uint16_t _out_val) {
	LL_DAC_ConvertData12RightAligned(DAC2, LL_DAC_CHANNEL_1, _out_val);
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40009800 	.word	0x40009800

08000b1c <dac1_ch1>:
 8000b1c:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8000b20:	fa93 f3a3 	rbit	r3, r3
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <dac1_ch1+0x1c>)
 8000b26:	688b      	ldr	r3, [r1, #8]
 8000b28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000b2c:	f023 030f 	bic.w	r3, r3, #15
 8000b30:	4318      	orrs	r0, r3
 8000b32:	6088      	str	r0, [r1, #8]

inline void dac1_ch1(uint16_t _out_val) {
	LL_DAC_ConvertData12RightAligned(DAC1, LL_DAC_CHANNEL_1, _out_val);
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40007400 	.word	0x40007400

08000b3c <dynamic_smooth_init>:
	sensitivity = _sensitivity;
	wc = basefreq / 22050.0f;
	//gc = tan(3.14f * wc);
	gc = .00000712018209f;
	_smooth->g0 = 2*gc/(1+gc);
	_smooth->sense = sensitivity * 4.0f;
 8000b3c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8000b40:	ee60 0aa7 	vmul.f32	s1, s1, s15

	//tick values
	_smooth->low1 = 0.0f;
 8000b44:	2300      	movs	r3, #0
	_smooth->g0 = 2*gc/(1+gc);
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <dynamic_smooth_init+0x20>)
 8000b48:	6002      	str	r2, [r0, #0]
	_smooth->sense = sensitivity * 4.0f;
 8000b4a:	edc0 0a01 	vstr	s1, [r0, #4]
	_smooth->low1 = 0.0f;
 8000b4e:	6083      	str	r3, [r0, #8]
	_smooth->low2 = 0.0f;
 8000b50:	60c3      	str	r3, [r0, #12]
	_smooth->low1z = 0.0f;
 8000b52:	6103      	str	r3, [r0, #16]
	_smooth->low2z = 0.0f;
 8000b54:	6143      	str	r3, [r0, #20]
	_smooth->bandz = 0.0f;
 8000b56:	6183      	str	r3, [r0, #24]
	_smooth->out = 0.0f;
 8000b58:	61c3      	str	r3, [r0, #28]
}
 8000b5a:	4770      	bx	lr
 8000b5c:	376ee976 	.word	0x376ee976

08000b60 <dynamic_smooth_tick>:

float dynamic_smooth_tick(dynamic_smooth* _smooth, float in) {
	float g;
	_smooth->low1z = _smooth->low1;
 8000b60:	ed90 7a02 	vldr	s14, [r0, #8]
	_smooth->low2z = _smooth->low2;
 8000b64:	edd0 7a03 	vldr	s15, [r0, #12]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8000b68:	ed90 5a01 	vldr	s10, [r0, #4]
 8000b6c:	edd0 6a00 	vldr	s13, [r0]
	_smooth->low1z = _smooth->low1;
 8000b70:	ed80 7a04 	vstr	s14, [r0, #16]
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8000b74:	ee37 6ac7 	vsub.f32	s12, s15, s14
	return ((a) < (b) ? a : b);
 8000b78:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
	g = cm_min(_smooth->g0 + _smooth->sense*cm_abs(_smooth->bandz), 1.0f);
 8000b7c:	eef0 4ac6 	vabs.f32	s9, s12
 8000b80:	eee4 6a85 	vfma.f32	s13, s9, s10
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000b84:	ee30 0a47 	vsub.f32	s0, s0, s14
	return ((a) < (b) ? a : b);
 8000b88:	eef4 6ae5 	vcmpe.f32	s13, s11
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	bf88      	it	hi
 8000b92:	eef0 6a65 	vmovhi.f32	s13, s11
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000b96:	eea0 7a26 	vfma.f32	s14, s0, s13
	_smooth->low2z = _smooth->low2;
 8000b9a:	edc0 7a05 	vstr	s15, [r0, #20]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000b9e:	ee77 5a67 	vsub.f32	s11, s14, s15
	_smooth->bandz = _smooth->low2z - _smooth->low1z;
 8000ba2:	ed80 6a06 	vstr	s12, [r0, #24]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000ba6:	eee5 7aa6 	vfma.f32	s15, s11, s13
	_smooth->low1 = _smooth->low1z + g*(in-_smooth->low1z);
 8000baa:	ed80 7a02 	vstr	s14, [r0, #8]
	_smooth->low2 = _smooth->low2z + g*(_smooth->low1 - _smooth->low2z);
 8000bae:	eeb0 0a67 	vmov.f32	s0, s15
 8000bb2:	edc0 7a03 	vstr	s15, [r0, #12]

	return _smooth->low2;
}
 8000bb6:	4770      	bx	lr

08000bb8 <loop>:
 */

#include "loop.h"
#include "main.h"

void loop(void) {
 8000bb8:	b538      	push	{r3, r4, r5, lr}
	//dac1_ch1(ramp);
	dac2_ch1(2047);
 8000bba:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8000bbe:	f7ff ff9d 	bl	8000afc <dac2_ch1>
	vdd_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adc_data[6],LL_ADC_RESOLUTION_12B);
 8000bc2:	4911      	ldr	r1, [pc, #68]	; (8000c08 <loop+0x50>)
	vdd_cal = (uint32_t)(*VREFINT_CAL_ADDR);
	khz_correction = vdd_mv / 3300.0f;
	khz_in_mv = voct_data[0] * 3300 >> 12;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <loop+0x54>)
	vdd_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adc_data[6],LL_ADC_RESOLUTION_12B);
 8000bc6:	880a      	ldrh	r2, [r1, #0]
 8000bc8:	4811      	ldr	r0, [pc, #68]	; (8000c10 <loop+0x58>)
	khz_in_mv = voct_data[0] * 3300 >> 12;
 8000bca:	881c      	ldrh	r4, [r3, #0]
	vdd_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adc_data[6],LL_ADC_RESOLUTION_12B);
 8000bcc:	8985      	ldrh	r5, [r0, #12]
	khz_correction = vdd_mv / 3300.0f;
 8000bce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000c14 <loop+0x5c>
	vdd_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adc_data[6],LL_ADC_RESOLUTION_12B);
 8000bd2:	4811      	ldr	r0, [pc, #68]	; (8000c18 <loop+0x60>)
 8000bd4:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000bd8:	fb03 f202 	mul.w	r2, r3, r2
 8000bdc:	fbb2 f2f5 	udiv	r2, r2, r5
	khz_correction = vdd_mv / 3300.0f;
 8000be0:	b295      	uxth	r5, r2
 8000be2:	ee07 5a90 	vmov	s15, r5
 8000be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	vdd_mv = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adc_data[6],LL_ADC_RESOLUTION_12B);
 8000bea:	8002      	strh	r2, [r0, #0]
	vdd_cal = (uint32_t)(*VREFINT_CAL_ADDR);
 8000bec:	4d0b      	ldr	r5, [pc, #44]	; (8000c1c <loop+0x64>)
	khz_in_mv = voct_data[0] * 3300 >> 12;
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <loop+0x68>)
	khz_correction = vdd_mv / 3300.0f;
 8000bf0:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <loop+0x6c>)
	vdd_cal = (uint32_t)(*VREFINT_CAL_ADDR);
 8000bf2:	8809      	ldrh	r1, [r1, #0]
 8000bf4:	6029      	str	r1, [r5, #0]
	khz_correction = vdd_mv / 3300.0f;
 8000bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
	khz_in_mv = voct_data[0] * 3300 >> 12;
 8000bfa:	fb03 f304 	mul.w	r3, r3, r4
 8000bfe:	131b      	asrs	r3, r3, #12
 8000c00:	8003      	strh	r3, [r0, #0]
	khz_correction = vdd_mv / 3300.0f;
 8000c02:	edc2 7a00 	vstr	s15, [r2]
}
 8000c06:	bd38      	pop	{r3, r4, r5, pc}
 8000c08:	1ffff7ba 	.word	0x1ffff7ba
 8000c0c:	20000b5c 	.word	0x20000b5c
 8000c10:	200008c4 	.word	0x200008c4
 8000c14:	399ee00a 	.word	0x399ee00a
 8000c18:	2000088e 	.word	0x2000088e
 8000c1c:	20000afc 	.word	0x20000afc
 8000c20:	20000830 	.word	0x20000830
 8000c24:	200008a4 	.word	0x200008a4

08000c28 <SystemClock_Config>:
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c28:	4929      	ldr	r1, [pc, #164]	; (8000cd0 <SystemClock_Config+0xa8>)
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000c2a:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <SystemClock_Config+0xac>)
 8000c2c:	680a      	ldr	r2, [r1, #0]
 8000c2e:	f022 0207 	bic.w	r2, r2, #7
 8000c32:	f042 0202 	orr.w	r2, r2, #2

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c36:	b510      	push	{r4, lr}
 8000c38:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c3a:	680a      	ldr	r2, [r1, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	f042 0201 	orr.w	r2, r2, #1
 8000c42:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000c44:	681a      	ldr	r2, [r3, #0]
		Error_Handler();
	}
	LL_RCC_HSI_Enable();

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 8000c46:	0792      	lsls	r2, r2, #30
 8000c48:	d5fc      	bpl.n	8000c44 <SystemClock_Config+0x1c>
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c4a:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <SystemClock_Config+0xac>)
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000c4e:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 8000c52:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000c56:	6019      	str	r1, [r3, #0]
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8000c58:	6859      	ldr	r1, [r3, #4]
 8000c5a:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
 8000c5e:	f441 1160 	orr.w	r1, r1, #3670016	; 0x380000
 8000c62:	6059      	str	r1, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c66:	f021 010f 	bic.w	r1, r1, #15
 8000c6a:	62d9      	str	r1, [r3, #44]	; 0x2c
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c6c:	6819      	ldr	r1, [r3, #0]
 8000c6e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000c72:	6019      	str	r1, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c74:	6813      	ldr	r3, [r2, #0]
	LL_RCC_HSI_SetCalibTrimming(16);
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
	LL_RCC_PLL_Enable();

	/* Wait till PLL is ready */
	while (LL_RCC_PLL_IsReady() != 1) {
 8000c76:	019b      	lsls	r3, r3, #6
 8000c78:	d5fc      	bpl.n	8000c74 <SystemClock_Config+0x4c>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c7a:	6853      	ldr	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000c7c:	4c15      	ldr	r4, [pc, #84]	; (8000cd4 <SystemClock_Config+0xac>)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c82:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000c84:	6853      	ldr	r3, [r2, #4]
 8000c86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000c90:	6853      	ldr	r3, [r2, #4]
 8000c92:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c96:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000c98:	6853      	ldr	r3, [r2, #4]
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0302 	orr.w	r3, r3, #2
 8000ca2:	6053      	str	r3, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ca4:	6863      	ldr	r3, [r4, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d1fa      	bne.n	8000ca4 <SystemClock_Config+0x7c>

	}
	LL_SetSystemCoreClock(64000000);
 8000cae:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <SystemClock_Config+0xb0>)
 8000cb0:	f001 fbd8 	bl	8002464 <LL_SetSystemCoreClock>

	/* Update the time base */
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fc19 	bl	80014ec <HAL_InitTick>
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_TIM1SW << (TIMxSource >> 27U)), (TIMxSource & 0x03FFFFFFU));
 8000cba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cc0:	6323      	str	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_ADCPRE12, ADCxSource);
 8000cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cc4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
		Error_Handler();
	};
	LL_RCC_SetTIMClockSource(LL_RCC_TIM1_CLKSOURCE_PCLK2);
	LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSRC_PLL_DIV_1);
}
 8000cce:	bd10      	pop	{r4, pc}
 8000cd0:	40022000 	.word	0x40022000
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	03d09000 	.word	0x03d09000

08000cdc <main>:
int main(void) {
 8000cdc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ce0:	2400      	movs	r4, #0
int main(void) {
 8000ce2:	b095      	sub	sp, #84	; 0x54
	HAL_Init();
 8000ce4:	f000 fc26 	bl	8001534 <HAL_Init>
	SystemClock_Config();
 8000ce8:	f7ff ff9e 	bl	8000c28 <SystemClock_Config>
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cec:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000cf0:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cf4:	4dc9      	ldr	r5, [pc, #804]	; (800101c <main+0x340>)
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf6:	4eca      	ldr	r6, [pc, #808]	; (8001020 <main+0x344>)
 8000cf8:	696a      	ldr	r2, [r5, #20]
	LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000cfa:	f8df b33c 	ldr.w	fp, [pc, #828]	; 8001038 <main+0x35c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfe:	f8df a33c 	ldr.w	sl, [pc, #828]	; 800103c <main+0x360>
 8000d02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000d06:	616a      	str	r2, [r5, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d08:	696a      	ldr	r2, [r5, #20]
 8000d0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000d0e:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
 8000d10:	9a08      	ldr	r2, [sp, #32]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d12:	696a      	ldr	r2, [r5, #20]
 8000d14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000d18:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d1a:	696a      	ldr	r2, [r5, #20]
 8000d1c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d20:	2701      	movs	r7, #1
 8000d22:	9209      	str	r2, [sp, #36]	; 0x24
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000d26:	f04f 0880 	mov.w	r8, #128	; 0x80
 8000d2a:	f04f 0900 	mov.w	r9, #0
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000d32:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  (void)tmpreg;
 8000d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d38:	9712      	str	r7, [sp, #72]	; 0x48
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f001 fa9b 	bl	8002274 <LL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d3e:	696a      	ldr	r2, [r5, #20]
 8000d40:	433a      	orrs	r2, r7
 8000d42:	616a      	str	r2, [r5, #20]
 8000d44:	696a      	ldr	r2, [r5, #20]
 8000d46:	403a      	ands	r2, r7
 8000d48:	9207      	str	r2, [sp, #28]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000d50:	f8dd c01c 	ldr.w	ip, [sp, #28]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d54:	f001 f85a 	bl	8001e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d58:	200b      	movs	r0, #11
 8000d5a:	f001 f88f 	bl	8001e7c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d5e:	4622      	mov	r2, r4
 8000d60:	4621      	mov	r1, r4
 8000d62:	200c      	movs	r0, #12
 8000d64:	f001 f852 	bl	8001e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d68:	200c      	movs	r0, #12
 8000d6a:	f001 f887 	bl	8001e7c <HAL_NVIC_EnableIRQ>
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d72:	f44f 7080 	mov.w	r0, #256	; 0x100
	hadc1.Init.NbrOfConversion = 7;
 8000d76:	f04f 0c07 	mov.w	ip, #7
	hadc1.Instance = ADC1;
 8000d7a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d7e:	8334      	strh	r4, [r6, #24]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d80:	62f2      	str	r2, [r6, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000d82:	62b0      	str	r0, [r6, #40]	; 0x28
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d84:	2208      	movs	r2, #8
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000d86:	4630      	mov	r0, r6
	hadc1.Init.NbrOfConversion = 7;
 8000d88:	f8c6 c01c 	str.w	ip, [r6, #28]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d8c:	6172      	str	r2, [r6, #20]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d8e:	e9c6 4703 	strd	r4, r7, [r6, #12]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d92:	e9c6 4401 	strd	r4, r4, [r6, #4]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d96:	f886 4020 	strb.w	r4, [r6, #32]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d9a:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d9e:	6374      	str	r4, [r6, #52]	; 0x34
	hadc1.Instance = ADC1;
 8000da0:	6031      	str	r1, [r6, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000da2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000da6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000daa:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	ADC_MultiModeTypeDef multimode = { 0 };
 8000dae:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000db2:	940a      	str	r4, [sp, #40]	; 0x28
	sConfig.Channel = ADC_CHANNEL_1;
 8000db4:	f04f 0801 	mov.w	r8, #1
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000db8:	f000 fc80 	bl	80016bc <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_1;
 8000dbc:	f04f 0901 	mov.w	r9, #1
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000dc0:	a90a      	add	r1, sp, #40	; 0x28
 8000dc2:	4630      	mov	r0, r6
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8000dc4:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8000dc6:	f000 ff9b 	bl	8001d00 <HAL_ADCEx_MultiModeConfigChannel>
	sConfig.Channel = ADC_CHANNEL_1;
 8000dca:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8000dce:	f04f 0807 	mov.w	r8, #7
 8000dd2:	f04f 0900 	mov.w	r9, #0
 8000dd6:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dda:	a90e      	add	r1, sp, #56	; 0x38
 8000ddc:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_1;
 8000dde:	f04f 0800 	mov.w	r8, #0
 8000de2:	f04f 0900 	mov.w	r9, #0
 8000de6:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dea:	f000 fdf1 	bl	80019d0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_2;
 8000dee:	f04f 0802 	mov.w	r8, #2
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000df2:	a90e      	add	r1, sp, #56	; 0x38
 8000df4:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_2;
 8000df6:	f04f 0902 	mov.w	r9, #2
 8000dfa:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000dfe:	f000 fde7 	bl	80019d0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_3;
 8000e02:	f04f 0803 	mov.w	r8, #3
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e06:	a90e      	add	r1, sp, #56	; 0x38
 8000e08:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_3;
 8000e0a:	f04f 0903 	mov.w	r9, #3
 8000e0e:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e12:	f000 fddd 	bl	80019d0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_4;
 8000e16:	f04f 0804 	mov.w	r8, #4
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e1a:	a90e      	add	r1, sp, #56	; 0x38
 8000e1c:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_4;
 8000e1e:	f04f 0904 	mov.w	r9, #4
 8000e22:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e26:	f000 fdd3 	bl	80019d0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_11;
 8000e2a:	f04f 080b 	mov.w	r8, #11
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e2e:	a90e      	add	r1, sp, #56	; 0x38
 8000e30:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_11;
 8000e32:	f04f 0905 	mov.w	r9, #5
 8000e36:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e3a:	f000 fdc9 	bl	80019d0 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_12;
 8000e3e:	f04f 080c 	mov.w	r8, #12
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e42:	a90e      	add	r1, sp, #56	; 0x38
 8000e44:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_12;
 8000e46:	f04f 0906 	mov.w	r9, #6
 8000e4a:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e4e:	2707      	movs	r7, #7
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e50:	f000 fdbe 	bl	80019d0 <HAL_ADC_ConfigChannel>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e54:	a90e      	add	r1, sp, #56	; 0x38
 8000e56:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e58:	2612      	movs	r6, #18
 8000e5a:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e5e:	f000 fdb7 	bl	80019d0 <HAL_ADC_ConfigChannel>
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e62:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	LL_DAC_InitTypeDef DAC_InitStruct = { 0 };
 8000e66:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000e6a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e6e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000e72:	69ea      	ldr	r2, [r5, #28]
 8000e74:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e78:	61ea      	str	r2, [r5, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e7a:	69ea      	ldr	r2, [r5, #28]
 8000e7c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000e80:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000e82:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e84:	696a      	ldr	r2, [r5, #20]
 8000e86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e8a:	616a      	str	r2, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e8c:	696a      	ldr	r2, [r5, #20]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e8e:	9412      	str	r4, [sp, #72]	; 0x48
 8000e90:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e94:	9206      	str	r2, [sp, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000e98:	2610      	movs	r6, #16
 8000e9a:	2703      	movs	r7, #3
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000ea0:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  (void)tmpreg;
 8000ea4:	9a06      	ldr	r2, [sp, #24]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	4f5f      	ldr	r7, [pc, #380]	; (8001024 <main+0x348>)
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f001 f9e4 	bl	8002274 <LL_GPIO_Init>
	LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000eac:	4b5e      	ldr	r3, [pc, #376]	; (8001028 <main+0x34c>)
 8000eae:	495f      	ldr	r1, [pc, #380]	; (800102c <main+0x350>)
	DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 8000eb0:	940d      	str	r4, [sp, #52]	; 0x34
	DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000eb2:	f04f 0838 	mov.w	r8, #56	; 0x38
 8000eb6:	f04f 0900 	mov.w	r9, #0
	LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000eba:	aa0a      	add	r2, sp, #40	; 0x28
 8000ebc:	4618      	mov	r0, r3
	DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000ebe:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
	LL_DAC_Init(DAC1, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000ec2:	f001 f9a7 	bl	8002214 <LL_DAC_Init>
  MODIFY_REG(*reg, (Remap & 0x00F00F00U) >> 4U, (Remap & 0x000F00F0U));
 8000ec6:	495a      	ldr	r1, [pc, #360]	; (8001030 <main+0x354>)
  CLEAR_BIT(DACx->CR,
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <main+0x34c>)
 8000eca:	680a      	ldr	r2, [r1, #0]
 8000ecc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ed0:	600a      	str	r2, [r1, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	f022 0204 	bic.w	r2, r2, #4
 8000ed8:	601a      	str	r2, [r3, #0]
  SET_BIT(DACx->CR,
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	f042 0201 	orr.w	r2, r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ee2:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	LL_DAC_InitTypeDef DAC_InitStruct = { 0 };
 8000ee6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8000eea:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eee:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ef2:	69eb      	ldr	r3, [r5, #28]
 8000ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ef8:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000efa:	69eb      	ldr	r3, [r5, #28]
 8000efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f00:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000f02:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 8000f04:	696b      	ldr	r3, [r5, #20]
 8000f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0a:	616b      	str	r3, [r5, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f0c:	696b      	ldr	r3, [r5, #20]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f0e:	9412      	str	r4, [sp, #72]	; 0x48
 8000f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f14:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8000f16:	9804      	ldr	r0, [sp, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000f1a:	2240      	movs	r2, #64	; 0x40
 8000f1c:	2303      	movs	r3, #3
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000f22:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f001 f9a5 	bl	8002274 <LL_GPIO_Init>
	LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000f2a:	aa0a      	add	r2, sp, #40	; 0x28
	DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_SWITCH_ENABLE;
 8000f2c:	2302      	movs	r3, #2
	LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000f2e:	493f      	ldr	r1, [pc, #252]	; (800102c <main+0x350>)
	DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_SWITCH_ENABLE;
 8000f30:	930d      	str	r3, [sp, #52]	; 0x34
	LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000f32:	4658      	mov	r0, fp
	DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 8000f34:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
	LL_DAC_Init(DAC2, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 8000f38:	f001 f96c 	bl	8002214 <LL_DAC_Init>
  CLEAR_BIT(DACx->CR,
 8000f3c:	f8db 3000 	ldr.w	r3, [fp]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000f40:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8001040 <main+0x364>
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(DACx->CR,
 8000f4c:	f8db 3000 	ldr.w	r3, [fp]
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	f8cb 3000 	str.w	r3, [fp]
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000f58:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000f5c:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000f60:	9412      	str	r4, [sp, #72]	; 0x48
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f62:	69eb      	ldr	r3, [r5, #28]
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000f6a:	69eb      	ldr	r3, [r5, #28]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	930a      	str	r3, [sp, #40]	; 0x28
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
  (void)tmpreg;
 8000f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f78:	f8da 300c 	ldr.w	r3, [sl, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	f887 431c 	strb.w	r4, [r7, #796]	; 0x31c
	TIM_InitStruct.Autoreload = 1600;
 8000f80:	f44f 63c8 	mov.w	r3, #1600	; 0x640
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f84:	603e      	str	r6, [r7, #0]
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f86:	a90e      	add	r1, sp, #56	; 0x38
 8000f88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_InitStruct.Autoreload = 1600;
 8000f8c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
	TIM_InitStruct.Prescaler = 0;
 8000f90:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f94:	940f      	str	r4, [sp, #60]	; 0x3c
	LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f96:	f001 fa1d 	bl	80023d4 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	ea02 0208 	and.w	r2, r2, r8
 8000fac:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fb4:	f042 0220 	orr.w	r2, r2, #32
 8000fb8:	605a      	str	r2, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc0:	609a      	str	r2, [r3, #8]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	f042 0201 	orr.w	r2, r2, #1
 8000fd0:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	f8c7 6080 	str.w	r6, [r7, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fda:	f3bf 8f6f 	isb	sy
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fde:	f8da 300c 	ldr.w	r3, [sl, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	f887 431c 	strb.w	r4, [r7, #796]	; 0x31c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	603e      	str	r6, [r7, #0]
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000fe8:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000fec:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000ff0:	9412      	str	r4, [sp, #72]	; 0x48
  SET_BIT(RCC->APB1ENR, Periphs);
 8000ff2:	69eb      	ldr	r3, [r5, #28]
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000ff4:	4e0f      	ldr	r6, [pc, #60]	; (8001034 <main+0x358>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	61eb      	str	r3, [r5, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000ffc:	69eb      	ldr	r3, [r5, #28]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  (void)tmpreg;
 8001008:	9b02      	ldr	r3, [sp, #8]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100a:	f8da 300c 	ldr.w	r3, [sl, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	f887 431d 	strb.w	r4, [r7, #797]	; 0x31d
	TIM_InitStruct.Autoreload = 12800;
 8001012:	f44f 5348 	mov.w	r3, #12800	; 0x3200
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	603d      	str	r5, [r7, #0]
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001018:	a90e      	add	r1, sp, #56	; 0x38
 800101a:	e013      	b.n	8001044 <main+0x368>
 800101c:	40021000 	.word	0x40021000
 8001020:	20000bb0 	.word	0x20000bb0
 8001024:	e000e100 	.word	0xe000e100
 8001028:	40007400 	.word	0x40007400
 800102c:	02100001 	.word	0x02100001
 8001030:	40010050 	.word	0x40010050
 8001034:	40000400 	.word	0x40000400
 8001038:	40009800 	.word	0x40009800
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	fffebff8 	.word	0xfffebff8
 8001044:	4630      	mov	r0, r6
	TIM_InitStruct.Autoreload = 12800;
 8001046:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
	TIM_InitStruct.Prescaler = 0;
 800104a:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800104e:	940f      	str	r4, [sp, #60]	; 0x3c
	LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001050:	f001 f9c0 	bl	80023d4 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105a:	6033      	str	r3, [r6, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800105c:	68b3      	ldr	r3, [r6, #8]
 800105e:	ea03 0308 	and.w	r3, r3, r8
 8001062:	60b3      	str	r3, [r6, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001064:	6873      	ldr	r3, [r6, #4]
 8001066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800106a:	f043 0320 	orr.w	r3, r3, #32
 800106e:	6073      	str	r3, [r6, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001070:	68b3      	ldr	r3, [r6, #8]
 8001072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001076:	60b3      	str	r3, [r6, #8]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001078:	f8c7 5080 	str.w	r5, [r7, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001080:	f3bf 8f6f 	isb	sy
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	f8da 200c 	ldr.w	r2, [sl, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800123c <main+0x560>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800108c:	4f5f      	ldr	r7, [pc, #380]	; (800120c <main+0x530>)
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 800108e:	4e60      	ldr	r6, [pc, #384]	; (8001210 <main+0x534>)
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001090:	4d60      	ldr	r5, [pc, #384]	; (8001214 <main+0x538>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001092:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001096:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109a:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	2b04      	cmp	r3, #4
 800109e:	bf28      	it	cs
 80010a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	2906      	cmp	r1, #6
 80010a4:	bf88      	it	hi
 80010a6:	1ed4      	subhi	r4, r2, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b2:	40a2      	lsls	r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f003 0302 	and.w	r3, r3, #2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	43d2      	mvns	r2, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ba:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f002 0202 	and.w	r2, r2, #2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	f889 331d 	strb.w	r3, [r9, #797]	; 0x31d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	f8c9 1000 	str.w	r1, [r9]
 80010d2:	68fb      	ldr	r3, [r7, #12]
	hadc2.Instance = ADC2;
 80010d4:	4a50      	ldr	r2, [pc, #320]	; (8001218 <main+0x53c>)
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80010dc:	683b      	ldr	r3, [r7, #0]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010de:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	62f4      	str	r4, [r6, #44]	; 0x2c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80010ea:	2400      	movs	r4, #0
	hadc2.Init.NbrOfConversion = 1;
 80010ec:	f04f 0801 	mov.w	r8, #1
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010f0:	f44f 7110 	mov.w	r1, #576	; 0x240
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	2304      	movs	r3, #4
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 80010f6:	4630      	mov	r0, r6
	hadc2.Init.LowPowerAutoWait = DISABLE;
 80010f8:	8334      	strh	r4, [r6, #24]
	hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80010fa:	62b1      	str	r1, [r6, #40]	; 0x28
	hadc2.Instance = ADC2;
 80010fc:	6032      	str	r2, [r6, #0]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010fe:	6173      	str	r3, [r6, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001100:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001104:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8001108:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800110c:	e9c6 4401 	strd	r4, r4, [r6, #4]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001110:	e9c6 4403 	strd	r4, r4, [r6, #12]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001114:	f886 4020 	strb.w	r4, [r6, #32]
	hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001118:	6374      	str	r4, [r6, #52]	; 0x34
	hadc2.Init.NbrOfConversion = 1;
 800111a:	f8c6 801c 	str.w	r8, [r6, #28]
	hadc2.Init.DMAContinuousRequests = ENABLE;
 800111e:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8001122:	f000 facb 	bl	80016bc <HAL_ADC_Init>
	sConfig.Channel = ADC_CHANNEL_2;
 8001126:	2202      	movs	r2, #2
 8001128:	2301      	movs	r3, #1
 800112a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800112e:	2207      	movs	r2, #7
 8001130:	2300      	movs	r3, #0
 8001132:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001136:	a90e      	add	r1, sp, #56	; 0x38
	sConfig.Channel = ADC_CHANNEL_2;
 8001138:	2200      	movs	r2, #0
 800113a:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800113c:	4630      	mov	r0, r6
	sConfig.Channel = ADC_CHANNEL_2;
 800113e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8001142:	f000 fc45 	bl	80019d0 <HAL_ADC_ConfigChannel>
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8001146:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800114a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <main+0x540>)
 8001150:	9412      	str	r4, [sp, #72]	; 0x48
 8001152:	699a      	ldr	r2, [r3, #24]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4832      	ldr	r0, [pc, #200]	; (8001220 <main+0x544>)
 8001156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115a:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001162:	9301      	str	r3, [sp, #4]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001164:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  (void)tmpreg;
 8001168:	9a01      	ldr	r2, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800116a:	68c2      	ldr	r2, [r0, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	f889 4319 	strb.w	r4, [r9, #793]	; 0x319
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001170:	a90e      	add	r1, sp, #56	; 0x38
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	f8c9 3000 	str.w	r3, [r9]
 8001176:	4628      	mov	r0, r5
	TIM_InitStruct.Autoreload = 4800;
 8001178:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800117c:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_InitStruct.Prescaler = 0;
 800117e:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001182:	940f      	str	r4, [sp, #60]	; 0x3c
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001184:	9411      	str	r4, [sp, #68]	; 0x44
	TIM_InitStruct.RepetitionCounter = 0;
 8001186:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
	LL_TIM_Init(TIM1, &TIM_InitStruct);
 800118a:	f001 f923 	bl	80023d4 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800118e:	682b      	ldr	r3, [r5, #0]

}

/* USER CODE BEGIN 4 */
void start_adc() {
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_data, NUM_ADC_CHANNELS);
 8001190:	4924      	ldr	r1, [pc, #144]	; (8001224 <main+0x548>)
 8001192:	4825      	ldr	r0, [pc, #148]	; (8001228 <main+0x54c>)
 8001194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001198:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800119a:	68ab      	ldr	r3, [r5, #8]
 800119c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80011a0:	f023 0307 	bic.w	r3, r3, #7
 80011a4:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80011a6:	686b      	ldr	r3, [r5, #4]
 80011a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	606b      	str	r3, [r5, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80011b2:	686b      	ldr	r3, [r5, #4]
 80011b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80011b8:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011ba:	68ab      	ldr	r3, [r5, #8]
 80011bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011c0:	60ab      	str	r3, [r5, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80011c2:	68eb      	ldr	r3, [r5, #12]
 80011c4:	ea43 0308 	orr.w	r3, r3, r8
 80011c8:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	ea43 0308 	orr.w	r3, r3, r8
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	2207      	movs	r2, #7
 80011d4:	f000 fb78 	bl	80018c8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) voct_data, 1);
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <main+0x550>)
 80011da:	4642      	mov	r2, r8
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 fb73 	bl	80018c8 <HAL_ADC_Start_DMA>
 80011e2:	683b      	ldr	r3, [r7, #0]
	dynamic_smooth_init(&dynamic_smooth_a, 0.05f, 0.5f);
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <main+0x554>)
 80011e6:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001234 <main+0x558>
 80011ea:	ea43 0308 	orr.w	r3, r3, r8
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	ea43 0308 	orr.w	r3, r3, r8
 80011f6:	602b      	str	r3, [r5, #0]
 80011f8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80011fc:	f7ff fc9e 	bl	8000b3c <dynamic_smooth_init>
	adsr_structinit(&OP1.ADSR);
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <main+0x55c>)
 8001202:	f7ff fa25 	bl	8000650 <adsr_structinit>
		loop();
 8001206:	f7ff fcd7 	bl	8000bb8 <loop>
	while (1) {
 800120a:	e7fc      	b.n	8001206 <main+0x52a>
 800120c:	40000400 	.word	0x40000400
 8001210:	20000b60 	.word	0x20000b60
 8001214:	40012c00 	.word	0x40012c00
 8001218:	50000100 	.word	0x50000100
 800121c:	40021000 	.word	0x40021000
 8001220:	e000ed00 	.word	0xe000ed00
 8001224:	200008c4 	.word	0x200008c4
 8001228:	20000bb0 	.word	0x20000bb0
 800122c:	20000b5c 	.word	0x20000b5c
 8001230:	20000adc 	.word	0x20000adc
 8001234:	3d4ccccd 	.word	0x3d4ccccd
 8001238:	20000854 	.word	0x20000854
 800123c:	e000e100 	.word	0xe000e100

08001240 <Error_Handler>:
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_MspInit+0x2c>)
 8001246:	699a      	ldr	r2, [r3, #24]
 8001248:	f042 0201 	orr.w	r2, r2, #1
 800124c:	619a      	str	r2, [r3, #24]
 800124e:	699a      	ldr	r2, [r3, #24]
{
 8001250:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	f002 0201 	and.w	r2, r2, #1
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001260:	61da      	str	r2, [r3, #28]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126c:	b002      	add	sp, #8
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001274:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001276:	6802      	ldr	r2, [r0, #0]
{
 8001278:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800127c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001284:	e9cd 3308 	strd	r3, r3, [sp, #32]
{
 8001288:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 800128c:	d038      	beq.n	8001300 <HAL_ADC_MspInit+0x8c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_ADC_MspInit+0x120>)
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001294:	b00c      	add	sp, #48	; 0x30
 8001296:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001298:	4a3f      	ldr	r2, [pc, #252]	; (8001398 <HAL_ADC_MspInit+0x124>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800129e:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012a2:	d068      	beq.n	8001376 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_ADC_MspInit+0x128>)
    hdma_adc2.Instance = DMA1_Channel2;
 80012a6:	4d3e      	ldr	r5, [pc, #248]	; (80013a0 <HAL_ADC_MspInit+0x12c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	9305      	str	r3, [sp, #20]
 80012b8:	9805      	ldr	r0, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ba:	2303      	movs	r3, #3
 80012bc:	2220      	movs	r2, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f000 febc 	bl	8002048 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <HAL_ADC_MspInit+0x130>)
 80012d2:	602b      	str	r3, [r5, #0]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	2080      	movs	r0, #128	; 0x80
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012de:	2320      	movs	r3, #32
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	60e8      	str	r0, [r5, #12]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012e6:	606e      	str	r6, [r5, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	60ae      	str	r6, [r5, #8]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	61ee      	str	r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012ec:	4628      	mov	r0, r5
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80012ee:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012f0:	f000 fdec 	bl	8001ecc <HAL_DMA_Init>
 80012f4:	2800      	cmp	r0, #0
 80012f6:	d149      	bne.n	800138c <HAL_ADC_MspInit+0x118>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80012fa:	626c      	str	r4, [r5, #36]	; 0x24
}
 80012fc:	b00c      	add	sp, #48	; 0x30
 80012fe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001300:	4a25      	ldr	r2, [pc, #148]	; (8001398 <HAL_ADC_MspInit+0x124>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001306:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001308:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800130a:	d029      	beq.n	8001360 <HAL_ADC_MspInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Instance = DMA1_Channel1;
 800130e:	4d26      	ldr	r5, [pc, #152]	; (80013a8 <HAL_ADC_MspInit+0x134>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800131e:	9202      	str	r2, [sp, #8]
 8001320:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	695a      	ldr	r2, [r3, #20]
 8001324:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001330:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001332:	220f      	movs	r2, #15
 8001334:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	a906      	add	r1, sp, #24
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001340:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f000 fe7f 	bl	8002048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800134a:	2303      	movs	r3, #3
 800134c:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	4817      	ldr	r0, [pc, #92]	; (80013ac <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001354:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f000 fe76 	bl	8002048 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HAL_ADC_MspInit+0x13c>)
 800135e:	e7b8      	b.n	80012d2 <HAL_ADC_MspInit+0x5e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_ADC_MspInit+0x128>)
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	e7ca      	b.n	800130c <HAL_ADC_MspInit+0x98>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_ADC_MspInit+0x128>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	9304      	str	r3, [sp, #16]
 8001388:	9b04      	ldr	r3, [sp, #16]
 800138a:	e78b      	b.n	80012a4 <HAL_ADC_MspInit+0x30>
      Error_Handler();
 800138c:	f7ff ff58 	bl	8001240 <Error_Handler>
 8001390:	e7b2      	b.n	80012f8 <HAL_ADC_MspInit+0x84>
 8001392:	bf00      	nop
 8001394:	50000100 	.word	0x50000100
 8001398:	20000828 	.word	0x20000828
 800139c:	40021000 	.word	0x40021000
 80013a0:	20000c44 	.word	0x20000c44
 80013a4:	4002001c 	.word	0x4002001c
 80013a8:	20000c00 	.word	0x20000c00
 80013ac:	48000400 	.word	0x48000400
 80013b0:	40020008 	.word	0x40020008

080013b4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop

080013b8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <HardFault_Handler>
 80013ba:	bf00      	nop

080013bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <MemManage_Handler>
 80013be:	bf00      	nop

080013c0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <BusFault_Handler>
 80013c2:	bf00      	nop

080013c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler>
 80013c6:	bf00      	nop

080013c8 <SVC_Handler>:
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop

080013cc <DebugMon_Handler>:
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <PendSV_Handler>:
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop

080013d4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 b8c0 	b.w	8001558 <HAL_IncTick>

080013d8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013d8:	4801      	ldr	r0, [pc, #4]	; (80013e0 <DMA1_Channel1_IRQHandler+0x8>)
 80013da:	f000 bdeb 	b.w	8001fb4 <HAL_DMA_IRQHandler>
 80013de:	bf00      	nop
 80013e0:	20000c00 	.word	0x20000c00

080013e4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80013e4:	4801      	ldr	r0, [pc, #4]	; (80013ec <DMA1_Channel2_IRQHandler+0x8>)
 80013e6:	f000 bde5 	b.w	8001fb4 <HAL_DMA_IRQHandler>
 80013ea:	bf00      	nop
 80013ec:	20000c44 	.word	0x20000c44

080013f0 <TIM1_UP_TIM16_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80013f2:	691a      	ldr	r2, [r3, #16]
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM1)) {
 80013f4:	07d2      	lsls	r2, r2, #31
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80013f6:	bf44      	itt	mi
 80013f8:	f06f 0201 	mvnmi.w	r2, #1
 80013fc:	611a      	strmi	r2, [r3, #16]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80013fe:	4770      	bx	lr
 8001400:	40012c00 	.word	0x40012c00

08001404 <TIM2_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001408:	691a      	ldr	r2, [r3, #16]
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 800140a:	07d2      	lsls	r2, r2, #31
 800140c:	d400      	bmi.n	8001410 <TIM2_IRQHandler+0xc>
		main_2OP_loop();

		//handle_out_buffer();
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 800140e:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001410:	f06f 0201 	mvn.w	r2, #1
 8001414:	611a      	str	r2, [r3, #16]
		main_2OP_loop();
 8001416:	f7ff ba11 	b.w	800083c <main_2OP_loop>
 800141a:	bf00      	nop

0800141c <TIM3_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <TIM3_IRQHandler+0x50>)
 800141e:	691a      	ldr	r2, [r3, #16]
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if (LL_TIM_IsActiveFlag_UPDATE(TIM3)) {
 8001420:	07d2      	lsls	r2, r2, #31
 8001422:	d521      	bpl.n	8001468 <TIM3_IRQHandler+0x4c>
		LL_TIM_ClearFlag_UPDATE(TIM3);

		for (uint8_t i = 0; i < (NUM_ADC_CHANNELS - 1); i++) {
			adc_data_10b[i] = adc_data[i] >> 2;
 8001424:	4a12      	ldr	r2, [pc, #72]	; (8001470 <TIM3_IRQHandler+0x54>)
{
 8001426:	b570      	push	{r4, r5, r6, lr}
			adc_data_10b[i] = adc_data[i] >> 2;
 8001428:	8850      	ldrh	r0, [r2, #2]
 800142a:	8816      	ldrh	r6, [r2, #0]
 800142c:	8895      	ldrh	r5, [r2, #4]
 800142e:	88d4      	ldrh	r4, [r2, #6]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001430:	f06f 0101 	mvn.w	r1, #1
 8001434:	6119      	str	r1, [r3, #16]
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <TIM3_IRQHandler+0x58>)
 8001438:	8911      	ldrh	r1, [r2, #8]
 800143a:	8952      	ldrh	r2, [r2, #10]
 800143c:	0880      	lsrs	r0, r0, #2
 800143e:	0889      	lsrs	r1, r1, #2
 8001440:	0892      	lsrs	r2, r2, #2
 8001442:	8058      	strh	r0, [r3, #2]
 8001444:	08b6      	lsrs	r6, r6, #2
 8001446:	08ad      	lsrs	r5, r5, #2
 8001448:	08a4      	lsrs	r4, r4, #2
		}

#ifdef SMOOTH_ATTACK
		run_linear_a_expo_r(&OP1.ADSR);
 800144a:	480b      	ldr	r0, [pc, #44]	; (8001478 <TIM3_IRQHandler+0x5c>)
			adc_data_10b[i] = adc_data[i] >> 2;
 800144c:	801e      	strh	r6, [r3, #0]
 800144e:	809d      	strh	r5, [r3, #4]
 8001450:	80dc      	strh	r4, [r3, #6]
 8001452:	8119      	strh	r1, [r3, #8]
 8001454:	815a      	strh	r2, [r3, #10]
		run_linear_a_expo_r(&OP1.ADSR);
 8001456:	f7ff f913 	bl	8000680 <run_linear_a_expo_r>
#else
		run_ar(&OP1.ADSR);
#endif
		check_gate();
 800145a:	f7ff f989 	bl	8000770 <check_gate>
		//check_trig();
		set_adsr_parameters(&OP1.ADSR);
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 800145e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		set_adsr_parameters(&OP1.ADSR);
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <TIM3_IRQHandler+0x5c>)
 8001464:	f7ff b9a2 	b.w	80007ac <set_adsr_parameters>
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40000400 	.word	0x40000400
 8001470:	200008c4 	.word	0x200008c4
 8001474:	200008b4 	.word	0x200008b4
 8001478:	20000854 	.word	0x20000854

0800147c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <SystemInit+0x18>)
 800147e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001482:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001486:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800148a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800148e:	6099      	str	r1, [r3, #8]
#endif
}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800149c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800149e:	e003      	b.n	80014a8 <LoopCopyDataInit>

080014a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014a6:	3104      	adds	r1, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <LoopForever+0xe>)
	adds	r2, r0, r1
 80014ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014b0:	d3f6      	bcc.n	80014a0 <CopyDataInit>
	ldr	r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014b4:	e002      	b.n	80014bc <LoopFillZerobss>

080014b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014b8:	f842 3b04 	str.w	r3, [r2], #4

080014bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <LoopForever+0x16>)
	cmp	r2, r3
 80014be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014c0:	d3f9      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c2:	f7ff ffdb 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f000 ffd3 	bl	8002470 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ca:	f7ff fc07 	bl	8000cdc <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80014d4:	08002cd8 	.word	0x08002cd8
	ldr	r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80014dc:	2000080c 	.word	0x2000080c
	ldr	r2, =_sbss
 80014e0:	2000080c 	.word	0x2000080c
	ldr	r3, = _ebss
 80014e4:	20000c8c 	.word	0x20000c8c

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_InitTick+0x3c>)
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_InitTick+0x40>)
 80014f2:	7812      	ldrb	r2, [r2, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
{
 80014f6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014fc:	fbb0 f0f2 	udiv	r0, r0, r2
 8001500:	fbb3 f0f0 	udiv	r0, r3, r0
 8001504:	f000 fcc8 	bl	8001e98 <HAL_SYSTICK_Config>
 8001508:	b908      	cbnz	r0, 800150e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	2d0f      	cmp	r5, #15
 800150c:	d901      	bls.n	8001512 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800150e:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8001510:	bd38      	pop	{r3, r4, r5, pc}
 8001512:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001514:	4602      	mov	r2, r0
 8001516:	4629      	mov	r1, r5
 8001518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800151c:	f000 fc76 	bl	8001e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_InitTick+0x44>)
 8001522:	4620      	mov	r0, r4
 8001524:	601d      	str	r5, [r3, #0]
}
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	20000804 	.word	0x20000804
 800152c:	20000800 	.word	0x20000800
 8001530:	20000808 	.word	0x20000808

08001534 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_Init+0x20>)
{
 8001536:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f043 0310 	orr.w	r3, r3, #16
 800153e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001540:	2003      	movs	r0, #3
 8001542:	f000 fc4f 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001546:	2000      	movs	r0, #0
 8001548:	f7ff ffd0 	bl	80014ec <HAL_InitTick>
  HAL_MspInit();
 800154c:	f7ff fe7a 	bl	8001244 <HAL_MspInit>
}
 8001550:	2000      	movs	r0, #0
 8001552:	bd08      	pop	{r3, pc}
 8001554:	40022000 	.word	0x40022000

08001558 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_IncTick+0x10>)
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_IncTick+0x14>)
 800155c:	6811      	ldr	r1, [r2, #0]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	440b      	add	r3, r1
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000c88 	.word	0x20000c88
 800156c:	20000804 	.word	0x20000804

08001570 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001570:	4b01      	ldr	r3, [pc, #4]	; (8001578 <HAL_GetTick+0x8>)
 8001572:	6818      	ldr	r0, [r3, #0]
}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000c88 	.word	0x20000c88

0800157c <HAL_ADC_ConvCpltCallback>:
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <HAL_ADC_ConvHalfCpltCallback>:
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop

08001584 <HAL_ADC_ErrorCallback>:
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop

08001588 <ADC_DMAError>:
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001588:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800158a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001592:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001594:	f043 0304 	orr.w	r3, r3, #4
 8001598:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800159a:	f7ff bff3 	b.w	8001584 <HAL_ADC_ErrorCallback>
 800159e:	bf00      	nop

080015a0 <ADC_DMAHalfConvCplt>:
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80015a0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80015a2:	f7ff bfed 	b.w	8001580 <HAL_ADC_ConvHalfCpltCallback>
 80015a6:	bf00      	nop

080015a8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ac:	f012 0f50 	tst.w	r2, #80	; 0x50
 80015b0:	d118      	bne.n	80015e4 <ADC_DMAConvCplt+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015bc:	68ca      	ldr	r2, [r1, #12]
 80015be:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80015c2:	d10c      	bne.n	80015de <ADC_DMAConvCplt+0x36>
 80015c4:	7e5a      	ldrb	r2, [r3, #25]
 80015c6:	b952      	cbnz	r2, 80015de <ADC_DMAConvCplt+0x36>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d2:	04d2      	lsls	r2, r2, #19
 80015d4:	d403      	bmi.n	80015de <ADC_DMAConvCplt+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_ADC_ConvCpltCallback(hadc);
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff bfcc 	b.w	800157c <HAL_ADC_ConvCpltCallback>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80015e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	4718      	bx	r3
 80015ea:	bf00      	nop

080015ec <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015ec:	6802      	ldr	r2, [r0, #0]
{
 80015ee:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015f0:	6893      	ldr	r3, [r2, #8]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d001      	beq.n	80015fe <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015fa:	2000      	movs	r0, #0
}
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 80015fe:	6811      	ldr	r1, [r2, #0]
 8001600:	07c9      	lsls	r1, r1, #31
 8001602:	d5fa      	bpl.n	80015fa <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001604:	6891      	ldr	r1, [r2, #8]
 8001606:	f001 010d 	and.w	r1, r1, #13
 800160a:	2901      	cmp	r1, #1
 800160c:	4604      	mov	r4, r0
 800160e:	d009      	beq.n	8001624 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	6402      	str	r2, [r0, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001618:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800161a:	f042 0201 	orr.w	r2, r2, #1
      return HAL_ERROR;
 800161e:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001620:	6462      	str	r2, [r4, #68]	; 0x44
}
 8001622:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8001624:	6893      	ldr	r3, [r2, #8]
 8001626:	2103      	movs	r1, #3
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6093      	str	r3, [r2, #8]
 800162e:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8001630:	f7ff ff9e 	bl	8001570 <HAL_GetTick>
 8001634:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	07db      	lsls	r3, r3, #31
 800163c:	d5dd      	bpl.n	80015fa <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800163e:	f7ff ff97 	bl	8001570 <HAL_GetTick>
 8001642:	1b40      	subs	r0, r0, r5
 8001644:	2802      	cmp	r0, #2
 8001646:	d9f6      	bls.n	8001636 <ADC_Disable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800164a:	f043 0310 	orr.w	r3, r3, #16
 800164e:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001650:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6463      	str	r3, [r4, #68]	; 0x44
 8001658:	2001      	movs	r0, #1
}
 800165a:	bd38      	pop	{r3, r4, r5, pc}

0800165c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800165c:	6802      	ldr	r2, [r0, #0]
{
 800165e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001660:	6893      	ldr	r3, [r2, #8]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
{
 8001668:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800166a:	d020      	beq.n	80016ae <ADC_Enable+0x52>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800166c:	6891      	ldr	r1, [r2, #8]
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <ADC_Enable+0x5c>)
 8001670:	4219      	tst	r1, r3
 8001672:	d009      	beq.n	8001688 <ADC_Enable+0x2c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001674:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6423      	str	r3, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6463      	str	r3, [r4, #68]	; 0x44
 8001684:	2001      	movs	r0, #1
}
 8001686:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001688:	6893      	ldr	r3, [r2, #8]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 8001690:	f7ff ff6e 	bl	8001570 <HAL_GetTick>
 8001694:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001696:	e004      	b.n	80016a2 <ADC_Enable+0x46>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001698:	f7ff ff6a 	bl	8001570 <HAL_GetTick>
 800169c:	1b43      	subs	r3, r0, r5
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d8e8      	bhi.n	8001674 <ADC_Enable+0x18>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	07db      	lsls	r3, r3, #31
 80016a8:	d5f6      	bpl.n	8001698 <ADC_Enable+0x3c>
  return HAL_OK;
 80016aa:	2000      	movs	r0, #0
}
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ae:	6813      	ldr	r3, [r2, #0]
 80016b0:	07d9      	lsls	r1, r3, #31
 80016b2:	d5db      	bpl.n	800166c <ADC_Enable+0x10>
  return HAL_OK;
 80016b4:	2000      	movs	r0, #0
 80016b6:	e7f9      	b.n	80016ac <ADC_Enable+0x50>
 80016b8:	8000003f 	.word	0x8000003f

080016bc <HAL_ADC_Init>:
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	f000 808f 	beq.w	80017e8 <HAL_ADC_Init+0x12c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016cc:	f013 0310 	ands.w	r3, r3, #16
 80016d0:	4604      	mov	r4, r0
 80016d2:	d117      	bne.n	8001704 <HAL_ADC_Init+0x48>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016d4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80016d6:	2d00      	cmp	r5, #0
 80016d8:	f000 8089 	beq.w	80017ee <HAL_ADC_Init+0x132>
 80016dc:	6822      	ldr	r2, [r4, #0]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016de:	6891      	ldr	r1, [r2, #8]
 80016e0:	00ce      	lsls	r6, r1, #3
 80016e2:	d575      	bpl.n	80017d0 <HAL_ADC_Init+0x114>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016e4:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016e6:	008d      	lsls	r5, r1, #2
 80016e8:	d472      	bmi.n	80017d0 <HAL_ADC_Init+0x114>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016ec:	06c8      	lsls	r0, r1, #27
 80016ee:	d400      	bmi.n	80016f2 <HAL_ADC_Init+0x36>
 80016f0:	b163      	cbz	r3, 800170c <HAL_ADC_Init+0x50>
    ADC_STATE_CLR_SET(hadc->State,
 80016f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f4:	f023 0312 	bic.w	r3, r3, #18
 80016f8:	f043 0310 	orr.w	r3, r3, #16
    tmp_hal_status = HAL_ERROR; 
 80016fc:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001700:	b002      	add	sp, #8
 8001702:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001704:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001706:	06d8      	lsls	r0, r3, #27
 8001708:	d4f3      	bmi.n	80016f2 <HAL_ADC_Init+0x36>
 800170a:	6822      	ldr	r2, [r4, #0]
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800170c:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800170e:	f010 0004 	ands.w	r0, r0, #4
 8001712:	d1ee      	bne.n	80016f2 <HAL_ADC_Init+0x36>
    ADC_STATE_CLR_SET(hadc->State,
 8001714:	6c21      	ldr	r1, [r4, #64]	; 0x40
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001716:	4b67      	ldr	r3, [pc, #412]	; (80018b4 <HAL_ADC_Init+0x1f8>)
    ADC_STATE_CLR_SET(hadc->State,
 8001718:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 800171c:	f041 0102 	orr.w	r1, r1, #2
 8001720:	6421      	str	r1, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001722:	6891      	ldr	r1, [r2, #8]
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001724:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001728:	f001 0103 	and.w	r1, r1, #3
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800172c:	bf18      	it	ne
 800172e:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001732:	2901      	cmp	r1, #1
 8001734:	f000 80a9 	beq.w	800188a <HAL_ADC_Init+0x1ce>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	f001 0103 	and.w	r1, r1, #3
 800173e:	2901      	cmp	r1, #1
 8001740:	f000 80a8 	beq.w	8001894 <HAL_ADC_Init+0x1d8>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001744:	495c      	ldr	r1, [pc, #368]	; (80018b8 <HAL_ADC_Init+0x1fc>)
 8001746:	6865      	ldr	r5, [r4, #4]
 8001748:	688b      	ldr	r3, [r1, #8]
 800174a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800174e:	432b      	orrs	r3, r5
 8001750:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001752:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8001756:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001758:	7e65      	ldrb	r5, [r4, #25]
 800175a:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175c:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001760:	2e01      	cmp	r6, #1
 8001762:	bf18      	it	ne
 8001764:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8001768:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800176c:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800176e:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001772:	f000 8082 	beq.w	800187a <HAL_ADC_Init+0x1be>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001776:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001778:	2901      	cmp	r1, #1
 800177a:	d002      	beq.n	8001782 <HAL_ADC_Init+0xc6>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800177c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800177e:	4301      	orrs	r1, r0
 8001780:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001782:	6891      	ldr	r1, [r2, #8]
 8001784:	f011 0f0c 	tst.w	r1, #12
 8001788:	d10c      	bne.n	80017a4 <HAL_ADC_Init+0xe8>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800178a:	68d1      	ldr	r1, [r2, #12]
 800178c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001790:	f021 0102 	bic.w	r1, r1, #2
 8001794:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001796:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800179a:	7e20      	ldrb	r0, [r4, #24]
 800179c:	0049      	lsls	r1, r1, #1
 800179e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80017a2:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80017a4:	68d5      	ldr	r5, [r2, #12]
 80017a6:	4945      	ldr	r1, [pc, #276]	; (80018bc <HAL_ADC_Init+0x200>)
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a8:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80017aa:	4029      	ands	r1, r5
 80017ac:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ae:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80017b0:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017b2:	d05a      	beq.n	800186a <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80017b6:	f023 030f 	bic.w	r3, r3, #15
 80017ba:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	2000      	movs	r0, #0
 80017be:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80017c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6423      	str	r3, [r4, #64]	; 0x40
}
 80017cc:	b002      	add	sp, #8
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80017d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017d2:	f023 0312 	bic.w	r3, r3, #18
 80017d6:	f043 0310 	orr.w	r3, r3, #16
 80017da:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017e6:	e784      	b.n	80016f2 <HAL_ADC_Init+0x36>
    return HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
}
 80017ea:	b002      	add	sp, #8
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 80017ee:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 80017f2:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 80017f4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 80017f8:	f7ff fd3c 	bl	8001274 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80017fc:	6822      	ldr	r2, [r4, #0]
 80017fe:	6893      	ldr	r3, [r2, #8]
 8001800:	00d9      	lsls	r1, r3, #3
 8001802:	d501      	bpl.n	8001808 <HAL_ADC_Init+0x14c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	462b      	mov	r3, r5
 8001806:	e76a      	b.n	80016de <HAL_ADC_Init+0x22>
        tmp_hal_status = ADC_Disable(hadc);
 8001808:	4620      	mov	r0, r4
 800180a:	f7ff feef 	bl	80015ec <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800180e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001810:	06d2      	lsls	r2, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8001812:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001814:	f53f af62 	bmi.w	80016dc <HAL_ADC_Init+0x20>
 8001818:	2800      	cmp	r0, #0
 800181a:	f47f af5f 	bne.w	80016dc <HAL_ADC_Init+0x20>
          ADC_STATE_CLR_SET(hadc->State,
 800181e:	6c20      	ldr	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001820:	6822      	ldr	r2, [r4, #0]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001822:	4927      	ldr	r1, [pc, #156]	; (80018c0 <HAL_ADC_Init+0x204>)
 8001824:	4d27      	ldr	r5, [pc, #156]	; (80018c4 <HAL_ADC_Init+0x208>)
 8001826:	6809      	ldr	r1, [r1, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8001828:	f420 5088 	bic.w	r0, r0, #4352	; 0x1100
 800182c:	f020 0002 	bic.w	r0, r0, #2
 8001830:	f040 0002 	orr.w	r0, r0, #2
 8001834:	6420      	str	r0, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001836:	6890      	ldr	r0, [r2, #8]
 8001838:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800183c:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800183e:	fba5 0101 	umull	r0, r1, r5, r1
 8001842:	0c89      	lsrs	r1, r1, #18
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001844:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001846:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800184a:	0049      	lsls	r1, r1, #1
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800184c:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8001850:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001852:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001854:	9901      	ldr	r1, [sp, #4]
 8001856:	2900      	cmp	r1, #0
 8001858:	f43f af41 	beq.w	80016de <HAL_ADC_Init+0x22>
            wait_loop_index--;
 800185c:	9901      	ldr	r1, [sp, #4]
 800185e:	3901      	subs	r1, #1
 8001860:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8001862:	9901      	ldr	r1, [sp, #4]
 8001864:	2900      	cmp	r1, #0
 8001866:	d1f9      	bne.n	800185c <HAL_ADC_Init+0x1a0>
 8001868:	e739      	b.n	80016de <HAL_ADC_Init+0x22>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800186a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800186c:	69e3      	ldr	r3, [r4, #28]
 800186e:	f021 010f 	bic.w	r1, r1, #15
 8001872:	3b01      	subs	r3, #1
 8001874:	430b      	orrs	r3, r1
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
 8001878:	e7a0      	b.n	80017bc <HAL_ADC_Init+0x100>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800187a:	b985      	cbnz	r5, 800189e <HAL_ADC_Init+0x1e2>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800187c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800187e:	3901      	subs	r1, #1
 8001880:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001888:	e775      	b.n	8001776 <HAL_ADC_Init+0xba>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800188a:	6811      	ldr	r1, [r2, #0]
 800188c:	07c9      	lsls	r1, r1, #31
 800188e:	f53f af60 	bmi.w	8001752 <HAL_ADC_Init+0x96>
 8001892:	e751      	b.n	8001738 <HAL_ADC_Init+0x7c>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	07db      	lsls	r3, r3, #31
 8001898:	f53f af5b 	bmi.w	8001752 <HAL_ADC_Init+0x96>
 800189c:	e752      	b.n	8001744 <HAL_ADC_Init+0x88>
        ADC_STATE_CLR_SET(hadc->State,
 800189e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80018a0:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80018a4:	f041 0120 	orr.w	r1, r1, #32
 80018a8:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80018ac:	f041 0101 	orr.w	r1, r1, #1
 80018b0:	6461      	str	r1, [r4, #68]	; 0x44
 80018b2:	e760      	b.n	8001776 <HAL_ADC_Init+0xba>
 80018b4:	50000100 	.word	0x50000100
 80018b8:	50000300 	.word	0x50000300
 80018bc:	fff0c007 	.word	0xfff0c007
 80018c0:	20000800 	.word	0x20000800
 80018c4:	431bde83 	.word	0x431bde83

080018c8 <HAL_ADC_Start_DMA>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018c8:	6803      	ldr	r3, [r0, #0]
{
 80018ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018ce:	689d      	ldr	r5, [r3, #8]
 80018d0:	f015 0504 	ands.w	r5, r5, #4
 80018d4:	d113      	bne.n	80018fe <HAL_ADC_Start_DMA+0x36>
    __HAL_LOCK(hadc);
 80018d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80018da:	2b01      	cmp	r3, #1
 80018dc:	4604      	mov	r4, r0
 80018de:	d00e      	beq.n	80018fe <HAL_ADC_Start_DMA+0x36>
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80018e0:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80019cc <HAL_ADC_Start_DMA+0x104>
    __HAL_LOCK(hadc);
 80018e4:	2701      	movs	r7, #1
 80018e6:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80018ea:	f8da 6008 	ldr.w	r6, [sl, #8]
 80018ee:	f016 061f 	ands.w	r6, r6, #31
 80018f2:	d008      	beq.n	8001906 <HAL_ADC_Start_DMA+0x3e>
      __HAL_UNLOCK(hadc);
 80018f4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
}
 80018f8:	4638      	mov	r0, r7
 80018fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmp_hal_status = HAL_BUSY;
 80018fe:	2702      	movs	r7, #2
}
 8001900:	4638      	mov	r0, r7
 8001902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8001906:	4688      	mov	r8, r1
 8001908:	4691      	mov	r9, r2
 800190a:	f7ff fea7 	bl	800165c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800190e:	4607      	mov	r7, r0
 8001910:	2800      	cmp	r0, #0
 8001912:	d150      	bne.n	80019b6 <HAL_ADC_Start_DMA+0xee>
        ADC_STATE_CLR_SET(hadc->State,
 8001914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001916:	6821      	ldr	r1, [r4, #0]
 8001918:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6423      	str	r3, [r4, #64]	; 0x40
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001926:	f8da 3008 	ldr.w	r3, [sl, #8]
 800192a:	06d8      	lsls	r0, r3, #27
 800192c:	d03b      	beq.n	80019a6 <HAL_ADC_Start_DMA+0xde>
 800192e:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8001932:	d038      	beq.n	80019a6 <HAL_ADC_Start_DMA+0xde>
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001934:	6c23      	ldr	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_ADC_Start_DMA+0xf4>)
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800193c:	4291      	cmp	r1, r2
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193e:	6423      	str	r3, [r4, #64]	; 0x40
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001940:	d10a      	bne.n	8001958 <HAL_ADC_Start_DMA+0x90>
 8001942:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	d505      	bpl.n	8001958 <HAL_ADC_Start_DMA+0x90>
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800194c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800194e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001956:	6423      	str	r3, [r4, #64]	; 0x40
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001958:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800195c:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <HAL_ADC_Start_DMA+0xf8>)
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001962:	bf1c      	itt	ne
 8001964:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8001966:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800196a:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800196c:	2600      	movs	r6, #0
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_ADC_Start_DMA+0xfc>)
        __HAL_UNLOCK(hadc);
 8001970:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001974:	6282      	str	r2, [r0, #40]	; 0x28
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001976:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <HAL_ADC_Start_DMA+0x100>)
 800197a:	6302      	str	r2, [r0, #48]	; 0x30
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800197c:	231c      	movs	r3, #28
 800197e:	600b      	str	r3, [r1, #0]
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001980:	684b      	ldr	r3, [r1, #4]
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001988:	68ce      	ldr	r6, [r1, #12]
 800198a:	f046 0601 	orr.w	r6, r6, #1
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198e:	464b      	mov	r3, r9
 8001990:	4642      	mov	r2, r8
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001992:	60ce      	str	r6, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001994:	3140      	adds	r1, #64	; 0x40
 8001996:	f000 facb 	bl	8001f30 <HAL_DMA_Start_IT>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6893      	ldr	r3, [r2, #8]
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6093      	str	r3, [r2, #8]
 80019a4:	e7a8      	b.n	80018f8 <HAL_ADC_Start_DMA+0x30>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019ac:	6423      	str	r3, [r4, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019ae:	68cb      	ldr	r3, [r1, #12]
 80019b0:	019a      	lsls	r2, r3, #6
 80019b2:	d5d1      	bpl.n	8001958 <HAL_ADC_Start_DMA+0x90>
 80019b4:	e7ca      	b.n	800194c <HAL_ADC_Start_DMA+0x84>
        __HAL_UNLOCK(hadc);
 80019b6:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
 80019ba:	e79d      	b.n	80018f8 <HAL_ADC_Start_DMA+0x30>
 80019bc:	50000100 	.word	0x50000100
 80019c0:	080015a9 	.word	0x080015a9
 80019c4:	080015a1 	.word	0x080015a1
 80019c8:	08001589 	.word	0x08001589
 80019cc:	50000300 	.word	0x50000300

080019d0 <HAL_ADC_ConfigChannel>:
{
 80019d0:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80019d2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019d6:	68cc      	ldr	r4, [r1, #12]
{
 80019d8:	b082      	sub	sp, #8
 80019da:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80019dc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0U;
 80019de:	f04f 0000 	mov.w	r0, #0
 80019e2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80019e4:	f000 80c3 	beq.w	8001b6e <HAL_ADC_ConfigChannel+0x19e>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019e8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019f0:	6895      	ldr	r5, [r2, #8]
 80019f2:	076d      	lsls	r5, r5, #29
 80019f4:	d436      	bmi.n	8001a64 <HAL_ADC_ConfigChannel+0x94>
    if (sConfig->Rank < 5U)
 80019f6:	6848      	ldr	r0, [r1, #4]
 80019f8:	2804      	cmp	r0, #4
 80019fa:	d87d      	bhi.n	8001af8 <HAL_ADC_ConfigChannel+0x128>
      MODIFY_REG(hadc->Instance->SQR1,
 80019fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001a00:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8001a02:	680d      	ldr	r5, [r1, #0]
 8001a04:	0040      	lsls	r0, r0, #1
 8001a06:	271f      	movs	r7, #31
 8001a08:	4087      	lsls	r7, r0
 8001a0a:	ea26 0607 	bic.w	r6, r6, r7
 8001a0e:	fa05 f000 	lsl.w	r0, r5, r0
 8001a12:	4330      	orrs	r0, r6
 8001a14:	6310      	str	r0, [r2, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001a16:	6890      	ldr	r0, [r2, #8]
 8001a18:	f010 0f0c 	tst.w	r0, #12
 8001a1c:	d135      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0xba>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a1e:	2d09      	cmp	r5, #9
 8001a20:	f240 8093 	bls.w	8001b4a <HAL_ADC_ConfigChannel+0x17a>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a24:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8001a28:	6990      	ldr	r0, [r2, #24]
 8001a2a:	688e      	ldr	r6, [r1, #8]
 8001a2c:	3f1e      	subs	r7, #30
 8001a2e:	f04f 0c07 	mov.w	ip, #7
 8001a32:	fa0c fc07 	lsl.w	ip, ip, r7
 8001a36:	ea20 000c 	bic.w	r0, r0, ip
 8001a3a:	40be      	lsls	r6, r7
 8001a3c:	4330      	orrs	r0, r6
 8001a3e:	6190      	str	r0, [r2, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a40:	e9d1 6704 	ldrd	r6, r7, [r1, #16]
 8001a44:	68d0      	ldr	r0, [r2, #12]
 8001a46:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001a4a:	0040      	lsls	r0, r0, #1
 8001a4c:	3e01      	subs	r6, #1
 8001a4e:	fa07 f000 	lsl.w	r0, r7, r0
    switch (sConfig->OffsetNumber)
 8001a52:	2e03      	cmp	r6, #3
 8001a54:	f200 811d 	bhi.w	8001c92 <HAL_ADC_ConfigChannel+0x2c2>
 8001a58:	e8df f016 	tbh	[pc, r6, lsl #1]
 8001a5c:	00e4000e 	.word	0x00e4000e
 8001a60:	00d000da 	.word	0x00d000da
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001a72:	b002      	add	sp, #8
 8001a74:	bcf0      	pop	{r4, r5, r6, r7}
 8001a76:	4770      	bx	lr
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a78:	6e17      	ldr	r7, [r2, #96]	; 0x60
 8001a7a:	4e9c      	ldr	r6, [pc, #624]	; (8001cec <HAL_ADC_ConfigChannel+0x31c>)
 8001a7c:	403e      	ands	r6, r7
 8001a7e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001a82:	4330      	orrs	r0, r6
 8001a84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001a88:	6610      	str	r0, [r2, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a8a:	6890      	ldr	r0, [r2, #8]
 8001a8c:	f000 0003 	and.w	r0, r0, #3
 8001a90:	2801      	cmp	r0, #1
 8001a92:	d068      	beq.n	8001b66 <HAL_ADC_ConfigChannel+0x196>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a94:	2c01      	cmp	r4, #1
 8001a96:	d06e      	beq.n	8001b76 <HAL_ADC_ConfigChannel+0x1a6>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001a98:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	40a8      	lsls	r0, r5
 8001aa0:	ea21 0100 	bic.w	r1, r1, r0
 8001aa4:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aa8:	2d10      	cmp	r5, #16
 8001aaa:	d039      	beq.n	8001b20 <HAL_ADC_ConfigChannel+0x150>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001aac:	2d11      	cmp	r5, #17
 8001aae:	d179      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1d4>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ab0:	498f      	ldr	r1, [pc, #572]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
 8001ab2:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ab4:	01ce      	lsls	r6, r1, #7
 8001ab6:	d437      	bmi.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ab8:	6890      	ldr	r0, [r2, #8]
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001aba:	498e      	ldr	r1, [pc, #568]	; (8001cf4 <HAL_ADC_ConfigChannel+0x324>)
 8001abc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ac0:	f000 0003 	and.w	r0, r0, #3
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ac4:	bf18      	it	ne
 8001ac6:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001aca:	2801      	cmp	r0, #1
 8001acc:	f000 808c 	beq.w	8001be8 <HAL_ADC_ConfigChannel+0x218>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ad0:	6888      	ldr	r0, [r1, #8]
 8001ad2:	f000 0003 	and.w	r0, r0, #3
 8001ad6:	2801      	cmp	r0, #1
 8001ad8:	f000 80d7 	beq.w	8001c8a <HAL_ADC_ConfigChannel+0x2ba>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001adc:	2d10      	cmp	r5, #16
 8001ade:	f000 80b6 	beq.w	8001c4e <HAL_ADC_ConfigChannel+0x27e>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ae2:	2d11      	cmp	r5, #17
 8001ae4:	f000 80a8 	beq.w	8001c38 <HAL_ADC_ConfigChannel+0x268>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ae8:	2d12      	cmp	r5, #18
 8001aea:	d11d      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001aec:	4980      	ldr	r1, [pc, #512]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
 8001aee:	688a      	ldr	r2, [r1, #8]
 8001af0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001af4:	608a      	str	r2, [r1, #8]
 8001af6:	e017      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
    else if (sConfig->Rank < 10U)
 8001af8:	2809      	cmp	r0, #9
 8001afa:	d917      	bls.n	8001b2c <HAL_ADC_ConfigChannel+0x15c>
    else if (sConfig->Rank < 15U)
 8001afc:	280e      	cmp	r0, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001afe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b02:	ea4f 0040 	mov.w	r0, r0, lsl #1
    else if (sConfig->Rank < 15U)
 8001b06:	d863      	bhi.n	8001bd0 <HAL_ADC_ConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b08:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8001b0a:	680d      	ldr	r5, [r1, #0]
 8001b0c:	383c      	subs	r0, #60	; 0x3c
 8001b0e:	271f      	movs	r7, #31
 8001b10:	4087      	lsls	r7, r0
 8001b12:	ea26 0607 	bic.w	r6, r6, r7
 8001b16:	fa05 f000 	lsl.w	r0, r5, r0
 8001b1a:	4330      	orrs	r0, r6
 8001b1c:	6390      	str	r0, [r2, #56]	; 0x38
 8001b1e:	e77a      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001b20:	4973      	ldr	r1, [pc, #460]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
 8001b22:	6889      	ldr	r1, [r1, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b24:	020f      	lsls	r7, r1, #8
 8001b26:	d5c7      	bpl.n	8001ab8 <HAL_ADC_ConfigChannel+0xe8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b28:	2000      	movs	r0, #0
 8001b2a:	e79f      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->SQR2,
 8001b2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001b30:	0040      	lsls	r0, r0, #1
 8001b32:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001b34:	680d      	ldr	r5, [r1, #0]
 8001b36:	381e      	subs	r0, #30
 8001b38:	271f      	movs	r7, #31
 8001b3a:	4087      	lsls	r7, r0
 8001b3c:	ea26 0607 	bic.w	r6, r6, r7
 8001b40:	fa05 f000 	lsl.w	r0, r5, r0
 8001b44:	4330      	orrs	r0, r6
 8001b46:	6350      	str	r0, [r2, #52]	; 0x34
 8001b48:	e765      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b4a:	6950      	ldr	r0, [r2, #20]
 8001b4c:	688e      	ldr	r6, [r1, #8]
 8001b4e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001b52:	2707      	movs	r7, #7
 8001b54:	fa07 f70c 	lsl.w	r7, r7, ip
 8001b58:	ea20 0007 	bic.w	r0, r0, r7
 8001b5c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001b60:	4330      	orrs	r0, r6
 8001b62:	6150      	str	r0, [r2, #20]
 8001b64:	e76c      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x70>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	07c0      	lsls	r0, r0, #31
 8001b6a:	d593      	bpl.n	8001a94 <HAL_ADC_ConfigChannel+0xc4>
 8001b6c:	e7dc      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
  __HAL_LOCK(hadc);
 8001b6e:	2002      	movs	r0, #2
}
 8001b70:	b002      	add	sp, #8
 8001b72:	bcf0      	pop	{r4, r5, r6, r7}
 8001b74:	4770      	bx	lr
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b76:	f8d2 00b0 	ldr.w	r0, [r2, #176]	; 0xb0
 8001b7a:	40ac      	lsls	r4, r5
 8001b7c:	4304      	orrs	r4, r0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b7e:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b80:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b84:	d915      	bls.n	8001bb2 <HAL_ADC_ConfigChannel+0x1e2>
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b86:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8001b8a:	688e      	ldr	r6, [r1, #8]
 8001b8c:	6994      	ldr	r4, [r2, #24]
 8001b8e:	f1a0 011b 	sub.w	r1, r0, #27
 8001b92:	2707      	movs	r7, #7
 8001b94:	408f      	lsls	r7, r1
 8001b96:	fa06 f001 	lsl.w	r0, r6, r1
 8001b9a:	ea24 0107 	bic.w	r1, r4, r7
 8001b9e:	4301      	orrs	r1, r0
 8001ba0:	6191      	str	r1, [r2, #24]
 8001ba2:	e781      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0xd8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ba4:	2d12      	cmp	r5, #18
 8001ba6:	d1bf      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ba8:	4951      	ldr	r1, [pc, #324]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
 8001baa:	6889      	ldr	r1, [r1, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bac:	024c      	lsls	r4, r1, #9
 8001bae:	d4bb      	bmi.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
 8001bb0:	e782      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0xe8>
        MODIFY_REG(hadc->Instance->SMPR1,
 8001bb2:	3501      	adds	r5, #1
 8001bb4:	6888      	ldr	r0, [r1, #8]
 8001bb6:	6951      	ldr	r1, [r2, #20]
 8001bb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001bbc:	2407      	movs	r4, #7
 8001bbe:	40ac      	lsls	r4, r5
 8001bc0:	ea21 0104 	bic.w	r1, r1, r4
 8001bc4:	fa00 f505 	lsl.w	r5, r0, r5
 8001bc8:	4329      	orrs	r1, r5
 8001bca:	6151      	str	r1, [r2, #20]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bcc:	2000      	movs	r0, #0
 8001bce:	e74d      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bd0:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 8001bd2:	680d      	ldr	r5, [r1, #0]
 8001bd4:	385a      	subs	r0, #90	; 0x5a
 8001bd6:	271f      	movs	r7, #31
 8001bd8:	4087      	lsls	r7, r0
 8001bda:	ea26 0607 	bic.w	r6, r6, r7
 8001bde:	fa05 f000 	lsl.w	r0, r5, r0
 8001be2:	4330      	orrs	r0, r6
 8001be4:	63d0      	str	r0, [r2, #60]	; 0x3c
 8001be6:	e716      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x46>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001be8:	6810      	ldr	r0, [r2, #0]
 8001bea:	07c0      	lsls	r0, r0, #31
 8001bec:	f57f af70 	bpl.w	8001ad0 <HAL_ADC_ConfigChannel+0x100>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf2:	f042 0220 	orr.w	r2, r2, #32
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	e737      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x9c>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001bfc:	6ed7      	ldr	r7, [r2, #108]	; 0x6c
 8001bfe:	4e3b      	ldr	r6, [pc, #236]	; (8001cec <HAL_ADC_ConfigChannel+0x31c>)
 8001c00:	403e      	ands	r6, r7
 8001c02:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001c06:	4330      	orrs	r0, r6
 8001c08:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001c0c:	66d0      	str	r0, [r2, #108]	; 0x6c
      break;
 8001c0e:	e73c      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c10:	6e97      	ldr	r7, [r2, #104]	; 0x68
 8001c12:	4e36      	ldr	r6, [pc, #216]	; (8001cec <HAL_ADC_ConfigChannel+0x31c>)
 8001c14:	403e      	ands	r6, r7
 8001c16:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001c1a:	4330      	orrs	r0, r6
 8001c1c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001c20:	6690      	str	r0, [r2, #104]	; 0x68
      break;
 8001c22:	e732      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xba>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c24:	6e57      	ldr	r7, [r2, #100]	; 0x64
 8001c26:	4e31      	ldr	r6, [pc, #196]	; (8001cec <HAL_ADC_ConfigChannel+0x31c>)
 8001c28:	403e      	ands	r6, r7
 8001c2a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8001c2e:	4330      	orrs	r0, r6
 8001c30:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001c34:	6650      	str	r0, [r2, #100]	; 0x64
      break;
 8001c36:	e728      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xba>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001c38:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001c3c:	f47f af74 	bne.w	8001b28 <HAL_ADC_ConfigChannel+0x158>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c40:	492b      	ldr	r1, [pc, #172]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
 8001c42:	688a      	ldr	r2, [r1, #8]
 8001c44:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001c48:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4a:	2000      	movs	r0, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001c4c:	e70e      	b.n	8001a6c <HAL_ADC_ConfigChannel+0x9c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c4e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001c52:	f47f af69 	bne.w	8001b28 <HAL_ADC_ConfigChannel+0x158>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c56:	4926      	ldr	r1, [pc, #152]	; (8001cf0 <HAL_ADC_ConfigChannel+0x320>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c58:	4c27      	ldr	r4, [pc, #156]	; (8001cf8 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c5a:	688a      	ldr	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c5c:	4827      	ldr	r0, [pc, #156]	; (8001cfc <HAL_ADC_ConfigChannel+0x32c>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c5e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c62:	608a      	str	r2, [r1, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	fba0 1202 	umull	r1, r2, r0, r2
 8001c6a:	0c92      	lsrs	r2, r2, #18
 8001c6c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001c74:	9a01      	ldr	r2, [sp, #4]
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	f43f af56 	beq.w	8001b28 <HAL_ADC_ConfigChannel+0x158>
            wait_loop_index--;
 8001c7c:	9a01      	ldr	r2, [sp, #4]
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 8001c82:	9a01      	ldr	r2, [sp, #4]
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d1f9      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x2ac>
 8001c88:	e74e      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x158>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c8a:	6809      	ldr	r1, [r1, #0]
 8001c8c:	07c9      	lsls	r1, r1, #31
 8001c8e:	d4af      	bmi.n	8001bf0 <HAL_ADC_ConfigChannel+0x220>
 8001c90:	e724      	b.n	8001adc <HAL_ADC_ConfigChannel+0x10c>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c92:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001c94:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001c98:	ebb0 6f85 	cmp.w	r0, r5, lsl #26
 8001c9c:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8001ca0:	d014      	beq.n	8001ccc <HAL_ADC_ConfigChannel+0x2fc>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ca2:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001ca4:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001ca8:	4286      	cmp	r6, r0
 8001caa:	d014      	beq.n	8001cd6 <HAL_ADC_ConfigChannel+0x306>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cac:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001cae:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001cb2:	4286      	cmp	r6, r0
 8001cb4:	d014      	beq.n	8001ce0 <HAL_ADC_ConfigChannel+0x310>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb6:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001cb8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8001cbc:	4286      	cmp	r6, r0
 8001cbe:	f47f aee4 	bne.w	8001a8a <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001cc2:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 8001cc4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001cc8:	66d0      	str	r0, [r2, #108]	; 0x6c
 8001cca:	e6de      	b.n	8001a8a <HAL_ADC_ConfigChannel+0xba>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ccc:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8001cce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001cd2:	6610      	str	r0, [r2, #96]	; 0x60
 8001cd4:	e7e5      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x2d2>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cd6:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001cd8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001cdc:	6650      	str	r0, [r2, #100]	; 0x64
 8001cde:	e7e5      	b.n	8001cac <HAL_ADC_ConfigChannel+0x2dc>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ce0:	6e90      	ldr	r0, [r2, #104]	; 0x68
 8001ce2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001ce6:	6690      	str	r0, [r2, #104]	; 0x68
 8001ce8:	e7e5      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x2e6>
 8001cea:	bf00      	nop
 8001cec:	83fff000 	.word	0x83fff000
 8001cf0:	50000300 	.word	0x50000300
 8001cf4:	50000100 	.word	0x50000100
 8001cf8:	20000800 	.word	0x20000800
 8001cfc:	431bde83 	.word	0x431bde83

08001d00 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8001d00:	b4f0      	push	{r4, r5, r6, r7}
 8001d02:	4603      	mov	r3, r0
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d04:	4835      	ldr	r0, [pc, #212]	; (8001ddc <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8001d06:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8001d08:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001d0c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8001d10:	bf18      	it	ne
 8001d12:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
  __HAL_LOCK(hadc);
 8001d16:	2a01      	cmp	r2, #1
 8001d18:	d035      	beq.n	8001d86 <HAL_ADCEx_MultiModeConfigChannel+0x86>
 8001d1a:	2201      	movs	r2, #1
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d1c:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001d22:	68a2      	ldr	r2, [r4, #8]
 8001d24:	0757      	lsls	r7, r2, #29
 8001d26:	d509      	bpl.n	8001d3c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	f042 0220 	orr.w	r2, r2, #32
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
    tmp_hal_status = HAL_ERROR;
 8001d30:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
} 
 8001d38:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3a:	4770      	bx	lr
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001d3c:	6882      	ldr	r2, [r0, #8]
 8001d3e:	0756      	lsls	r6, r2, #29
 8001d40:	d4f2      	bmi.n	8001d28 <HAL_ADCEx_MultiModeConfigChannel+0x28>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001d42:	b31d      	cbz	r5, 8001d8c <HAL_ADCEx_MultiModeConfigChannel+0x8c>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d44:	4f26      	ldr	r7, [pc, #152]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001d46:	684e      	ldr	r6, [r1, #4]
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	f893 c030 	ldrb.w	ip, [r3, #48]	; 0x30
 8001d4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d52:	4332      	orrs	r2, r6
 8001d54:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8001d58:	60ba      	str	r2, [r7, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d5a:	68a2      	ldr	r2, [r4, #8]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	2a01      	cmp	r2, #1
 8001d62:	d037      	beq.n	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0xd4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001d64:	6882      	ldr	r2, [r0, #8]
 8001d66:	f002 0203 	and.w	r2, r2, #3
 8001d6a:	2a01      	cmp	r2, #1
 8001d6c:	d02a      	beq.n	8001dc4 <HAL_ADCEx_MultiModeConfigChannel+0xc4>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001d6e:	481c      	ldr	r0, [pc, #112]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001d70:	6889      	ldr	r1, [r1, #8]
 8001d72:	6882      	ldr	r2, [r0, #8]
 8001d74:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001d78:	430d      	orrs	r5, r1
 8001d7a:	f022 020f 	bic.w	r2, r2, #15
 8001d7e:	4315      	orrs	r5, r2
 8001d80:	6085      	str	r5, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e7d5      	b.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x32>
  __HAL_LOCK(hadc);
 8001d86:	2002      	movs	r0, #2
} 
 8001d88:	bcf0      	pop	{r4, r5, r6, r7}
 8001d8a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001d8c:	4914      	ldr	r1, [pc, #80]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001d8e:	688a      	ldr	r2, [r1, #8]
 8001d90:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d94:	608a      	str	r2, [r1, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001d96:	68a2      	ldr	r2, [r4, #8]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	2a01      	cmp	r2, #1
 8001d9e:	d015      	beq.n	8001dcc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001da0:	6882      	ldr	r2, [r0, #8]
 8001da2:	f002 0203 	and.w	r2, r2, #3
 8001da6:	2a01      	cmp	r2, #1
 8001da8:	d008      	beq.n	8001dbc <HAL_ADCEx_MultiModeConfigChannel+0xbc>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001daa:	490d      	ldr	r1, [pc, #52]	; (8001de0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8001dac:	688a      	ldr	r2, [r1, #8]
 8001dae:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8001db2:	f022 020f 	bic.w	r2, r2, #15
 8001db6:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2000      	movs	r0, #0
 8001dba:	e7ba      	b.n	8001d32 <HAL_ADCEx_MultiModeConfigChannel+0x32>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dbc:	6802      	ldr	r2, [r0, #0]
 8001dbe:	07d2      	lsls	r2, r2, #31
 8001dc0:	d4df      	bmi.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8001dc2:	e7f2      	b.n	8001daa <HAL_ADCEx_MultiModeConfigChannel+0xaa>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001dc4:	6802      	ldr	r2, [r0, #0]
 8001dc6:	07d0      	lsls	r0, r2, #31
 8001dc8:	d4db      	bmi.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8001dca:	e7d0      	b.n	8001d6e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dcc:	6822      	ldr	r2, [r4, #0]
 8001dce:	07d1      	lsls	r1, r2, #31
 8001dd0:	d4d7      	bmi.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8001dd2:	e7e5      	b.n	8001da0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001dd4:	6822      	ldr	r2, [r4, #0]
 8001dd6:	07d4      	lsls	r4, r2, #31
 8001dd8:	d5c4      	bpl.n	8001d64 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8001dda:	e7d2      	b.n	8001d82 <HAL_ADCEx_MultiModeConfigChannel+0x82>
 8001ddc:	50000100 	.word	0x50000100
 8001de0:	50000300 	.word	0x50000300

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4908      	ldr	r1, [pc, #32]	; (8001e08 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8001de6:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dea:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dec:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001df0:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df2:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e00:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 8001e04:	60cb      	str	r3, [r1, #12]
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_NVIC_SetPriority+0x68>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e16:	f1c3 0507 	rsb	r5, r3, #7
 8001e1a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	bf28      	it	cs
 8001e22:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e24:	2c06      	cmp	r4, #6
 8001e26:	d919      	bls.n	8001e5c <HAL_NVIC_SetPriority+0x50>
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e2e:	409c      	lsls	r4, r3
 8001e30:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e38:	40ac      	lsls	r4, r5
 8001e3a:	ea21 0104 	bic.w	r1, r1, r4
 8001e3e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001e40:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e42:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001e46:	db0c      	blt.n	8001e62 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001e4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001e50:	0109      	lsls	r1, r1, #4
 8001e52:	b2c9      	uxtb	r1, r1
 8001e54:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001e58:	bc30      	pop	{r4, r5}
 8001e5a:	4770      	bx	lr
 8001e5c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5e:	4613      	mov	r3, r2
 8001e60:	e7e8      	b.n	8001e34 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	4b05      	ldr	r3, [pc, #20]	; (8001e78 <HAL_NVIC_SetPriority+0x6c>)
 8001e64:	f000 000f 	and.w	r0, r0, #15
 8001e68:	0109      	lsls	r1, r1, #4
 8001e6a:	4403      	add	r3, r0
 8001e6c:	b2c9      	uxtb	r1, r1
 8001e6e:	7619      	strb	r1, [r3, #24]
 8001e70:	bc30      	pop	{r4, r5}
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	e000ecfc 	.word	0xe000ecfc

08001e7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	db07      	blt.n	8001e90 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e80:	f000 011f 	and.w	r1, r0, #31
 8001e84:	4a03      	ldr	r2, [pc, #12]	; (8001e94 <HAL_NVIC_EnableIRQ+0x18>)
 8001e86:	0940      	lsrs	r0, r0, #5
 8001e88:	2301      	movs	r3, #1
 8001e8a:	408b      	lsls	r3, r1
 8001e8c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100

08001e98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e98:	3801      	subs	r0, #1
 8001e9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e9e:	d20e      	bcs.n	8001ebe <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	4c08      	ldr	r4, [pc, #32]	; (8001ec8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea8:	20f0      	movs	r0, #240	; 0xf0
 8001eaa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 8001eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	6019      	str	r1, [r3, #0]
 8001ebc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001ecc:	b338      	cbz	r0, 8001f1e <HAL_DMA_Init+0x52>
{ 
 8001ece:	b470      	push	{r4, r5, r6}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed0:	e9d0 2501 	ldrd	r2, r5, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ed4:	e9d0 1403 	ldrd	r1, r4, [r0, #12]
 8001ed8:	4603      	mov	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001eda:	432a      	orrs	r2, r5
  tmp = hdma->Instance->CCR;
 8001edc:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ede:	695e      	ldr	r6, [r3, #20]
 8001ee0:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8001ee8:	6804      	ldr	r4, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_DMA_Init+0x58>)
 8001eec:	4e0e      	ldr	r6, [pc, #56]	; (8001f28 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eee:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef0:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ef2:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001ef6:	4401      	add	r1, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	432a      	orrs	r2, r5
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001efa:	f024 0430 	bic.w	r4, r4, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001efe:	4322      	orrs	r2, r4
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f00:	fba6 6101 	umull	r6, r1, r6, r1
  hdma->Instance->CCR = tmp;  
 8001f04:	6002      	str	r2, [r0, #0]
  hdma->DmaBaseAddress = DMA1;
 8001f06:	4c09      	ldr	r4, [pc, #36]	; (8001f2c <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f08:	0909      	lsrs	r1, r1, #4
  hdma->Lock = HAL_UNLOCKED;
 8001f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0e:	2000      	movs	r0, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f10:	0089      	lsls	r1, r1, #2
  hdma->Lock = HAL_UNLOCKED;
 8001f12:	841a      	strh	r2, [r3, #32]
  hdma->DmaBaseAddress = DMA1;
 8001f14:	e9c3 410f 	strd	r4, r1, [r3, #60]	; 0x3c
}  
 8001f18:	bc70      	pop	{r4, r5, r6}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f1a:	6398      	str	r0, [r3, #56]	; 0x38
}  
 8001f1c:	4770      	bx	lr
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
}  
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	bffdfff8 	.word	0xbffdfff8
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	40020000 	.word	0x40020000

08001f30 <HAL_DMA_Start_IT>:
{
 8001f30:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8001f32:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001f36:	2c01      	cmp	r4, #1
 8001f38:	d039      	beq.n	8001fae <HAL_DMA_Start_IT+0x7e>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f3a:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001f3e:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f40:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001f42:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f46:	d005      	beq.n	8001f54 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f880 3020 	strb.w	r3, [r0, #32]
} 
 8001f4e:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8001f50:	2002      	movs	r0, #2
} 
 8001f52:	4770      	bx	lr
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f54:	6804      	ldr	r4, [r0, #0]
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f56:	2702      	movs	r7, #2
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f58:	2600      	movs	r6, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001f5a:	f880 7021 	strb.w	r7, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5e:	6386      	str	r6, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f60:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f62:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f64:	f026 0c01 	bic.w	ip, r6, #1
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f68:	6c06      	ldr	r6, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f6a:	f8c4 c000 	str.w	ip, [r4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f6e:	40b5      	lsls	r5, r6
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f70:	6846      	ldr	r6, [r0, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f72:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001f74:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback )
 8001f76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f78:	2e10      	cmp	r6, #16
    hdma->Instance->CPAR = DstAddress;
 8001f7a:	bf0b      	itete	eq
 8001f7c:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8001f7e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f80:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8001f82:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001f84:	b153      	cbz	r3, 8001f9c <HAL_DMA_Start_IT+0x6c>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	f043 030e 	orr.w	r3, r3, #14
 8001f8c:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6023      	str	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f96:	2000      	movs	r0, #0
} 
 8001f98:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9a:	4770      	bx	lr
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f043 030a 	orr.w	r3, r3, #10
 8001fa2:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	f023 0304 	bic.w	r3, r3, #4
 8001faa:	6023      	str	r3, [r4, #0]
 8001fac:	e7ef      	b.n	8001f8e <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 8001fae:	2002      	movs	r0, #2
} 
 8001fb0:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DMA_IRQHandler>:
{
 8001fb4:	b470      	push	{r4, r5, r6}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fb6:	e9d0 620f 	ldrd	r6, r2, [r0, #60]	; 0x3c
 8001fba:	2304      	movs	r3, #4
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fbc:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001fbe:	6804      	ldr	r4, [r0, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fc0:	4093      	lsls	r3, r2
 8001fc2:	420b      	tst	r3, r1
  uint32_t source_it = hdma->Instance->CCR;
 8001fc4:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x32>
 8001fc8:	f015 0f04 	tst.w	r5, #4
 8001fcc:	d00b      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	0692      	lsls	r2, r2, #26
 8001fd2:	d403      	bmi.n	8001fdc <HAL_DMA_IRQHandler+0x28>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	f022 0204 	bic.w	r2, r2, #4
 8001fda:	6022      	str	r2, [r4, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fdc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fde:	6073      	str	r3, [r6, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	b1ca      	cbz	r2, 8002016 <HAL_DMA_IRQHandler+0x62>
}  
 8001fe2:	bc70      	pop	{r4, r5, r6}
  		hdma->XferCpltCallback(hdma);
 8001fe4:	4710      	bx	r2
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	4093      	lsls	r3, r2
 8001fea:	420b      	tst	r3, r1
 8001fec:	d015      	beq.n	800201a <HAL_DMA_IRQHandler+0x66>
 8001fee:	f015 0f02 	tst.w	r5, #2
 8001ff2:	d012      	beq.n	800201a <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	0692      	lsls	r2, r2, #26
 8001ff8:	d406      	bmi.n	8002008 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ffa:	6822      	ldr	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	2101      	movs	r1, #1
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ffe:	f022 020a 	bic.w	r2, r2, #10
 8002002:	6022      	str	r2, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002004:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
  	if(hdma->XferCpltCallback != NULL)
 8002008:	6a82      	ldr	r2, [r0, #40]	; 0x28
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800200a:	6073      	str	r3, [r6, #4]
  	__HAL_UNLOCK(hdma);
 800200c:	2300      	movs	r3, #0
 800200e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002012:	2a00      	cmp	r2, #0
 8002014:	d1e5      	bne.n	8001fe2 <HAL_DMA_IRQHandler+0x2e>
}  
 8002016:	bc70      	pop	{r4, r5, r6}
 8002018:	4770      	bx	lr
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800201a:	2308      	movs	r3, #8
 800201c:	4093      	lsls	r3, r2
 800201e:	420b      	tst	r3, r1
 8002020:	d0f9      	beq.n	8002016 <HAL_DMA_IRQHandler+0x62>
 8002022:	072b      	lsls	r3, r5, #28
 8002024:	d5f7      	bpl.n	8002016 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002026:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferErrorCallback != NULL)
 8002028:	6b01      	ldr	r1, [r0, #48]	; 0x30
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800202a:	f023 030e 	bic.w	r3, r3, #14
 800202e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002030:	2301      	movs	r3, #1
 8002032:	fa03 f202 	lsl.w	r2, r3, r2
    __HAL_UNLOCK(hdma); 
 8002036:	f44f 7480 	mov.w	r4, #256	; 0x100
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800203a:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800203c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma); 
 800203e:	8404      	strh	r4, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002040:	2900      	cmp	r1, #0
 8002042:	d0e8      	beq.n	8002016 <HAL_DMA_IRQHandler+0x62>
}  
 8002044:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 8002046:	4708      	bx	r1

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204c:	680d      	ldr	r5, [r1, #0]
{
 800204e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002050:	2d00      	cmp	r5, #0
 8002052:	f000 80c2 	beq.w	80021da <HAL_GPIO_Init+0x192>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8002204 <HAL_GPIO_Init+0x1bc>
  uint32_t position = 0x00u;
 800205a:	2300      	movs	r3, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800205c:	f04f 0801 	mov.w	r8, #1
 8002060:	e076      	b.n	8002150 <HAL_GPIO_Init+0x108>
      temp = GPIOx->MODER;
 8002062:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002066:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800206a:	2603      	movs	r6, #3
 800206c:	fa06 f609 	lsl.w	r6, r6, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002070:	f002 0703 	and.w	r7, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002074:	ea2b 0b06 	bic.w	fp, fp, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002078:	fa07 f709 	lsl.w	r7, r7, r9
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800207c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002080:	ea47 070b 	orr.w	r7, r7, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002084:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002088:	ea6f 0606 	mvn.w	r6, r6
      GPIOx->MODER = temp;
 800208c:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208e:	f240 8091 	bls.w	80021b4 <HAL_GPIO_Init+0x16c>
      temp = GPIOx->PUPDR;
 8002092:	68c7      	ldr	r7, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002094:	688c      	ldr	r4, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002096:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002098:	fa04 f409 	lsl.w	r4, r4, r9
 800209c:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 800209e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a0:	00d4      	lsls	r4, r2, #3
 80020a2:	d551      	bpl.n	8002148 <HAL_GPIO_Init+0x100>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a4:	4e53      	ldr	r6, [pc, #332]	; (80021f4 <HAL_GPIO_Init+0x1ac>)
 80020a6:	69b4      	ldr	r4, [r6, #24]
 80020a8:	f044 0401 	orr.w	r4, r4, #1
 80020ac:	61b4      	str	r4, [r6, #24]
 80020ae:	69b4      	ldr	r4, [r6, #24]
 80020b0:	f023 0603 	bic.w	r6, r3, #3
 80020b4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80020b8:	f004 0401 	and.w	r4, r4, #1
 80020bc:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80020c0:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020c2:	f003 0403 	and.w	r4, r3, #3
 80020c6:	ea4f 0a84 	mov.w	sl, r4, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80020cc:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ce:	240f      	movs	r4, #15
 80020d0:	fa04 f90a 	lsl.w	r9, r4, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020d4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020d8:	ea27 0709 	bic.w	r7, r7, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020dc:	d00d      	beq.n	80020fa <HAL_GPIO_Init+0xb2>
 80020de:	4c46      	ldr	r4, [pc, #280]	; (80021f8 <HAL_GPIO_Init+0x1b0>)
 80020e0:	42a0      	cmp	r0, r4
 80020e2:	d07d      	beq.n	80021e0 <HAL_GPIO_Init+0x198>
 80020e4:	4c45      	ldr	r4, [pc, #276]	; (80021fc <HAL_GPIO_Init+0x1b4>)
 80020e6:	42a0      	cmp	r0, r4
 80020e8:	d07e      	beq.n	80021e8 <HAL_GPIO_Init+0x1a0>
 80020ea:	4c45      	ldr	r4, [pc, #276]	; (8002200 <HAL_GPIO_Init+0x1b8>)
 80020ec:	42a0      	cmp	r0, r4
 80020ee:	bf0c      	ite	eq
 80020f0:	2403      	moveq	r4, #3
 80020f2:	2405      	movne	r4, #5
 80020f4:	fa04 f40a 	lsl.w	r4, r4, sl
 80020f8:	4327      	orrs	r7, r4
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020fa:	60b7      	str	r7, [r6, #8]
        temp = EXTI->IMR;
 80020fc:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 8002100:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002104:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002106:	bf54      	ite	pl
 8002108:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800210a:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->IMR = temp;
 800210e:	f8cc 4000 	str.w	r4, [ip]

        temp = EXTI->EMR;
 8002112:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002116:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002118:	bf54      	ite	pl
 800211a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800211c:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->EMR = temp;
 8002120:	f8cc 4004 	str.w	r4, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002124:	f8dc 4008 	ldr.w	r4, [ip, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002128:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800212a:	bf54      	ite	pl
 800212c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800212e:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->RTSR = temp;
 8002132:	f8cc 4008 	str.w	r4, [ip, #8]

        temp = EXTI->FTSR;
 8002136:	f8dc 400c 	ldr.w	r4, [ip, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800213a:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 800213c:	bf54      	ite	pl
 800213e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002140:	ea4e 0404 	orrmi.w	r4, lr, r4
        }
        EXTI->FTSR = temp;
 8002144:	f8cc 400c 	str.w	r4, [ip, #12]
      }
    }

    position++;
 8002148:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214a:	fa35 f203 	lsrs.w	r2, r5, r3
 800214e:	d044      	beq.n	80021da <HAL_GPIO_Init+0x192>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	fa08 f403 	lsl.w	r4, r8, r3
    if (iocurrent != 0x00u)
 8002154:	ea14 0e05 	ands.w	lr, r4, r5
 8002158:	d0f6      	beq.n	8002148 <HAL_GPIO_Init+0x100>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215a:	684a      	ldr	r2, [r1, #4]
 800215c:	f022 0a10 	bic.w	sl, r2, #16
 8002160:	f1ba 0f02 	cmp.w	sl, #2
 8002164:	f47f af7d 	bne.w	8002062 <HAL_GPIO_Init+0x1a>
        temp = GPIOx->AFR[position >> 3u];
 8002168:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800216c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002170:	f003 0707 	and.w	r7, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002174:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002178:	00bf      	lsls	r7, r7, #2
 800217a:	f04f 0a0f 	mov.w	sl, #15
 800217e:	fa0a fb07 	lsl.w	fp, sl, r7
 8002182:	ea26 0a0b 	bic.w	sl, r6, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002186:	690e      	ldr	r6, [r1, #16]
 8002188:	40be      	lsls	r6, r7
 800218a:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3u] = temp;
 800218e:	f8c9 6020 	str.w	r6, [r9, #32]
      temp = GPIOx->MODER;
 8002192:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002196:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800219a:	2603      	movs	r6, #3
 800219c:	fa06 f609 	lsl.w	r6, r6, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a0:	f002 0703 	and.w	r7, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021a4:	ea2a 0a06 	bic.w	sl, sl, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a8:	fa07 f709 	lsl.w	r7, r7, r9
 80021ac:	ea47 070a 	orr.w	r7, r7, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80021b0:	43f6      	mvns	r6, r6
      GPIOx->MODER = temp;
 80021b2:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR;
 80021b4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021b6:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ba:	68cf      	ldr	r7, [r1, #12]
 80021bc:	fa07 f709 	lsl.w	r7, r7, r9
 80021c0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80021c4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80021c6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021ca:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ce:	ea2a 0404 	bic.w	r4, sl, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021d2:	409f      	lsls	r7, r3
 80021d4:	4327      	orrs	r7, r4
        GPIOx->OTYPER = temp;
 80021d6:	6047      	str	r7, [r0, #4]
 80021d8:	e75b      	b.n	8002092 <HAL_GPIO_Init+0x4a>
  }
}
 80021da:	b003      	add	sp, #12
 80021dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021e0:	fa08 f40a 	lsl.w	r4, r8, sl
 80021e4:	4327      	orrs	r7, r4
 80021e6:	e788      	b.n	80020fa <HAL_GPIO_Init+0xb2>
 80021e8:	f04f 0902 	mov.w	r9, #2
 80021ec:	fa09 f40a 	lsl.w	r4, r9, sl
 80021f0:	4327      	orrs	r7, r4
 80021f2:	e782      	b.n	80020fa <HAL_GPIO_Init+0xb2>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	48000c00 	.word	0x48000c00
 8002204:	40010400 	.word	0x40010400

08002208 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002208:	6903      	ldr	r3, [r0, #16]
 800220a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800220c:	bf14      	ite	ne
 800220e:	2001      	movne	r0, #1
 8002210:	2000      	moveq	r0, #0
 8002212:	4770      	bx	lr

08002214 <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 8002214:	b470      	push	{r4, r5, r6}
  return (READ_BIT(DACx->CR,
 8002216:	f001 0110 	and.w	r1, r1, #16
 800221a:	6805      	ldr	r5, [r0, #0]
 800221c:	2301      	movs	r3, #1
 800221e:	4604      	mov	r4, r0
 8002220:	fa03 f001 	lsl.w	r0, r3, r1
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 8002224:	43a8      	bics	r0, r5
 8002226:	d022      	beq.n	800226e <LL_DAC_Init+0x5a>
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    {
      MODIFY_REG(DACx->CR,
 8002228:	e9d2 0300 	ldrd	r0, r3, [r2]
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 800222c:	b96b      	cbnz	r3, 800224a <LL_DAC_Init+0x36>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 800222e:	68d2      	ldr	r2, [r2, #12]
 8002230:	6825      	ldr	r5, [r4, #0]
 8002232:	4302      	orrs	r2, r0
 8002234:	20fa      	movs	r0, #250	; 0xfa
 8002236:	4088      	lsls	r0, r1
 8002238:	fa02 f101 	lsl.w	r1, r2, r1
 800223c:	ea25 0200 	bic.w	r2, r5, r0
 8002240:	4311      	orrs	r1, r2
  ErrorStatus status = SUCCESS;
 8002242:	4618      	mov	r0, r3
      MODIFY_REG(DACx->CR,
 8002244:	6021      	str	r1, [r4, #0]
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
  }
  return status;
}
 8002246:	bc70      	pop	{r4, r5, r6}
 8002248:	4770      	bx	lr
      MODIFY_REG(DACx->CR,
 800224a:	e9d2 6502 	ldrd	r6, r5, [r2, #8]
 800224e:	4303      	orrs	r3, r0
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	4333      	orrs	r3, r6
 8002254:	f640 70fa 	movw	r0, #4090	; 0xffa
 8002258:	432b      	orrs	r3, r5
 800225a:	4088      	lsls	r0, r1
 800225c:	fa03 f101 	lsl.w	r1, r3, r1
 8002260:	ea22 0300 	bic.w	r3, r2, r0
 8002264:	4319      	orrs	r1, r3
 8002266:	6021      	str	r1, [r4, #0]
  ErrorStatus status = SUCCESS;
 8002268:	2000      	movs	r0, #0
}
 800226a:	bc70      	pop	{r4, r5, r6}
 800226c:	4770      	bx	lr
    status = ERROR;
 800226e:	4618      	mov	r0, r3
}
 8002270:	bc70      	pop	{r4, r5, r6}
 8002272:	4770      	bx	lr

08002274 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002278:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227a:	fa94 f2a4 	rbit	r2, r4
 800227e:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002282:	fa34 f302 	lsrs.w	r3, r4, r2
 8002286:	f000 80a0 	beq.w	80023ca <LL_GPIO_Init+0x156>
 800228a:	684f      	ldr	r7, [r1, #4]
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800228c:	f04f 0c01 	mov.w	ip, #1
 8002290:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002294:	2603      	movs	r6, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002296:	f04f 080f 	mov.w	r8, #15
 800229a:	e003      	b.n	80022a4 <LL_GPIO_Init+0x30>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 800229c:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800229e:	fa34 f302 	lsrs.w	r3, r4, r2
 80022a2:	d06e      	beq.n	8002382 <LL_GPIO_Init+0x10e>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80022a4:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 80022a8:	4023      	ands	r3, r4
 80022aa:	d0f7      	beq.n	800229c <LL_GPIO_Init+0x28>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80022ac:	f8d0 9000 	ldr.w	r9, [r0]
 80022b0:	fa93 faa3 	rbit	sl, r3
 80022b4:	faba fa8a 	clz	sl, sl
 80022b8:	fa93 f5a3 	rbit	r5, r3
 80022bc:	fab5 f585 	clz	r5, r5
 80022c0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80022c4:	006d      	lsls	r5, r5, #1
 80022c6:	fa06 fa0a 	lsl.w	sl, r6, sl
 80022ca:	fa07 f505 	lsl.w	r5, r7, r5
 80022ce:	ea29 090a 	bic.w	r9, r9, sl
 80022d2:	ea49 0505 	orr.w	r5, r9, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022d6:	f1be 0f01 	cmp.w	lr, #1
 80022da:	6005      	str	r5, [r0, #0]
 80022dc:	d816      	bhi.n	800230c <LL_GPIO_Init+0x98>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80022de:	6885      	ldr	r5, [r0, #8]
 80022e0:	fa93 f9a3 	rbit	r9, r3
 80022e4:	fab9 f989 	clz	r9, r9
 80022e8:	fa93 faa3 	rbit	sl, r3
 80022ec:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80022f0:	fa06 f909 	lsl.w	r9, r6, r9
 80022f4:	ea25 0909 	bic.w	r9, r5, r9
 80022f8:	faba fa8a 	clz	sl, sl
 80022fc:	688d      	ldr	r5, [r1, #8]
 80022fe:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002302:	fa05 f50a 	lsl.w	r5, r5, sl
 8002306:	ea49 0505 	orr.w	r5, r9, r5
 800230a:	6085      	str	r5, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800230c:	68c5      	ldr	r5, [r0, #12]
 800230e:	fa93 f9a3 	rbit	r9, r3
 8002312:	fab9 f989 	clz	r9, r9
 8002316:	fa93 faa3 	rbit	sl, r3
 800231a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800231e:	fa06 f909 	lsl.w	r9, r6, r9
 8002322:	ea25 0909 	bic.w	r9, r5, r9
 8002326:	faba fa8a 	clz	sl, sl
 800232a:	690d      	ldr	r5, [r1, #16]
 800232c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8002330:	fa05 f50a 	lsl.w	r5, r5, sl
 8002334:	ea49 0505 	orr.w	r5, r9, r5
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002338:	2f02      	cmp	r7, #2
 800233a:	60c5      	str	r5, [r0, #12]
 800233c:	d1ae      	bne.n	800229c <LL_GPIO_Init+0x28>
 800233e:	fa93 f9a3 	rbit	r9, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002342:	fab9 f989 	clz	r9, r9
 8002346:	f1b9 0f07 	cmp.w	r9, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800234a:	ea4f 2513 	mov.w	r5, r3, lsr #8
 800234e:	dc26      	bgt.n	800239e <LL_GPIO_Init+0x12a>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002350:	6a05      	ldr	r5, [r0, #32]
 8002352:	fa93 faa3 	rbit	sl, r3
 8002356:	faba fa8a 	clz	sl, sl
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002362:	fa08 fa0a 	lsl.w	sl, r8, sl
 8002366:	ea25 090a 	bic.w	r9, r5, sl
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	694d      	ldr	r5, [r1, #20]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	409d      	lsls	r5, r3
    pinpos++;
 8002374:	3201      	adds	r2, #1
 8002376:	ea49 0505 	orr.w	r5, r9, r5
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800237a:	fa34 f302 	lsrs.w	r3, r4, r2
 800237e:	6205      	str	r5, [r0, #32]
 8002380:	d190      	bne.n	80022a4 <LL_GPIO_Init+0x30>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002382:	f1be 0f01 	cmp.w	lr, #1
 8002386:	d807      	bhi.n	8002398 <LL_GPIO_Init+0x124>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002388:	68ca      	ldr	r2, [r1, #12]
 800238a:	6843      	ldr	r3, [r0, #4]
 800238c:	fb02 f204 	mul.w	r2, r2, r4
 8002390:	ea23 0404 	bic.w	r4, r3, r4
 8002394:	4314      	orrs	r4, r2
 8002396:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8002398:	2000      	movs	r0, #0
 800239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800239e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80023a0:	fa95 faa5 	rbit	sl, r5
 80023a4:	faba fa8a 	clz	sl, sl
 80023a8:	fa95 f5a5 	rbit	r5, r5
 80023ac:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80023b0:	fa08 fa0a 	lsl.w	sl, r8, sl
 80023b4:	ea23 090a 	bic.w	r9, r3, sl
 80023b8:	fab5 f585 	clz	r5, r5
 80023bc:	694b      	ldr	r3, [r1, #20]
 80023be:	00ad      	lsls	r5, r5, #2
 80023c0:	40ab      	lsls	r3, r5
 80023c2:	ea49 0303 	orr.w	r3, r9, r3
 80023c6:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80023c8:	e768      	b.n	800229c <LL_GPIO_Init+0x28>
 80023ca:	684b      	ldr	r3, [r1, #4]
 80023cc:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 80023d0:	e7d7      	b.n	8002382 <LL_GPIO_Init+0x10e>
 80023d2:	bf00      	nop

080023d4 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <LL_TIM_Init+0x8c>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80023d6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023d8:	4290      	cmp	r0, r2
{
 80023da:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	d038      	beq.n	8002450 <LL_TIM_Init+0x7c>
 80023de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023e2:	d015      	beq.n	8002410 <LL_TIM_Init+0x3c>
 80023e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80023e8:	4290      	cmp	r0, r2
 80023ea:	d011      	beq.n	8002410 <LL_TIM_Init+0x3c>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ec:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80023f0:	4290      	cmp	r0, r2
 80023f2:	d021      	beq.n	8002438 <LL_TIM_Init+0x64>
 80023f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023f8:	4290      	cmp	r0, r2
 80023fa:	d01d      	beq.n	8002438 <LL_TIM_Init+0x64>
 80023fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002400:	4290      	cmp	r0, r2
 8002402:	d019      	beq.n	8002438 <LL_TIM_Init+0x64>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002404:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002406:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002408:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800240a:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800240c:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800240e:	e00c      	b.n	800242a <LL_TIM_Init+0x56>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002410:	684a      	ldr	r2, [r1, #4]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002412:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241a:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800241c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002420:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002422:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002424:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002426:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002428:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800242a:	6943      	ldr	r3, [r0, #20]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002432:	bc30      	pop	{r4, r5}
 8002434:	2000      	movs	r0, #0
 8002436:	4770      	bx	lr
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002438:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800243a:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800243c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002440:	4323      	orrs	r3, r4
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002442:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002444:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002446:	62c3      	str	r3, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002448:	6282      	str	r2, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800244a:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800244c:	6303      	str	r3, [r0, #48]	; 0x30
}
 800244e:	e7ec      	b.n	800242a <LL_TIM_Init+0x56>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002450:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002452:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002454:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	432b      	orrs	r3, r5
 800245c:	e7ee      	b.n	800243c <LL_TIM_Init+0x68>
 800245e:	bf00      	nop
 8002460:	40012c00 	.word	0x40012c00

08002464 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002464:	4b01      	ldr	r3, [pc, #4]	; (800246c <LL_SetSystemCoreClock+0x8>)
 8002466:	6018      	str	r0, [r3, #0]
}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000800 	.word	0x20000800

08002470 <__libc_init_array>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	4d0d      	ldr	r5, [pc, #52]	; (80024a8 <__libc_init_array+0x38>)
 8002474:	4c0d      	ldr	r4, [pc, #52]	; (80024ac <__libc_init_array+0x3c>)
 8002476:	1b64      	subs	r4, r4, r5
 8002478:	10a4      	asrs	r4, r4, #2
 800247a:	2600      	movs	r6, #0
 800247c:	42a6      	cmp	r6, r4
 800247e:	d109      	bne.n	8002494 <__libc_init_array+0x24>
 8002480:	4d0b      	ldr	r5, [pc, #44]	; (80024b0 <__libc_init_array+0x40>)
 8002482:	4c0c      	ldr	r4, [pc, #48]	; (80024b4 <__libc_init_array+0x44>)
 8002484:	f000 f818 	bl	80024b8 <_init>
 8002488:	1b64      	subs	r4, r4, r5
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	2600      	movs	r6, #0
 800248e:	42a6      	cmp	r6, r4
 8002490:	d105      	bne.n	800249e <__libc_init_array+0x2e>
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	f855 3b04 	ldr.w	r3, [r5], #4
 8002498:	4798      	blx	r3
 800249a:	3601      	adds	r6, #1
 800249c:	e7ee      	b.n	800247c <__libc_init_array+0xc>
 800249e:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a2:	4798      	blx	r3
 80024a4:	3601      	adds	r6, #1
 80024a6:	e7f2      	b.n	800248e <__libc_init_array+0x1e>
 80024a8:	08002cd0 	.word	0x08002cd0
 80024ac:	08002cd0 	.word	0x08002cd0
 80024b0:	08002cd0 	.word	0x08002cd0
 80024b4:	08002cd4 	.word	0x08002cd4

080024b8 <_init>:
 80024b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ba:	bf00      	nop
 80024bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024be:	bc08      	pop	{r3}
 80024c0:	469e      	mov	lr, r3
 80024c2:	4770      	bx	lr

080024c4 <_fini>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr
